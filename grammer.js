/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammer = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"VAR":3,"var":4,"DIV":5,"FUNC_ARGS":6,"SEP":7,"PropertyField":8,".":9,"NUMERIC_INDEX":10,"NAT":11,"STRING_LITERAL":12,"OPENPARAN":13,"MultiLineExpr":14,"CLOSEPARAN":15,"Field":16,"Object":17,"DOLLAR_STR":18,"DOLLAR_PARAN":19,"Property":20,"PrimaryExpr":21,"NEWLINE":22,"PropertyList":23,"DirItem":24,"DIRITEM":25,"CURRENT_DIRITEM_PARAN":26,"PARENT_DIRITEM_PARAN":27,"DIRITEM_PARAN":28,"PATH":29,"Slashes":30,"ROOT":31,"Path":32,"PARENT_PATH":33,"CURRENT_PATH":34,"[":35,"]":36,"ArrayLiteral":37,"FUNC_ARROW":38,"{":39,"FUNC_BODY":40,"}":41,"FALSE":42,"TRUE":43,"MultiLineSEP":44,"OptMultiLineSEP":45,"MultiLineOR":46,"OR":47,"NLOR":48,"MultiLineAND":49,"AND":50,"NLAND":51,"VBAR":52,">>=":53,">>>":54,"<<<":55,">>":56,"<<":57,"Expr":58,"NullableSourceElements":59,"ExprStatement":60,"DefStatement":61,"DEF":62,"AssignStatement":63,"ASSIGN_OPERATOR":64,"OptSEP":65,"IfCaseStatement":66,"IfStatementNoNL":67,"IF":68,"ELSE":69,"IfStatement":70,"EmptyStatement":71,"WhileStatement":72,"WHILE":73,"Statement":74,"SourceElements":75,"Program":76,"EOF":77,"$accept":0,"$end":1},
terminals_: {2:"error",4:"var",5:"DIV",7:"SEP",9:".",10:"NUMERIC_INDEX",11:"NAT",12:"STRING_LITERAL",13:"OPENPARAN",15:"CLOSEPARAN",18:"DOLLAR_STR",19:"DOLLAR_PARAN",22:"NEWLINE",25:"DIRITEM",26:"CURRENT_DIRITEM_PARAN",27:"PARENT_DIRITEM_PARAN",28:"DIRITEM_PARAN",31:"ROOT",33:"PARENT_PATH",34:"CURRENT_PATH",35:"[",36:"]",38:"FUNC_ARROW",39:"{",41:"}",42:"FALSE",43:"TRUE",47:"OR",48:"NLOR",50:"AND",51:"NLAND",52:"VBAR",53:">>=",54:">>>",55:"<<<",56:">>",57:"<<",62:"DEF",64:"ASSIGN_OPERATOR",68:"IF",69:"ELSE",73:"WHILE",77:"EOF"},
productions_: [0,[3,1],[3,1],[6,1],[6,3],[8,2],[8,1],[8,2],[8,2],[8,4],[16,1],[16,3],[16,1],[17,1],[17,1],[17,3],[17,2],[20,3],[20,3],[23,1],[23,3],[23,2],[23,3],[24,1],[24,3],[24,3],[24,3],[29,1],[29,2],[30,1],[30,1],[32,1],[32,1],[32,1],[32,1],[32,2],[21,2],[21,3],[21,7],[21,6],[21,3],[21,2],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[37,1],[37,3],[37,2],[37,3],[44,1],[44,1],[45,0],[45,1],[46,1],[46,1],[49,1],[49,1],[14,1],[14,2],[14,3],[14,3],[14,3],[14,5],[14,5],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[58,1],[58,3],[58,3],[58,3],[58,4],[58,4],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[40,1],[40,1],[60,2],[61,4],[63,4],[65,0],[65,1],[66,6],[66,7],[67,2],[67,8],[67,6],[70,2],[71,1],[72,8],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[59,0],[59,1],[75,1],[75,2],[76,0],[76,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
				this.$ = [[$$[$0], '{atomic}', '{var}']];
			
break;
case 4:
				$$[$0-2].push([$$[$0], '{atomic}', '{var}']);
				this.$ = $$[$0-2];
			
break;
case 5:
				this.$ = [$$[$0], "{atomic}"];
			
break;
case 6:
				this.$ = [[$$[$0].substring(1), '{atomic}'], '{index}'];
			
break;
case 7:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 8:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 9:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 10:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 11:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 12:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 13:
				this.$ = [$$[$0], '{atomic}', '{var}'];
			
break;
case 14:
				this.$ = [($$[$0]).substr(1), '{module}', '{var}'];
			
break;
case 15:
				this.$ = [makeExpr($$[$0]), '{module}', '{index}'];
			
break;
case 16:
				this.$ = [$$[$0-1], '{.}', $$[$0]];
			
break;
case 17:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 18:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 19:
				this.$ = [$$[$0]];
			
break;
case 20:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 22:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 23:
				this.$ = [$$[$0], '{path_item}'];
			
break;
case 24:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', './'];
			
break;
case 25:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', '../'];
			
break;
case 26:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', ''];
			
break;
case 27:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 28:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 32:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 33:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 34:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 36:
				this.$ = [[], '{array}'];
			
break;
case 37:
				this.$ = [$$[$0-1], '{array}'];
			
break;
case 38:
				this.$ = [$$[$0-5], '{func}', $$[$0-1]];
			
break;
case 39: this.$ = [[], '{func}', $$[$0-1]]; 
break;
case 40:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 41:
				this.$ = [[], '{object}'];
			
break;
case 42:
				this.$ = [$$[$0-1], '{object}'];
			
break;
case 43:
				this.$ = [$$[$0], '{method}', 'field']
			
break;
case 45:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 46:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 47:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 48:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 50:
				this.$ = [$$[$0]];
			
break;
case 51:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 53:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 62:
				this.$ = [$$[$0]];
			
break;
case 64:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 65:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 66:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 67:
				this.$ = [makeExpr($$[$0-4]), 'and', makeExpr($$[$0])];
			
break;
case 68:
				this.$ = [makeExpr($$[$0-4]), 'or', makeExpr($$[$0])];
			
break;
case 69:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 70:
				$$[$0].unshift('>>=');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 71:
				$$[$0].unshift('>>>');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 72:
				$$[$0].unshift('<<<');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 73:
				$$[$0].unshift('>>');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 74:
				$$[$0].unshift('<<');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 75:
				this.$ = [$$[$0]];
			
break;
case 76:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 77:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 78:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 79:
				this.$ = [makeExpr($$[$0-3]), 'and', makeExpr($$[$0])];
			
break;
case 80:
				this.$ = [makeExpr($$[$0-3]), 'or', makeExpr($$[$0])];
			
break;
case 81:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 82:
				$$[$0].unshift('>>=');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 83:
				$$[$0].unshift('>>>');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 84:
				$$[$0].unshift('<<<');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 85:
				$$[$0].unshift('>>');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 86:
				$$[$0].unshift('<<');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 88:
				this.$ = [[makeExpr($$[$0])], '{seq}'];
			
break;
case 89:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 90:
				this.$ = [[$$[$0-3], '{atomic}', '{var}'], ':=', makeExpr($$[$0-1])];
			
break;
case 91:
				this.$ = [$$[$0-3], '=', makeExpr($$[$0-1])];
			
break;
case 94:
				this.$ = [[makeExpr($$[$0-4]), $$[$0-1]]];
			
break;
case 95:
				$$[$0-6].push([makeExpr($$[$0-4]), $$[$0-1]]);
				this.$ = $$[$0-6]
			
break;
case 96:
				this.$ = [$$[$0], 'if'];
			
break;
case 97:
				$$[$0-6].push([$$[$0-1], 'else']);
				this.$ = [$$[$0-6], 'if'];
			
break;
case 98:
				$$[$0-4].push($$[$0]);
				this.$ = [$$[$0-4], 'if'];
			
break;
case 100:
				this.$ = [[], '{empty}'];
			
break;
case 101:
				this.$ = [makeExpr($$[$0-5]), 'while', $$[$0-2]]
			
break;
case 108:
				this.$ = [[], '{seq}'];
			
break;
case 110:
					this.$ = [[$$[$0]], '{seq}'];
			
break;
case 111:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 112:
				this.$ = [[], '{start}'];
				//lixlib.compile(this.$);
				return this.$;
			
break;
case 113:
				this.$ = [$$[$0-1], '{start}'];
				//lixlib.compile(this.$);
				return this.$;
			
break;
}
},
table: [{1:[2,112],3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:10,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:3,75:2,76:1},{1:[3]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:10,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:43,77:[1,42]},{4:[2,110],5:[2,110],9:[2,110],10:[2,110],11:[2,110],12:[2,110],13:[2,110],18:[2,110],19:[2,110],22:[2,110],25:[2,110],26:[2,110],27:[2,110],28:[2,110],31:[2,110],33:[2,110],34:[2,110],35:[2,110],39:[2,110],41:[2,110],42:[2,110],43:[2,110],68:[2,110],73:[2,110],77:[2,110]},{4:[2,102],5:[2,102],9:[2,102],10:[2,102],11:[2,102],12:[2,102],13:[2,102],18:[2,102],19:[2,102],22:[2,102],25:[2,102],26:[2,102],27:[2,102],28:[2,102],31:[2,102],33:[2,102],34:[2,102],35:[2,102],39:[2,102],41:[2,102],42:[2,102],43:[2,102],68:[2,102],73:[2,102],77:[2,102]},{4:[2,103],5:[2,103],9:[2,103],10:[2,103],11:[2,103],12:[2,103],13:[2,103],18:[2,103],19:[2,103],22:[2,103],25:[2,103],26:[2,103],27:[2,103],28:[2,103],31:[2,103],33:[2,103],34:[2,103],35:[2,103],39:[2,103],41:[2,103],42:[2,103],43:[2,103],68:[2,103],73:[2,103],77:[2,103]},{4:[2,104],5:[2,104],9:[2,104],10:[2,104],11:[2,104],12:[2,104],13:[2,104],18:[2,104],19:[2,104],22:[2,104],25:[2,104],26:[2,104],27:[2,104],28:[2,104],31:[2,104],33:[2,104],34:[2,104],35:[2,104],39:[2,104],41:[2,104],42:[2,104],43:[2,104],68:[2,104],73:[2,104],77:[2,104]},{4:[2,105],5:[2,105],9:[2,105],10:[2,105],11:[2,105],12:[2,105],13:[2,105],18:[2,105],19:[2,105],22:[2,105],25:[2,105],26:[2,105],27:[2,105],28:[2,105],31:[2,105],33:[2,105],34:[2,105],35:[2,105],39:[2,105],41:[2,105],42:[2,105],43:[2,105],68:[2,105],73:[2,105],77:[2,105]},{4:[2,106],5:[2,106],9:[2,106],10:[2,106],11:[2,106],12:[2,106],13:[2,106],18:[2,106],19:[2,106],22:[2,106],25:[2,106],26:[2,106],27:[2,106],28:[2,106],31:[2,106],33:[2,106],34:[2,106],35:[2,106],39:[2,106],41:[2,106],42:[2,106],43:[2,106],68:[2,106],73:[2,106],77:[2,106]},{4:[2,107],5:[2,107],9:[2,107],10:[2,107],11:[2,107],12:[2,107],13:[2,107],18:[2,107],19:[2,107],22:[2,107],25:[2,107],26:[2,107],27:[2,107],28:[2,107],31:[2,107],33:[2,107],34:[2,107],35:[2,107],39:[2,107],41:[2,107],42:[2,107],43:[2,107],68:[2,107],73:[2,107],77:[2,107]},{7:[1,45],22:[1,44],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51]},{7:[2,44],8:53,9:[1,31],10:[1,32],22:[2,44],41:[2,44],47:[2,44],50:[2,44],52:[2,44],53:[2,44],54:[2,44],55:[2,44],56:[2,44],57:[2,44],64:[1,52]},{7:[2,13],9:[2,13],10:[2,13],22:[2,13],41:[2,13],47:[2,13],50:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],62:[1,54],64:[2,13]},{22:[1,55]},{7:[1,56]},{4:[2,100],5:[2,100],9:[2,100],10:[2,100],11:[2,100],12:[2,100],13:[2,100],18:[2,100],19:[2,100],22:[2,100],25:[2,100],26:[2,100],27:[2,100],28:[2,100],31:[2,100],33:[2,100],34:[2,100],35:[2,100],39:[2,100],41:[2,100],42:[2,100],43:[2,100],68:[2,100],73:[2,100],77:[2,100]},{7:[2,75],22:[2,75],41:[2,75],47:[1,58],50:[1,57],52:[2,75],53:[2,75],54:[2,75],55:[2,75],56:[2,75],57:[2,75]},{7:[2,14],9:[2,14],10:[2,14],15:[2,14],22:[2,14],36:[2,14],39:[2,14],41:[2,14],47:[2,14],48:[2,14],50:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],64:[2,14]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:59,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{7:[2,1],9:[2,1],10:[2,1],15:[2,1],22:[2,1],36:[2,1],39:[2,1],41:[2,1],47:[2,1],48:[2,1],50:[2,1],51:[2,1],52:[2,1],53:[2,1],54:[2,1],55:[2,1],56:[2,1],57:[2,1],62:[2,1],64:[2,1]},{7:[2,2],9:[2,2],10:[2,2],15:[2,2],22:[2,2],36:[2,2],39:[2,2],41:[2,2],47:[2,2],48:[2,2],50:[2,2],51:[2,2],52:[2,2],53:[2,2],54:[2,2],55:[2,2],56:[2,2],57:[2,2],62:[2,2],64:[2,2]},{4:[2,92],5:[2,92],7:[1,65],9:[2,92],10:[2,92],11:[2,92],12:[2,92],13:[2,92],18:[2,92],19:[2,92],25:[2,92],26:[2,92],27:[2,92],28:[2,92],31:[2,92],33:[2,92],34:[2,92],35:[2,92],39:[2,92],42:[2,92],43:[2,92],65:64,66:63},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:68,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],36:[1,66],37:67,39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:69,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{8:73,9:[1,31],10:[1,32],20:72,23:71,41:[1,70]},{7:[2,43],15:[2,43],22:[2,43],36:[2,43],39:[2,43],41:[2,43],47:[2,43],48:[2,43],50:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[2,43],55:[2,43],56:[2,43],57:[2,43]},{7:[2,45],15:[2,45],22:[2,45],36:[2,45],39:[2,45],41:[2,45],47:[2,45],48:[2,45],50:[2,45],51:[2,45],52:[2,45],53:[2,45],54:[2,45],55:[2,45],56:[2,45],57:[2,45]},{7:[2,46],15:[2,46],22:[2,46],36:[2,46],39:[2,46],41:[2,46],47:[2,46],48:[2,46],50:[2,46],51:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46]},{7:[2,47],15:[2,47],22:[2,47],36:[2,47],39:[2,47],41:[2,47],47:[2,47],48:[2,47],50:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47]},{7:[2,48],15:[2,48],22:[2,48],36:[2,48],39:[2,48],41:[2,48],47:[2,48],48:[2,48],50:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48]},{5:[1,75],7:[2,49],15:[2,49],22:[2,49],30:74,31:[1,76],36:[2,49],39:[2,49],41:[2,49],47:[2,49],48:[2,49],50:[2,49],51:[2,49],52:[2,49],53:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49]},{3:77,4:[1,19],5:[1,20],11:[1,78],12:[1,79],13:[1,80]},{7:[2,6],9:[2,6],10:[2,6],15:[2,6],22:[2,6],36:[2,6],39:[2,6],41:[2,6],47:[2,6],48:[2,6],50:[2,6],51:[2,6],52:[2,6],53:[2,6],54:[2,6],55:[2,6],56:[2,6],57:[2,6],64:[2,6]},{5:[2,31],7:[2,31],15:[2,31],22:[2,31],24:81,25:[1,38],26:[1,39],27:[1,40],28:[1,41],31:[2,31],36:[2,31],39:[2,31],41:[2,31],47:[2,31],48:[2,31],50:[2,31],51:[2,31],52:[2,31],53:[2,31],54:[2,31],55:[2,31],56:[2,31],57:[2,31]},{5:[2,32],7:[2,32],15:[2,32],22:[2,32],31:[2,32],36:[2,32],39:[2,32],41:[2,32],47:[2,32],48:[2,32],50:[2,32],51:[2,32],52:[2,32],53:[2,32],54:[2,32],55:[2,32],56:[2,32],57:[2,32]},{5:[2,33],7:[2,33],15:[2,33],22:[2,33],31:[2,33],36:[2,33],39:[2,33],41:[2,33],47:[2,33],48:[2,33],50:[2,33],51:[2,33],52:[2,33],53:[2,33],54:[2,33],55:[2,33],56:[2,33],57:[2,33]},{5:[2,34],7:[2,34],15:[2,34],22:[2,34],31:[2,34],36:[2,34],39:[2,34],41:[2,34],47:[2,34],48:[2,34],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34],55:[2,34],56:[2,34],57:[2,34]},{5:[2,27],7:[2,27],15:[2,27],22:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],31:[2,27],36:[2,27],39:[2,27],41:[2,27],47:[2,27],48:[2,27],50:[2,27],51:[2,27],52:[2,27],53:[2,27],54:[2,27],55:[2,27],56:[2,27],57:[2,27]},{5:[2,23],7:[2,23],15:[2,23],22:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],31:[2,23],36:[2,23],39:[2,23],41:[2,23],47:[2,23],48:[2,23],50:[2,23],51:[2,23],52:[2,23],53:[2,23],54:[2,23],55:[2,23],56:[2,23],57:[2,23]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:82,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:83,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:84,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{1:[2,113]},{4:[2,111],5:[2,111],9:[2,111],10:[2,111],11:[2,111],12:[2,111],13:[2,111],18:[2,111],19:[2,111],22:[2,111],25:[2,111],26:[2,111],27:[2,111],28:[2,111],31:[2,111],33:[2,111],34:[2,111],35:[2,111],39:[2,111],41:[2,111],42:[2,111],43:[2,111],68:[2,111],73:[2,111],77:[2,111]},{4:[2,89],5:[2,89],9:[2,89],10:[2,89],11:[2,89],12:[2,89],13:[2,89],18:[2,89],19:[2,89],22:[2,89],25:[2,89],26:[2,89],27:[2,89],28:[2,89],31:[2,89],33:[2,89],34:[2,89],35:[2,89],39:[2,89],41:[2,89],42:[2,89],43:[2,89],68:[2,89],73:[2,89],77:[2,89]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:85,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:16,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],47:[1,87],50:[1,86],58:88},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:16,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:89},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:16,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:90},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:16,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:91},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:16,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:92},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:16,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:93},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:16,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:94},{7:[2,16],9:[2,16],10:[2,16],15:[2,16],22:[2,16],36:[2,16],39:[2,16],41:[2,16],47:[2,16],48:[2,16],50:[2,16],51:[2,16],52:[2,16],53:[2,16],54:[2,16],55:[2,16],56:[2,16],57:[2,16],64:[2,16]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:16,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],58:95},{4:[2,99],5:[2,99],9:[2,99],10:[2,99],11:[2,99],12:[2,99],13:[2,99],18:[2,99],19:[2,99],22:[2,99],25:[2,99],26:[2,99],27:[2,99],28:[2,99],31:[2,99],33:[2,99],34:[2,99],35:[2,99],39:[2,99],41:[2,99],42:[2,99],43:[2,99],68:[2,99],73:[2,99],77:[2,99]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:96,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:97,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:98,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{7:[1,108],15:[1,99],22:[1,100],44:101,52:[1,102],53:[1,103],54:[1,104],55:[1,105],56:[1,106],57:[1,107]},{7:[2,62],15:[2,62],22:[2,62],46:110,47:[1,113],48:[1,114],49:109,50:[1,111],51:[1,112],52:[2,62],53:[2,62],54:[2,62],55:[2,62],56:[2,62],57:[2,62]},{7:[2,44],8:53,9:[1,31],10:[1,32],15:[2,44],22:[2,44],36:[2,44],39:[2,44],41:[2,44],47:[2,44],48:[2,44],50:[2,44],51:[2,44],52:[2,44],53:[2,44],54:[2,44],55:[2,44],56:[2,44],57:[2,44]},{7:[2,13],9:[2,13],10:[2,13],15:[2,13],22:[2,13],36:[2,13],39:[2,13],41:[2,13],47:[2,13],48:[2,13],50:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13]},{4:[2,92],5:[2,92],7:[1,65],9:[2,92],10:[2,92],11:[2,92],12:[2,92],13:[2,92],18:[2,92],19:[2,92],22:[2,96],25:[2,92],26:[2,92],27:[2,92],28:[2,92],31:[2,92],33:[2,92],34:[2,92],35:[2,92],39:[2,92],42:[2,92],43:[2,92],65:115,69:[2,92]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:116,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{4:[2,93],5:[2,93],9:[2,93],10:[2,93],11:[2,93],12:[2,93],13:[2,93],18:[2,93],19:[2,93],25:[2,93],26:[2,93],27:[2,93],28:[2,93],31:[2,93],33:[2,93],34:[2,93],35:[2,93],39:[2,93],42:[2,93],43:[2,93],68:[2,93],69:[2,93]},{7:[2,36],15:[2,36],22:[2,36],36:[2,36],38:[1,117],39:[2,36],41:[2,36],47:[2,36],48:[2,36],50:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36],55:[2,36],56:[2,36],57:[2,36]},{7:[1,119],22:[1,120],36:[1,118]},{7:[2,50],22:[2,50],36:[2,50]},{7:[1,108],15:[1,121],22:[1,100],44:101,52:[1,102],53:[1,103],54:[1,104],55:[1,105],56:[1,106],57:[1,107]},{7:[2,41],15:[2,41],22:[2,41],36:[2,41],39:[2,41],41:[2,41],47:[2,41],48:[2,41],50:[2,41],51:[2,41],52:[2,41],53:[2,41],54:[2,41],55:[2,41],56:[2,41],57:[2,41]},{7:[1,123],22:[1,124],41:[1,122]},{7:[2,19],22:[2,19],41:[2,19]},{7:[1,125],22:[1,126]},{5:[2,35],7:[2,35],15:[2,35],22:[2,35],31:[2,35],36:[2,35],39:[2,35],41:[2,35],47:[2,35],48:[2,35],50:[2,35],51:[2,35],52:[2,35],53:[2,35],54:[2,35],55:[2,35],56:[2,35],57:[2,35]},{5:[2,29],7:[2,29],15:[2,29],22:[2,29],31:[2,29],36:[2,29],39:[2,29],41:[2,29],47:[2,29],48:[2,29],50:[2,29],51:[2,29],52:[2,29],53:[2,29],54:[2,29],55:[2,29],56:[2,29],57:[2,29]},{5:[2,30],7:[2,30],15:[2,30],22:[2,30],31:[2,30],36:[2,30],39:[2,30],41:[2,30],47:[2,30],48:[2,30],50:[2,30],51:[2,30],52:[2,30],53:[2,30],54:[2,30],55:[2,30],56:[2,30],57:[2,30]},{7:[2,5],9:[2,5],10:[2,5],15:[2,5],22:[2,5],36:[2,5],39:[2,5],41:[2,5],47:[2,5],48:[2,5],50:[2,5],51:[2,5],52:[2,5],53:[2,5],54:[2,5],55:[2,5],56:[2,5],57:[2,5],64:[2,5]},{7:[2,7],9:[2,7],10:[2,7],15:[2,7],22:[2,7],36:[2,7],39:[2,7],41:[2,7],47:[2,7],48:[2,7],50:[2,7],51:[2,7],52:[2,7],53:[2,7],54:[2,7],55:[2,7],56:[2,7],57:[2,7],64:[2,7]},{7:[2,8],9:[2,8],10:[2,8],15:[2,8],22:[2,8],36:[2,8],39:[2,8],41:[2,8],47:[2,8],48:[2,8],50:[2,8],51:[2,8],52:[2,8],53:[2,8],54:[2,8],55:[2,8],56:[2,8],57:[2,8],64:[2,8]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:127,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{5:[2,28],7:[2,28],15:[2,28],22:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],31:[2,28],36:[2,28],39:[2,28],41:[2,28],47:[2,28],48:[2,28],50:[2,28],51:[2,28],52:[2,28],53:[2,28],54:[2,28],55:[2,28],56:[2,28],57:[2,28]},{7:[1,108],15:[1,128],22:[1,100],44:101,52:[1,102],53:[1,103],54:[1,104],55:[1,105],56:[1,106],57:[1,107]},{7:[1,108],15:[1,129],22:[1,100],44:101,52:[1,102],53:[1,103],54:[1,104],55:[1,105],56:[1,106],57:[1,107]},{7:[1,108],15:[1,130],22:[1,100],44:101,52:[1,102],53:[1,103],54:[1,104],55:[1,105],56:[1,106],57:[1,107]},{7:[2,76],22:[2,76],41:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76],57:[2,76]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:131,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:132,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{7:[1,45],22:[2,81],41:[2,81],52:[2,81],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51]},{7:[1,45],22:[2,82],41:[2,82],52:[2,82],53:[2,82],54:[1,48],55:[1,49],56:[1,50],57:[1,51]},{7:[1,45],22:[2,83],41:[2,83],52:[2,83],53:[2,83],54:[2,83],55:[1,49],56:[1,50],57:[1,51]},{7:[1,45],22:[2,84],41:[2,84],52:[2,84],53:[2,84],54:[2,84],55:[2,84],56:[1,50],57:[1,51]},{7:[1,45],22:[2,85],41:[2,85],52:[2,85],53:[2,85],54:[2,85],55:[2,85],56:[2,85],57:[1,51]},{7:[1,45],22:[2,86],41:[2,86],52:[2,86],53:[2,86],54:[2,86],55:[2,86],56:[2,86],57:[2,86]},{7:[1,45],22:[1,133],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51]},{7:[1,45],22:[1,134],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51]},{7:[1,135]},{7:[2,77],22:[2,77],41:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77],57:[2,77]},{7:[2,78],22:[2,78],41:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],56:[2,78],57:[2,78]},{7:[2,15],9:[2,15],10:[2,15],15:[2,15],22:[2,15],36:[2,15],39:[2,15],41:[2,15],47:[2,15],48:[2,15],50:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15],55:[2,15],56:[2,15],57:[2,15],64:[2,15]},{4:[2,55],5:[2,55],7:[2,63],9:[2,55],10:[2,55],11:[2,55],12:[2,55],13:[2,55],15:[2,63],18:[2,55],19:[2,55],22:[2,63],25:[2,55],26:[2,55],27:[2,55],28:[2,55],31:[2,55],33:[2,55],34:[2,55],35:[2,55],39:[2,55],42:[2,55],43:[2,55],52:[2,63],53:[2,63],54:[2,63],55:[2,63],56:[2,63],57:[2,63]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:136,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:139,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],46:138,47:[1,113],48:[1,114],49:137,50:[1,111],51:[1,112]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:140,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:141,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:142,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:143,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],14:144,17:61,18:[1,17],19:[1,18],21:60,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{4:[2,54],5:[2,54],9:[2,54],10:[2,54],11:[2,54],12:[2,54],13:[2,54],18:[2,54],19:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],31:[2,54],33:[2,54],34:[2,54],35:[2,54],39:[2,54],42:[2,54],43:[2,54]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:145,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:146,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{4:[2,60],5:[2,60],7:[2,60],9:[2,60],10:[2,60],11:[2,60],12:[2,60],13:[2,60],18:[2,60],19:[2,60],22:[2,60],25:[2,60],26:[2,60],27:[2,60],28:[2,60],31:[2,60],33:[2,60],34:[2,60],35:[2,60],39:[2,60],42:[2,60],43:[2,60]},{4:[2,61],5:[2,61],7:[2,61],9:[2,61],10:[2,61],11:[2,61],12:[2,61],13:[2,61],18:[2,61],19:[2,61],22:[2,61],25:[2,61],26:[2,61],27:[2,61],28:[2,61],31:[2,61],33:[2,61],34:[2,61],35:[2,61],39:[2,61],42:[2,61],43:[2,61]},{4:[2,58],5:[2,58],7:[2,58],9:[2,58],10:[2,58],11:[2,58],12:[2,58],13:[2,58],18:[2,58],19:[2,58],22:[2,58],25:[2,58],26:[2,58],27:[2,58],28:[2,58],31:[2,58],33:[2,58],34:[2,58],35:[2,58],39:[2,58],42:[2,58],43:[2,58]},{4:[2,59],5:[2,59],7:[2,59],9:[2,59],10:[2,59],11:[2,59],12:[2,59],13:[2,59],18:[2,59],19:[2,59],22:[2,59],25:[2,59],26:[2,59],27:[2,59],28:[2,59],31:[2,59],33:[2,59],34:[2,59],35:[2,59],39:[2,59],42:[2,59],43:[2,59]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:148,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28],69:[1,147]},{7:[1,65],39:[2,92],65:149},{39:[1,150]},{7:[2,37],15:[2,37],22:[2,37],36:[2,37],38:[1,151],39:[2,37],41:[2,37],47:[2,37],48:[2,37],50:[2,37],51:[2,37],52:[2,37],53:[2,37],54:[2,37],55:[2,37],56:[2,37],57:[2,37]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:152,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],7:[2,52],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:153,22:[2,52],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],36:[2,52],39:[1,24],42:[1,27],43:[1,28]},{7:[2,40],15:[2,40],22:[2,40],36:[2,40],39:[2,40],41:[2,40],47:[2,40],48:[2,40],50:[2,40],51:[2,40],52:[2,40],53:[2,40],54:[2,40],55:[2,40],56:[2,40],57:[2,40]},{7:[2,42],15:[2,42],22:[2,42],36:[2,42],39:[2,42],41:[2,42],47:[2,42],48:[2,42],50:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[2,42],55:[2,42],56:[2,42],57:[2,42]},{8:73,9:[1,31],10:[1,32],20:154},{7:[2,21],8:73,9:[1,31],10:[1,32],20:155,22:[2,21],41:[2,21]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:156,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:157,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{7:[1,108],15:[1,158],22:[1,100],44:101,52:[1,102],53:[1,103],54:[1,104],55:[1,105],56:[1,106],57:[1,107]},{5:[2,24],7:[2,24],15:[2,24],22:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],31:[2,24],36:[2,24],39:[2,24],41:[2,24],47:[2,24],48:[2,24],50:[2,24],51:[2,24],52:[2,24],53:[2,24],54:[2,24],55:[2,24],56:[2,24],57:[2,24]},{5:[2,25],7:[2,25],15:[2,25],22:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],31:[2,25],36:[2,25],39:[2,25],41:[2,25],47:[2,25],48:[2,25],50:[2,25],51:[2,25],52:[2,25],53:[2,25],54:[2,25],55:[2,25],56:[2,25],57:[2,25]},{5:[2,26],7:[2,26],15:[2,26],22:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],31:[2,26],36:[2,26],39:[2,26],41:[2,26],47:[2,26],48:[2,26],50:[2,26],51:[2,26],52:[2,26],53:[2,26],54:[2,26],55:[2,26],56:[2,26],57:[2,26]},{7:[2,79],22:[2,79],41:[2,79],52:[2,79],53:[2,79],54:[2,79],55:[2,79],56:[2,79],57:[2,79]},{7:[2,80],22:[2,80],41:[2,80],52:[2,80],53:[2,80],54:[2,80],55:[2,80],56:[2,80],57:[2,80]},{4:[2,91],5:[2,91],9:[2,91],10:[2,91],11:[2,91],12:[2,91],13:[2,91],18:[2,91],19:[2,91],22:[2,91],25:[2,91],26:[2,91],27:[2,91],28:[2,91],31:[2,91],33:[2,91],34:[2,91],35:[2,91],39:[2,91],41:[2,91],42:[2,91],43:[2,91],68:[2,91],73:[2,91],77:[2,91]},{4:[2,90],5:[2,90],9:[2,90],10:[2,90],11:[2,90],12:[2,90],13:[2,90],18:[2,90],19:[2,90],22:[2,90],25:[2,90],26:[2,90],27:[2,90],28:[2,90],31:[2,90],33:[2,90],34:[2,90],35:[2,90],39:[2,90],41:[2,90],42:[2,90],43:[2,90],68:[2,90],73:[2,90],77:[2,90]},{39:[1,159]},{7:[2,64],15:[2,64],22:[2,64],52:[2,64],53:[2,64],54:[2,64],55:[2,64],56:[2,64],57:[2,64]},{4:[2,56],5:[2,56],7:[1,108],9:[2,56],10:[2,56],11:[2,56],12:[2,56],13:[2,56],18:[2,56],19:[2,56],22:[1,162],25:[2,56],26:[2,56],27:[2,56],28:[2,56],31:[2,56],33:[2,56],34:[2,56],35:[2,56],39:[2,56],42:[2,56],43:[2,56],44:161,45:160},{4:[2,56],5:[2,56],7:[1,108],9:[2,56],10:[2,56],11:[2,56],12:[2,56],13:[2,56],18:[2,56],19:[2,56],22:[1,162],25:[2,56],26:[2,56],27:[2,56],28:[2,56],31:[2,56],33:[2,56],34:[2,56],35:[2,56],39:[2,56],42:[2,56],43:[2,56],44:161,45:163},{7:[1,108],15:[2,69],22:[2,69],44:101,52:[2,69],53:[1,103],54:[1,104],55:[1,105],56:[1,106],57:[1,107]},{7:[1,108],15:[2,70],22:[2,70],44:101,52:[2,70],53:[2,70],54:[1,104],55:[1,105],56:[1,106],57:[1,107]},{7:[1,108],15:[2,71],22:[2,71],44:101,52:[2,71],53:[2,71],54:[2,71],55:[1,105],56:[1,106],57:[1,107]},{7:[1,108],15:[2,72],22:[2,72],44:101,52:[2,72],53:[2,72],54:[2,72],55:[2,72],56:[1,106],57:[1,107]},{7:[1,108],15:[2,73],22:[2,73],44:101,52:[2,73],53:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[1,107]},{7:[1,108],15:[2,74],22:[2,74],44:101,52:[2,74],53:[2,74],54:[2,74],55:[2,74],56:[2,74],57:[2,74]},{7:[2,65],15:[2,65],22:[2,65],52:[2,65],53:[2,65],54:[2,65],55:[2,65],56:[2,65],57:[2,65]},{7:[2,66],15:[2,66],22:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[2,66],56:[2,66],57:[2,66]},{7:[1,65],39:[2,92],65:164,68:[2,92]},{7:[1,65],39:[2,92],65:165},{39:[1,166]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],40:167,41:[2,108],42:[1,27],43:[1,28],58:169,59:168,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:3,75:170},{39:[1,171]},{7:[2,51],22:[2,51],36:[2,51]},{7:[2,53],22:[2,53],36:[2,53]},{7:[2,20],22:[2,20],41:[2,20]},{7:[2,22],22:[2,22],41:[2,22]},{7:[2,17],22:[2,17],41:[2,17]},{7:[2,18],22:[2,18],41:[2,18]},{7:[2,9],9:[2,9],10:[2,9],15:[2,9],22:[2,9],36:[2,9],39:[2,9],41:[2,9],47:[2,9],48:[2,9],50:[2,9],51:[2,9],52:[2,9],53:[2,9],54:[2,9],55:[2,9],56:[2,9],57:[2,9],64:[2,9]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],41:[2,108],42:[1,27],43:[1,28],58:10,59:172,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:3,75:170},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:173,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{4:[2,57],5:[2,57],9:[2,57],10:[2,57],11:[2,57],12:[2,57],13:[2,57],18:[2,57],19:[2,57],25:[2,57],26:[2,57],27:[2,57],28:[2,57],31:[2,57],33:[2,57],34:[2,57],35:[2,57],39:[2,57],42:[2,57],43:[2,57]},{4:[2,55],5:[2,55],9:[2,55],10:[2,55],11:[2,55],12:[2,55],13:[2,55],18:[2,55],19:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],31:[2,55],33:[2,55],34:[2,55],35:[2,55],39:[2,55],42:[2,55],43:[2,55]},{3:62,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:61,18:[1,17],19:[1,18],21:174,24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],42:[1,27],43:[1,28]},{39:[1,175],67:176,68:[1,21]},{39:[1,177]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],41:[2,108],42:[1,27],43:[1,28],58:10,59:178,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:3,75:170},{41:[1,179]},{41:[2,87]},{7:[1,45],22:[1,44],41:[2,88],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50],57:[1,51]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],41:[2,109],42:[1,27],43:[1,28],58:10,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:43},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],40:180,41:[2,108],42:[1,27],43:[1,28],58:169,59:168,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:3,75:170},{41:[1,181]},{7:[2,67],15:[2,67],22:[2,67],52:[2,67],53:[2,67],54:[2,67],55:[2,67],56:[2,67],57:[2,67]},{7:[2,68],15:[2,68],22:[2,68],52:[2,68],53:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],41:[2,108],42:[1,27],43:[1,28],58:10,59:182,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:3,75:170},{22:[2,98]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,32],11:[1,26],12:[1,29],13:[1,23],17:11,18:[1,17],19:[1,18],21:16,22:[1,15],24:37,25:[1,38],26:[1,39],27:[1,40],28:[1,41],29:33,31:[1,34],32:30,33:[1,35],34:[1,36],35:[1,22],39:[1,24],41:[2,108],42:[1,27],43:[1,28],58:10,59:183,60:4,61:6,63:5,67:13,68:[1,21],70:7,71:9,72:8,73:[1,14],74:3,75:170},{41:[1,184]},{7:[2,39],15:[2,39],22:[2,39],36:[2,39],39:[2,39],41:[2,39],47:[2,39],48:[2,39],50:[2,39],51:[2,39],52:[2,39],53:[2,39],54:[2,39],55:[2,39],56:[2,39],57:[2,39]},{41:[1,185]},{22:[1,186]},{41:[1,187]},{41:[1,188]},{4:[2,94],5:[2,94],7:[2,94],9:[2,94],10:[2,94],11:[2,94],12:[2,94],13:[2,94],18:[2,94],19:[2,94],22:[2,94],25:[2,94],26:[2,94],27:[2,94],28:[2,94],31:[2,94],33:[2,94],34:[2,94],35:[2,94],39:[2,94],42:[2,94],43:[2,94],69:[2,94]},{7:[2,38],15:[2,38],22:[2,38],36:[2,38],39:[2,38],41:[2,38],47:[2,38],48:[2,38],50:[2,38],51:[2,38],52:[2,38],53:[2,38],54:[2,38],55:[2,38],56:[2,38],57:[2,38]},{4:[2,101],5:[2,101],9:[2,101],10:[2,101],11:[2,101],12:[2,101],13:[2,101],18:[2,101],19:[2,101],22:[2,101],25:[2,101],26:[2,101],27:[2,101],28:[2,101],31:[2,101],33:[2,101],34:[2,101],35:[2,101],39:[2,101],41:[2,101],42:[2,101],43:[2,101],68:[2,101],73:[2,101],77:[2,101]},{22:[2,97]},{4:[2,95],5:[2,95],7:[2,95],9:[2,95],10:[2,95],11:[2,95],12:[2,95],13:[2,95],18:[2,95],19:[2,95],22:[2,95],25:[2,95],26:[2,95],27:[2,95],28:[2,95],31:[2,95],33:[2,95],34:[2,95],35:[2,95],39:[2,95],42:[2,95],43:[2,95],69:[2,95]}],
defaultActions: {42:[2,113],168:[2,87],176:[2,98],187:[2,97]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function makeExpr(expr) {
		if (expr.length === 1) {
			expr.push("{mono}");
		}
		return expr;
	}

	function makePartialExpr(expr) {
		console.error('enter');
		console.error(expr);
		if (expr.length === 1) {
			expr.push("{mono}");
			return expr;
		}
		var expr0 = expr[0];
		expr[0] = ["__", "{atomic}", "{var}"];
		expr = expr.unshift(expr0);
		console.error(expr);
		return expr;
	}

//	lixlib = require("./lixlib.js");
//	lixlib = require("./lib.lix.js");
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 77; 
break;
case 1: return 28; 
break;
case 2: return 26; 
break;
case 3: return 27; 
break;
case 4:	return 25; 
break;
case 5:	return 25; 
break;
case 6:	return 25; 
break;
case 7:	return 25; 
break;
case 8:	return 25; 
break;
case 9:	return 33; 
break;
case 10:	return 34; 
break;
case 11:	return 31; 
break;
case 12: return 10; 
break;
case 13: return 12; 
break;
case 14: return 9; 
break;
case 15: return 38; 
break;
case 16: return 51; 
break;
case 17: return 48; 
break;
case 18: return 22; 
break;
case 19: return 52; 
break;
case 20: return 13; 
break;
case 21: return 15; 
break;
case 22: return 39; 
break;
case 23: return 41; 
break;
case 24: return 35; 
break;
case 25: return 36; 
break;
case 26: return 68; 
break;
case 27: return 69; 
break;
case 28: return 73; 
break;
case 29: return 43; 
break;
case 30: return 42; 
break;
case 31: return 50; 
break;
case 32: return 47; 
break;
case 33: return 50; 
break;
case 34: return 47; 
break;
case 35: return 11; 
break;
case 36: return 4; 
break;
case 37: return 19; 
break;
case 38: return 18; 
break;
case 39: return 53; 
break;
case 40: return ">>>"; 
break;
case 41: return "<<<"; 
break;
case 42: return ">>"; 
break;
case 43: return "<<"; 
break;
case 44: return 4; 
break;
case 45: return 4; 
break;
case 46: return 4; 
break;
case 47: return 5; 
break;
case 48: return 4; 
break;
case 49: return 4; 
break;
case 50: return 4; 
break;
case 51: return 4; 
break;
case 52: return 4; 
break;
case 53: return 4; 
break;
case 54: return 4; 
break;
case 55: return 62; 
break;
case 56: return 64; 
break;
case 57: return 7; 
break;
}
},
rules: [/^(?:$)/,/^(?:\/+\(\s*((#.*)?\n+)*\s*)/,/^(?:\.\/+\(\s*((#.*)?\n+)*\s*)/,/^(?:\.\.\/+\(\s*((#.*)?\n+)*\s*)/,/^(?:\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\/+\.\.)/,/^(?:\/+\.)/,/^(?:\.\.\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\.\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\.\.\/+)/,/^(?:\.\/+)/,/^(?:\/\/+)/,/^(?:\.[0-9]+)/,/^(?:'(\\.|[^\\'])*'|"(\\.|[^\\"])*")/,/^(?:\.)/,/^(?:\s*((#.*)?\n+)*\s*->\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*and\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*or\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*)/,/^(?:\s*\|\s*)/,/^(?:\(\s*)/,/^(?:\s*\))/,/^(?:\{\s*((#.*)?\n+)*\s*)/,/^(?:\s*\})/,/^(?:\[\s*((#.*)?\n+)*\s*)/,/^(?:\s*\])/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:and\s*)/,/^(?:or\s*)/,/^(?:\s+and\s+)/,/^(?:\s+or\s+)/,/^(?:[+-]?[0-9]+(\.[0-9]*)?([Ee][+-]?[0-9]+)?)/,/^(?:[\u4e00-\u9fa5_a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9]*)/,/^(?:\$\(\s*((#.*)?\n+)*\s*)/,/^(?:\$[\u4e00-\u9fa5_a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9]*)/,/^(?:\s*>>=\s+)/,/^(?:\s*>>>\s+)/,/^(?:\s*<<<\s+)/,/^(?:\s*>>\s+)/,/^(?:\s*<<\s+)/,/^(?:\+)/,/^(?:\*)/,/^(?:-)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:\s?:=\s?)/,/^(?:\s?=\s?)/,/^(?:\s+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammer;
exports.Parser = grammer.Parser;
exports.parse = function () { return grammer.parse.apply(grammer, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}