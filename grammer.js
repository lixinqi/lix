/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammer = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"VAR":3,"var":4,"DIV":5,"FUNC_ARGS":6,"SEP":7,"PropertyField":8,".":9,"NAT":10,"STRING_LITERAL":11,"OPENPARAN":12,"MultiLineExpr":13,"CLOSEPARAN":14,"Field":15,"Object":16,"DOLLAR_STR":17,"DOLLAR_PARAN":18,"Property":19,"PrimaryExpr":20,"NEWLINE":21,"PropertyList":22,"DirItem":23,"DIRITEM":24,"CURRENT_DIRITEM_PARAN":25,"PARENT_DIRITEM_PARAN":26,"DIRITEM_PARAN":27,"PATH":28,"Slashes":29,"ROOT":30,"Path":31,"PARENT_PATH":32,"CURRENT_PATH":33,"[":34,"]":35,"ArrayLiteral":36,"FUNC_ARROW":37,"{":38,"FUNC_BODY":39,"}":40,"FALSE":41,"TRUE":42,"MultiLineSEP":43,"OptMultiLineSEP":44,"MultiLineOR":45,"OR":46,"NLOR":47,"MultiLineAND":48,"AND":49,"NLAND":50,"VBAR":51,">>=":52,">>>":53,"<<<":54,">>":55,"<<":56,"Expr":57,"NullableSourceElements":58,"ExprStatement":59,"DefStatement":60,"DEF":61,"AssignStatement":62,"ASSIGN_OPERATOR":63,"OptSEP":64,"IfCaseStatement":65,"IfStatementNoNL":66,"IF":67,"ELSE":68,"IfStatement":69,"EmptyStatement":70,"WhileStatement":71,"WHILE":72,"Statement":73,"SourceElements":74,"Program":75,"EOF":76,"$accept":0,"$end":1},
terminals_: {2:"error",4:"var",5:"DIV",7:"SEP",9:".",10:"NAT",11:"STRING_LITERAL",12:"OPENPARAN",14:"CLOSEPARAN",17:"DOLLAR_STR",18:"DOLLAR_PARAN",21:"NEWLINE",24:"DIRITEM",25:"CURRENT_DIRITEM_PARAN",26:"PARENT_DIRITEM_PARAN",27:"DIRITEM_PARAN",30:"ROOT",32:"PARENT_PATH",33:"CURRENT_PATH",34:"[",35:"]",37:"FUNC_ARROW",38:"{",40:"}",41:"FALSE",42:"TRUE",46:"OR",47:"NLOR",49:"AND",50:"NLAND",51:"VBAR",52:">>=",53:">>>",54:"<<<",55:">>",56:"<<",61:"DEF",63:"ASSIGN_OPERATOR",67:"IF",68:"ELSE",72:"WHILE",76:"EOF"},
productions_: [0,[3,1],[3,1],[6,1],[6,3],[8,2],[8,2],[8,2],[8,4],[15,1],[15,3],[15,1],[16,1],[16,1],[16,3],[16,3],[19,3],[19,3],[22,1],[22,3],[22,2],[22,3],[23,1],[23,3],[23,3],[23,3],[28,1],[28,2],[29,1],[29,1],[31,1],[31,1],[31,1],[31,1],[31,2],[20,2],[20,3],[20,7],[20,6],[20,3],[20,2],[20,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[36,1],[36,3],[36,2],[36,3],[43,1],[43,1],[44,0],[44,1],[45,1],[45,1],[48,1],[48,1],[13,1],[13,2],[13,3],[13,3],[13,3],[13,5],[13,5],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[57,1],[57,3],[57,3],[57,3],[57,4],[57,4],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[39,1],[39,1],[59,2],[60,4],[62,4],[64,0],[64,1],[65,6],[65,7],[66,2],[66,8],[66,6],[69,2],[70,1],[71,8],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[58,0],[58,1],[74,1],[74,2],[75,0],[75,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
				this.$ = [[$$[$0], '{atomic}', '{var}']];
			
break;
case 4:
				$$[$0-2].push([$$[$0], '{atomic}', '{var}']);
				this.$ = $$[$0-2];
			
break;
case 5:
				this.$ = [$$[$0], "{atomic}"];
			
break;
case 6:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 7:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 8:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 9:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 10:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 11:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 12:
				this.$ = [$$[$0], '{atomic}', '{var}'];
			
break;
case 13:
				this.$ = [($$[$0]).substr(1), '{module}', '{var}'];
			
break;
case 14:
				this.$ = [makeExpr($$[$0]), '{module}', '{index}'];
			
break;
case 15:
				this.$ = [$$[$0-2], '{.}', $$[$0]];
			
break;
case 16:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 17:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 18:
				this.$ = [$$[$0]];
			
break;
case 19:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 21:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 22:
				this.$ = [$$[$0], '{path_item}'];
			
break;
case 23:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', './'];
			
break;
case 24:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', '../'];
			
break;
case 25:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', ''];
			
break;
case 26:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 27:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 31:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 32:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 33:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 35:
				this.$ = [[], '{array}'];
			
break;
case 36:
				this.$ = [$$[$0-1], '{array}'];
			
break;
case 37:
				this.$ = [$$[$0-5], '{func}', $$[$0-1]];
			
break;
case 38: this.$ = [[], '{func}', $$[$0-1]]; 
break;
case 39:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 40:
				this.$ = [[], '{object}'];
			
break;
case 41:
				this.$ = [$$[$0-1], '{object}'];
			
break;
case 42:
				this.$ = [$$[$0], '{method}', 'field']
			
break;
case 44:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 45:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 46:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 47:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 49:
				this.$ = [$$[$0]];
			
break;
case 50:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 52:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 61:
				this.$ = [$$[$0]];
			
break;
case 63:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 64:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 65:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 66:
				this.$ = [makeExpr($$[$0-4]), 'and', makeExpr($$[$0])];
			
break;
case 67:
				this.$ = [makeExpr($$[$0-4]), 'or', makeExpr($$[$0])];
			
break;
case 68:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 69:
				$$[$0].unshift('>>=');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 70:
				$$[$0].unshift('>>>');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 71:
				$$[$0].unshift('<<<');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 72:
				$$[$0].unshift('>>');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 73:
				$$[$0].unshift('<<');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 74:
				this.$ = [$$[$0]];
			
break;
case 75:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 76:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 77:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 78:
				this.$ = [makeExpr($$[$0-3]), 'and', makeExpr($$[$0])];
			
break;
case 79:
				this.$ = [makeExpr($$[$0-3]), 'or', makeExpr($$[$0])];
			
break;
case 80:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 81:
				$$[$0].unshift('>>=');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 82:
				$$[$0].unshift('>>>');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 83:
				$$[$0].unshift('<<<');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 84:
				$$[$0].unshift('>>');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 85:
				$$[$0].unshift('<<');
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 87:
				this.$ = [[makeExpr($$[$0])], '{seq}'];
			
break;
case 88:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 89:
				this.$ = [[$$[$0-3], '{atomic}', '{var}'], ':=', makeExpr($$[$0-1])];
			
break;
case 90:
				this.$ = [$$[$0-3], '=', makeExpr($$[$0-1])];
			
break;
case 93:
				this.$ = [[makeExpr($$[$0-4]), $$[$0-1]]];
			
break;
case 94:
				$$[$0-6].push([makeExpr($$[$0-4]), $$[$0-1]]);
				this.$ = $$[$0-6]
			
break;
case 95:
				this.$ = [$$[$0], 'if'];
			
break;
case 96:
				$$[$0-6].push([$$[$0-1], 'else']);
				this.$ = [$$[$0-6], 'if'];
			
break;
case 97:
				$$[$0-4].push($$[$0]);
				this.$ = [$$[$0-4], 'if'];
			
break;
case 99:
				this.$ = [[], '{empty}'];
			
break;
case 100:
				this.$ = [makeExpr($$[$0-5]), 'while', $$[$0-2]]
			
break;
case 107:
				this.$ = [[], '{seq}'];
			
break;
case 109:
					this.$ = [[$$[$0]], '{seq}'];
			
break;
case 110:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 111:
				this.$ = [[], '{start}'];
				//lixlib.compile(this.$);
				return this.$;
			
break;
case 112:
				this.$ = [$$[$0-1], '{start}'];
				//lixlib.compile(this.$);
				return this.$;
			
break;
}
},
table: [{1:[2,111],3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:10,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:3,74:2,75:1},{1:[3]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:10,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:42,76:[1,41]},{4:[2,109],5:[2,109],9:[2,109],10:[2,109],11:[2,109],12:[2,109],17:[2,109],18:[2,109],21:[2,109],24:[2,109],25:[2,109],26:[2,109],27:[2,109],30:[2,109],32:[2,109],33:[2,109],34:[2,109],38:[2,109],40:[2,109],41:[2,109],42:[2,109],67:[2,109],72:[2,109],76:[2,109]},{4:[2,101],5:[2,101],9:[2,101],10:[2,101],11:[2,101],12:[2,101],17:[2,101],18:[2,101],21:[2,101],24:[2,101],25:[2,101],26:[2,101],27:[2,101],30:[2,101],32:[2,101],33:[2,101],34:[2,101],38:[2,101],40:[2,101],41:[2,101],42:[2,101],67:[2,101],72:[2,101],76:[2,101]},{4:[2,102],5:[2,102],9:[2,102],10:[2,102],11:[2,102],12:[2,102],17:[2,102],18:[2,102],21:[2,102],24:[2,102],25:[2,102],26:[2,102],27:[2,102],30:[2,102],32:[2,102],33:[2,102],34:[2,102],38:[2,102],40:[2,102],41:[2,102],42:[2,102],67:[2,102],72:[2,102],76:[2,102]},{4:[2,103],5:[2,103],9:[2,103],10:[2,103],11:[2,103],12:[2,103],17:[2,103],18:[2,103],21:[2,103],24:[2,103],25:[2,103],26:[2,103],27:[2,103],30:[2,103],32:[2,103],33:[2,103],34:[2,103],38:[2,103],40:[2,103],41:[2,103],42:[2,103],67:[2,103],72:[2,103],76:[2,103]},{4:[2,104],5:[2,104],9:[2,104],10:[2,104],11:[2,104],12:[2,104],17:[2,104],18:[2,104],21:[2,104],24:[2,104],25:[2,104],26:[2,104],27:[2,104],30:[2,104],32:[2,104],33:[2,104],34:[2,104],38:[2,104],40:[2,104],41:[2,104],42:[2,104],67:[2,104],72:[2,104],76:[2,104]},{4:[2,105],5:[2,105],9:[2,105],10:[2,105],11:[2,105],12:[2,105],17:[2,105],18:[2,105],21:[2,105],24:[2,105],25:[2,105],26:[2,105],27:[2,105],30:[2,105],32:[2,105],33:[2,105],34:[2,105],38:[2,105],40:[2,105],41:[2,105],42:[2,105],67:[2,105],72:[2,105],76:[2,105]},{4:[2,106],5:[2,106],9:[2,106],10:[2,106],11:[2,106],12:[2,106],17:[2,106],18:[2,106],21:[2,106],24:[2,106],25:[2,106],26:[2,106],27:[2,106],30:[2,106],32:[2,106],33:[2,106],34:[2,106],38:[2,106],40:[2,106],41:[2,106],42:[2,106],67:[2,106],72:[2,106],76:[2,106]},{7:[1,44],21:[1,43],51:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50]},{7:[2,43],9:[1,52],21:[2,43],40:[2,43],46:[2,43],49:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[2,43],55:[2,43],56:[2,43],63:[1,51]},{7:[2,12],9:[2,12],21:[2,12],40:[2,12],46:[2,12],49:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],61:[1,53],63:[2,12]},{21:[1,54]},{7:[1,55]},{4:[2,99],5:[2,99],9:[2,99],10:[2,99],11:[2,99],12:[2,99],17:[2,99],18:[2,99],21:[2,99],24:[2,99],25:[2,99],26:[2,99],27:[2,99],30:[2,99],32:[2,99],33:[2,99],34:[2,99],38:[2,99],40:[2,99],41:[2,99],42:[2,99],67:[2,99],72:[2,99],76:[2,99]},{7:[2,74],21:[2,74],40:[2,74],46:[1,57],49:[1,56],51:[2,74],52:[2,74],53:[2,74],54:[2,74],55:[2,74],56:[2,74]},{7:[2,13],9:[2,13],14:[2,13],21:[2,13],35:[2,13],38:[2,13],40:[2,13],46:[2,13],47:[2,13],49:[2,13],50:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],63:[2,13]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:58,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{7:[2,1],9:[2,1],14:[2,1],21:[2,1],35:[2,1],38:[2,1],40:[2,1],46:[2,1],47:[2,1],49:[2,1],50:[2,1],51:[2,1],52:[2,1],53:[2,1],54:[2,1],55:[2,1],56:[2,1],61:[2,1],63:[2,1]},{7:[2,2],9:[2,2],14:[2,2],21:[2,2],35:[2,2],38:[2,2],40:[2,2],46:[2,2],47:[2,2],49:[2,2],50:[2,2],51:[2,2],52:[2,2],53:[2,2],54:[2,2],55:[2,2],56:[2,2],61:[2,2],63:[2,2]},{4:[2,91],5:[2,91],7:[1,64],9:[2,91],10:[2,91],11:[2,91],12:[2,91],17:[2,91],18:[2,91],24:[2,91],25:[2,91],26:[2,91],27:[2,91],30:[2,91],32:[2,91],33:[2,91],34:[2,91],38:[2,91],41:[2,91],42:[2,91],64:63,65:62},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:67,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],35:[1,65],36:66,38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:68,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{8:72,9:[1,31],19:71,22:70,40:[1,69]},{7:[2,42],14:[2,42],21:[2,42],35:[2,42],38:[2,42],40:[2,42],46:[2,42],47:[2,42],49:[2,42],50:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[2,42],55:[2,42],56:[2,42]},{7:[2,44],14:[2,44],21:[2,44],35:[2,44],38:[2,44],40:[2,44],46:[2,44],47:[2,44],49:[2,44],50:[2,44],51:[2,44],52:[2,44],53:[2,44],54:[2,44],55:[2,44],56:[2,44]},{7:[2,45],14:[2,45],21:[2,45],35:[2,45],38:[2,45],40:[2,45],46:[2,45],47:[2,45],49:[2,45],50:[2,45],51:[2,45],52:[2,45],53:[2,45],54:[2,45],55:[2,45],56:[2,45]},{7:[2,46],14:[2,46],21:[2,46],35:[2,46],38:[2,46],40:[2,46],46:[2,46],47:[2,46],49:[2,46],50:[2,46],51:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],56:[2,46]},{7:[2,47],14:[2,47],21:[2,47],35:[2,47],38:[2,47],40:[2,47],46:[2,47],47:[2,47],49:[2,47],50:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47]},{5:[1,74],7:[2,48],14:[2,48],21:[2,48],29:73,30:[1,75],35:[2,48],38:[2,48],40:[2,48],46:[2,48],47:[2,48],49:[2,48],50:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48]},{3:76,4:[1,19],5:[1,20],10:[1,77],11:[1,78],12:[1,79]},{5:[2,30],7:[2,30],14:[2,30],21:[2,30],23:80,24:[1,37],25:[1,38],26:[1,39],27:[1,40],30:[2,30],35:[2,30],38:[2,30],40:[2,30],46:[2,30],47:[2,30],49:[2,30],50:[2,30],51:[2,30],52:[2,30],53:[2,30],54:[2,30],55:[2,30],56:[2,30]},{5:[2,31],7:[2,31],14:[2,31],21:[2,31],30:[2,31],35:[2,31],38:[2,31],40:[2,31],46:[2,31],47:[2,31],49:[2,31],50:[2,31],51:[2,31],52:[2,31],53:[2,31],54:[2,31],55:[2,31],56:[2,31]},{5:[2,32],7:[2,32],14:[2,32],21:[2,32],30:[2,32],35:[2,32],38:[2,32],40:[2,32],46:[2,32],47:[2,32],49:[2,32],50:[2,32],51:[2,32],52:[2,32],53:[2,32],54:[2,32],55:[2,32],56:[2,32]},{5:[2,33],7:[2,33],14:[2,33],21:[2,33],30:[2,33],35:[2,33],38:[2,33],40:[2,33],46:[2,33],47:[2,33],49:[2,33],50:[2,33],51:[2,33],52:[2,33],53:[2,33],54:[2,33],55:[2,33],56:[2,33]},{5:[2,26],7:[2,26],14:[2,26],21:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],30:[2,26],35:[2,26],38:[2,26],40:[2,26],46:[2,26],47:[2,26],49:[2,26],50:[2,26],51:[2,26],52:[2,26],53:[2,26],54:[2,26],55:[2,26],56:[2,26]},{5:[2,22],7:[2,22],14:[2,22],21:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],30:[2,22],35:[2,22],38:[2,22],40:[2,22],46:[2,22],47:[2,22],49:[2,22],50:[2,22],51:[2,22],52:[2,22],53:[2,22],54:[2,22],55:[2,22],56:[2,22]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:81,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:82,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:83,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{1:[2,112]},{4:[2,110],5:[2,110],9:[2,110],10:[2,110],11:[2,110],12:[2,110],17:[2,110],18:[2,110],21:[2,110],24:[2,110],25:[2,110],26:[2,110],27:[2,110],30:[2,110],32:[2,110],33:[2,110],34:[2,110],38:[2,110],40:[2,110],41:[2,110],42:[2,110],67:[2,110],72:[2,110],76:[2,110]},{4:[2,88],5:[2,88],9:[2,88],10:[2,88],11:[2,88],12:[2,88],17:[2,88],18:[2,88],21:[2,88],24:[2,88],25:[2,88],26:[2,88],27:[2,88],30:[2,88],32:[2,88],33:[2,88],34:[2,88],38:[2,88],40:[2,88],41:[2,88],42:[2,88],67:[2,88],72:[2,88],76:[2,88]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:84,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:16,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],46:[1,86],49:[1,85],57:87},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:16,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:88},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:16,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:89},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:16,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:90},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:16,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:91},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:16,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:92},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:16,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:93},{3:95,4:[1,19],5:[1,20],10:[1,97],12:[1,96],15:94},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:16,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],57:98},{4:[2,98],5:[2,98],9:[2,98],10:[2,98],11:[2,98],12:[2,98],17:[2,98],18:[2,98],21:[2,98],24:[2,98],25:[2,98],26:[2,98],27:[2,98],30:[2,98],32:[2,98],33:[2,98],34:[2,98],38:[2,98],40:[2,98],41:[2,98],42:[2,98],67:[2,98],72:[2,98],76:[2,98]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:99,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:100,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:101,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{7:[1,111],14:[1,102],21:[1,103],43:104,51:[1,105],52:[1,106],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{7:[2,61],14:[2,61],21:[2,61],45:113,46:[1,116],47:[1,117],48:112,49:[1,114],50:[1,115],51:[2,61],52:[2,61],53:[2,61],54:[2,61],55:[2,61],56:[2,61]},{7:[2,43],9:[1,52],14:[2,43],21:[2,43],35:[2,43],38:[2,43],40:[2,43],46:[2,43],47:[2,43],49:[2,43],50:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[2,43],55:[2,43],56:[2,43]},{7:[2,12],9:[2,12],14:[2,12],21:[2,12],35:[2,12],38:[2,12],40:[2,12],46:[2,12],47:[2,12],49:[2,12],50:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12]},{4:[2,91],5:[2,91],7:[1,64],9:[2,91],10:[2,91],11:[2,91],12:[2,91],17:[2,91],18:[2,91],21:[2,95],24:[2,91],25:[2,91],26:[2,91],27:[2,91],30:[2,91],32:[2,91],33:[2,91],34:[2,91],38:[2,91],41:[2,91],42:[2,91],64:118,68:[2,91]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:119,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{4:[2,92],5:[2,92],9:[2,92],10:[2,92],11:[2,92],12:[2,92],17:[2,92],18:[2,92],24:[2,92],25:[2,92],26:[2,92],27:[2,92],30:[2,92],32:[2,92],33:[2,92],34:[2,92],38:[2,92],41:[2,92],42:[2,92],67:[2,92],68:[2,92]},{7:[2,35],14:[2,35],21:[2,35],35:[2,35],37:[1,120],38:[2,35],40:[2,35],46:[2,35],47:[2,35],49:[2,35],50:[2,35],51:[2,35],52:[2,35],53:[2,35],54:[2,35],55:[2,35],56:[2,35]},{7:[1,122],21:[1,123],35:[1,121]},{7:[2,49],21:[2,49],35:[2,49]},{7:[1,111],14:[1,124],21:[1,103],43:104,51:[1,105],52:[1,106],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{7:[2,40],14:[2,40],21:[2,40],35:[2,40],38:[2,40],40:[2,40],46:[2,40],47:[2,40],49:[2,40],50:[2,40],51:[2,40],52:[2,40],53:[2,40],54:[2,40],55:[2,40],56:[2,40]},{7:[1,126],21:[1,127],40:[1,125]},{7:[2,18],21:[2,18],40:[2,18]},{7:[1,128],21:[1,129]},{5:[2,34],7:[2,34],14:[2,34],21:[2,34],30:[2,34],35:[2,34],38:[2,34],40:[2,34],46:[2,34],47:[2,34],49:[2,34],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34],55:[2,34],56:[2,34]},{5:[2,28],7:[2,28],14:[2,28],21:[2,28],30:[2,28],35:[2,28],38:[2,28],40:[2,28],46:[2,28],47:[2,28],49:[2,28],50:[2,28],51:[2,28],52:[2,28],53:[2,28],54:[2,28],55:[2,28],56:[2,28]},{5:[2,29],7:[2,29],14:[2,29],21:[2,29],30:[2,29],35:[2,29],38:[2,29],40:[2,29],46:[2,29],47:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],53:[2,29],54:[2,29],55:[2,29],56:[2,29]},{7:[2,5],14:[2,5],21:[2,5],35:[2,5],38:[2,5],40:[2,5],46:[2,5],47:[2,5],49:[2,5],50:[2,5],51:[2,5],52:[2,5],53:[2,5],54:[2,5],55:[2,5],56:[2,5]},{7:[2,6],14:[2,6],21:[2,6],35:[2,6],38:[2,6],40:[2,6],46:[2,6],47:[2,6],49:[2,6],50:[2,6],51:[2,6],52:[2,6],53:[2,6],54:[2,6],55:[2,6],56:[2,6]},{7:[2,7],14:[2,7],21:[2,7],35:[2,7],38:[2,7],40:[2,7],46:[2,7],47:[2,7],49:[2,7],50:[2,7],51:[2,7],52:[2,7],53:[2,7],54:[2,7],55:[2,7],56:[2,7]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:130,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{5:[2,27],7:[2,27],14:[2,27],21:[2,27],24:[2,27],25:[2,27],26:[2,27],27:[2,27],30:[2,27],35:[2,27],38:[2,27],40:[2,27],46:[2,27],47:[2,27],49:[2,27],50:[2,27],51:[2,27],52:[2,27],53:[2,27],54:[2,27],55:[2,27],56:[2,27]},{7:[1,111],14:[1,131],21:[1,103],43:104,51:[1,105],52:[1,106],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{7:[1,111],14:[1,132],21:[1,103],43:104,51:[1,105],52:[1,106],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{7:[1,111],14:[1,133],21:[1,103],43:104,51:[1,105],52:[1,106],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{7:[2,75],21:[2,75],40:[2,75],51:[2,75],52:[2,75],53:[2,75],54:[2,75],55:[2,75],56:[2,75]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:134,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:135,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{7:[1,44],21:[2,80],40:[2,80],51:[2,80],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50]},{7:[1,44],21:[2,81],40:[2,81],51:[2,81],52:[2,81],53:[1,47],54:[1,48],55:[1,49],56:[1,50]},{7:[1,44],21:[2,82],40:[2,82],51:[2,82],52:[2,82],53:[2,82],54:[1,48],55:[1,49],56:[1,50]},{7:[1,44],21:[2,83],40:[2,83],51:[2,83],52:[2,83],53:[2,83],54:[2,83],55:[1,49],56:[1,50]},{7:[1,44],21:[2,84],40:[2,84],51:[2,84],52:[2,84],53:[2,84],54:[2,84],55:[2,84],56:[1,50]},{7:[1,44],21:[2,85],40:[2,85],51:[2,85],52:[2,85],53:[2,85],54:[2,85],55:[2,85],56:[2,85]},{7:[1,44],21:[1,136],51:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50]},{7:[2,15],9:[2,15],14:[2,15],21:[2,15],35:[2,15],38:[2,15],40:[2,15],46:[2,15],47:[2,15],49:[2,15],50:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15],55:[2,15],56:[2,15],63:[2,15]},{7:[2,9],9:[2,9],14:[2,9],21:[2,9],35:[2,9],38:[2,9],40:[2,9],46:[2,9],47:[2,9],49:[2,9],50:[2,9],51:[2,9],52:[2,9],53:[2,9],54:[2,9],55:[2,9],56:[2,9],63:[2,9]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:137,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{7:[2,11],9:[2,11],14:[2,11],21:[2,11],35:[2,11],38:[2,11],40:[2,11],46:[2,11],47:[2,11],49:[2,11],50:[2,11],51:[2,11],52:[2,11],53:[2,11],54:[2,11],55:[2,11],56:[2,11],63:[2,11]},{7:[1,44],21:[1,138],51:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50]},{7:[1,139]},{7:[2,76],21:[2,76],40:[2,76],51:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76]},{7:[2,77],21:[2,77],40:[2,77],51:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77]},{7:[2,14],9:[2,14],14:[2,14],21:[2,14],35:[2,14],38:[2,14],40:[2,14],46:[2,14],47:[2,14],49:[2,14],50:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],63:[2,14]},{4:[2,54],5:[2,54],7:[2,62],9:[2,54],10:[2,54],11:[2,54],12:[2,54],14:[2,62],17:[2,54],18:[2,54],21:[2,62],24:[2,54],25:[2,54],26:[2,54],27:[2,54],30:[2,54],32:[2,54],33:[2,54],34:[2,54],38:[2,54],41:[2,54],42:[2,54],51:[2,62],52:[2,62],53:[2,62],54:[2,62],55:[2,62],56:[2,62]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:140,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:143,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],45:142,46:[1,116],47:[1,117],48:141,49:[1,114],50:[1,115]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:144,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:145,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:146,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:147,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],13:148,16:60,17:[1,17],18:[1,18],20:59,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{4:[2,53],5:[2,53],9:[2,53],10:[2,53],11:[2,53],12:[2,53],17:[2,53],18:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],30:[2,53],32:[2,53],33:[2,53],34:[2,53],38:[2,53],41:[2,53],42:[2,53]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:149,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:150,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{4:[2,59],5:[2,59],7:[2,59],9:[2,59],10:[2,59],11:[2,59],12:[2,59],17:[2,59],18:[2,59],21:[2,59],24:[2,59],25:[2,59],26:[2,59],27:[2,59],30:[2,59],32:[2,59],33:[2,59],34:[2,59],38:[2,59],41:[2,59],42:[2,59]},{4:[2,60],5:[2,60],7:[2,60],9:[2,60],10:[2,60],11:[2,60],12:[2,60],17:[2,60],18:[2,60],21:[2,60],24:[2,60],25:[2,60],26:[2,60],27:[2,60],30:[2,60],32:[2,60],33:[2,60],34:[2,60],38:[2,60],41:[2,60],42:[2,60]},{4:[2,57],5:[2,57],7:[2,57],9:[2,57],10:[2,57],11:[2,57],12:[2,57],17:[2,57],18:[2,57],21:[2,57],24:[2,57],25:[2,57],26:[2,57],27:[2,57],30:[2,57],32:[2,57],33:[2,57],34:[2,57],38:[2,57],41:[2,57],42:[2,57]},{4:[2,58],5:[2,58],7:[2,58],9:[2,58],10:[2,58],11:[2,58],12:[2,58],17:[2,58],18:[2,58],21:[2,58],24:[2,58],25:[2,58],26:[2,58],27:[2,58],30:[2,58],32:[2,58],33:[2,58],34:[2,58],38:[2,58],41:[2,58],42:[2,58]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:152,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28],68:[1,151]},{7:[1,64],38:[2,91],64:153},{38:[1,154]},{7:[2,36],14:[2,36],21:[2,36],35:[2,36],37:[1,155],38:[2,36],40:[2,36],46:[2,36],47:[2,36],49:[2,36],50:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36],55:[2,36],56:[2,36]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:156,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],7:[2,51],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:157,21:[2,51],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],35:[2,51],38:[1,24],41:[1,27],42:[1,28]},{7:[2,39],14:[2,39],21:[2,39],35:[2,39],38:[2,39],40:[2,39],46:[2,39],47:[2,39],49:[2,39],50:[2,39],51:[2,39],52:[2,39],53:[2,39],54:[2,39],55:[2,39],56:[2,39]},{7:[2,41],14:[2,41],21:[2,41],35:[2,41],38:[2,41],40:[2,41],46:[2,41],47:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],53:[2,41],54:[2,41],55:[2,41],56:[2,41]},{8:72,9:[1,31],19:158},{7:[2,20],8:72,9:[1,31],19:159,21:[2,20],40:[2,20]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:160,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:161,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{7:[1,111],14:[1,162],21:[1,103],43:104,51:[1,105],52:[1,106],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{5:[2,23],7:[2,23],14:[2,23],21:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],30:[2,23],35:[2,23],38:[2,23],40:[2,23],46:[2,23],47:[2,23],49:[2,23],50:[2,23],51:[2,23],52:[2,23],53:[2,23],54:[2,23],55:[2,23],56:[2,23]},{5:[2,24],7:[2,24],14:[2,24],21:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],30:[2,24],35:[2,24],38:[2,24],40:[2,24],46:[2,24],47:[2,24],49:[2,24],50:[2,24],51:[2,24],52:[2,24],53:[2,24],54:[2,24],55:[2,24],56:[2,24]},{5:[2,25],7:[2,25],14:[2,25],21:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],30:[2,25],35:[2,25],38:[2,25],40:[2,25],46:[2,25],47:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],53:[2,25],54:[2,25],55:[2,25],56:[2,25]},{7:[2,78],21:[2,78],40:[2,78],51:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],56:[2,78]},{7:[2,79],21:[2,79],40:[2,79],51:[2,79],52:[2,79],53:[2,79],54:[2,79],55:[2,79],56:[2,79]},{4:[2,90],5:[2,90],9:[2,90],10:[2,90],11:[2,90],12:[2,90],17:[2,90],18:[2,90],21:[2,90],24:[2,90],25:[2,90],26:[2,90],27:[2,90],30:[2,90],32:[2,90],33:[2,90],34:[2,90],38:[2,90],40:[2,90],41:[2,90],42:[2,90],67:[2,90],72:[2,90],76:[2,90]},{7:[1,111],14:[1,163],21:[1,103],43:104,51:[1,105],52:[1,106],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{4:[2,89],5:[2,89],9:[2,89],10:[2,89],11:[2,89],12:[2,89],17:[2,89],18:[2,89],21:[2,89],24:[2,89],25:[2,89],26:[2,89],27:[2,89],30:[2,89],32:[2,89],33:[2,89],34:[2,89],38:[2,89],40:[2,89],41:[2,89],42:[2,89],67:[2,89],72:[2,89],76:[2,89]},{38:[1,164]},{7:[2,63],14:[2,63],21:[2,63],51:[2,63],52:[2,63],53:[2,63],54:[2,63],55:[2,63],56:[2,63]},{4:[2,55],5:[2,55],7:[1,111],9:[2,55],10:[2,55],11:[2,55],12:[2,55],17:[2,55],18:[2,55],21:[1,167],24:[2,55],25:[2,55],26:[2,55],27:[2,55],30:[2,55],32:[2,55],33:[2,55],34:[2,55],38:[2,55],41:[2,55],42:[2,55],43:166,44:165},{4:[2,55],5:[2,55],7:[1,111],9:[2,55],10:[2,55],11:[2,55],12:[2,55],17:[2,55],18:[2,55],21:[1,167],24:[2,55],25:[2,55],26:[2,55],27:[2,55],30:[2,55],32:[2,55],33:[2,55],34:[2,55],38:[2,55],41:[2,55],42:[2,55],43:166,44:168},{7:[1,111],14:[2,68],21:[2,68],43:104,51:[2,68],52:[1,106],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{7:[1,111],14:[2,69],21:[2,69],43:104,51:[2,69],52:[2,69],53:[1,107],54:[1,108],55:[1,109],56:[1,110]},{7:[1,111],14:[2,70],21:[2,70],43:104,51:[2,70],52:[2,70],53:[2,70],54:[1,108],55:[1,109],56:[1,110]},{7:[1,111],14:[2,71],21:[2,71],43:104,51:[2,71],52:[2,71],53:[2,71],54:[2,71],55:[1,109],56:[1,110]},{7:[1,111],14:[2,72],21:[2,72],43:104,51:[2,72],52:[2,72],53:[2,72],54:[2,72],55:[2,72],56:[1,110]},{7:[1,111],14:[2,73],21:[2,73],43:104,51:[2,73],52:[2,73],53:[2,73],54:[2,73],55:[2,73],56:[2,73]},{7:[2,64],14:[2,64],21:[2,64],51:[2,64],52:[2,64],53:[2,64],54:[2,64],55:[2,64],56:[2,64]},{7:[2,65],14:[2,65],21:[2,65],51:[2,65],52:[2,65],53:[2,65],54:[2,65],55:[2,65],56:[2,65]},{7:[1,64],38:[2,91],64:169,67:[2,91]},{7:[1,64],38:[2,91],64:170},{38:[1,171]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],39:172,40:[2,107],41:[1,27],42:[1,28],57:174,58:173,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:3,74:175},{38:[1,176]},{7:[2,50],21:[2,50],35:[2,50]},{7:[2,52],21:[2,52],35:[2,52]},{7:[2,19],21:[2,19],40:[2,19]},{7:[2,21],21:[2,21],40:[2,21]},{7:[2,16],21:[2,16],40:[2,16]},{7:[2,17],21:[2,17],40:[2,17]},{7:[2,8],14:[2,8],21:[2,8],35:[2,8],38:[2,8],40:[2,8],46:[2,8],47:[2,8],49:[2,8],50:[2,8],51:[2,8],52:[2,8],53:[2,8],54:[2,8],55:[2,8],56:[2,8]},{7:[2,10],9:[2,10],14:[2,10],21:[2,10],35:[2,10],38:[2,10],40:[2,10],46:[2,10],47:[2,10],49:[2,10],50:[2,10],51:[2,10],52:[2,10],53:[2,10],54:[2,10],55:[2,10],56:[2,10],63:[2,10]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],40:[2,107],41:[1,27],42:[1,28],57:10,58:177,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:3,74:175},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:178,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{4:[2,56],5:[2,56],9:[2,56],10:[2,56],11:[2,56],12:[2,56],17:[2,56],18:[2,56],24:[2,56],25:[2,56],26:[2,56],27:[2,56],30:[2,56],32:[2,56],33:[2,56],34:[2,56],38:[2,56],41:[2,56],42:[2,56]},{4:[2,54],5:[2,54],9:[2,54],10:[2,54],11:[2,54],12:[2,54],17:[2,54],18:[2,54],24:[2,54],25:[2,54],26:[2,54],27:[2,54],30:[2,54],32:[2,54],33:[2,54],34:[2,54],38:[2,54],41:[2,54],42:[2,54]},{3:61,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:60,17:[1,17],18:[1,18],20:179,23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],41:[1,27],42:[1,28]},{38:[1,180],66:181,67:[1,21]},{38:[1,182]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],40:[2,107],41:[1,27],42:[1,28],57:10,58:183,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:3,74:175},{40:[1,184]},{40:[2,86]},{7:[1,44],21:[1,43],40:[2,87],51:[1,45],52:[1,46],53:[1,47],54:[1,48],55:[1,49],56:[1,50]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],40:[2,108],41:[1,27],42:[1,28],57:10,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:42},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],39:185,40:[2,107],41:[1,27],42:[1,28],57:174,58:173,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:3,74:175},{40:[1,186]},{7:[2,66],14:[2,66],21:[2,66],51:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[2,66],56:[2,66]},{7:[2,67],14:[2,67],21:[2,67],51:[2,67],52:[2,67],53:[2,67],54:[2,67],55:[2,67],56:[2,67]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],40:[2,107],41:[1,27],42:[1,28],57:10,58:187,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:3,74:175},{21:[2,97]},{3:12,4:[1,19],5:[1,20],8:25,9:[1,31],10:[1,26],11:[1,29],12:[1,23],16:11,17:[1,17],18:[1,18],20:16,21:[1,15],23:36,24:[1,37],25:[1,38],26:[1,39],27:[1,40],28:32,30:[1,33],31:30,32:[1,34],33:[1,35],34:[1,22],38:[1,24],40:[2,107],41:[1,27],42:[1,28],57:10,58:188,59:4,60:6,62:5,66:13,67:[1,21],69:7,70:9,71:8,72:[1,14],73:3,74:175},{40:[1,189]},{7:[2,38],14:[2,38],21:[2,38],35:[2,38],38:[2,38],40:[2,38],46:[2,38],47:[2,38],49:[2,38],50:[2,38],51:[2,38],52:[2,38],53:[2,38],54:[2,38],55:[2,38],56:[2,38]},{40:[1,190]},{21:[1,191]},{40:[1,192]},{40:[1,193]},{4:[2,93],5:[2,93],7:[2,93],9:[2,93],10:[2,93],11:[2,93],12:[2,93],17:[2,93],18:[2,93],21:[2,93],24:[2,93],25:[2,93],26:[2,93],27:[2,93],30:[2,93],32:[2,93],33:[2,93],34:[2,93],38:[2,93],41:[2,93],42:[2,93],68:[2,93]},{7:[2,37],14:[2,37],21:[2,37],35:[2,37],38:[2,37],40:[2,37],46:[2,37],47:[2,37],49:[2,37],50:[2,37],51:[2,37],52:[2,37],53:[2,37],54:[2,37],55:[2,37],56:[2,37]},{4:[2,100],5:[2,100],9:[2,100],10:[2,100],11:[2,100],12:[2,100],17:[2,100],18:[2,100],21:[2,100],24:[2,100],25:[2,100],26:[2,100],27:[2,100],30:[2,100],32:[2,100],33:[2,100],34:[2,100],38:[2,100],40:[2,100],41:[2,100],42:[2,100],67:[2,100],72:[2,100],76:[2,100]},{21:[2,96]},{4:[2,94],5:[2,94],7:[2,94],9:[2,94],10:[2,94],11:[2,94],12:[2,94],17:[2,94],18:[2,94],21:[2,94],24:[2,94],25:[2,94],26:[2,94],27:[2,94],30:[2,94],32:[2,94],33:[2,94],34:[2,94],38:[2,94],41:[2,94],42:[2,94],68:[2,94]}],
defaultActions: {41:[2,112],173:[2,86],181:[2,97],192:[2,96]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function makeExpr(expr) {
		if (expr.length === 1) {
			expr.push("{mono}");
		}
		return expr;
	}

	function makePartialExpr(expr) {
		console.error('enter');
		console.error(expr);
		if (expr.length === 1) {
			expr.push("{mono}");
			return expr;
		}
		var expr0 = expr[0];
		expr[0] = ["__", "{atomic}", "{var}"];
		expr = expr.unshift(expr0);
		console.error(expr);
		return expr;
	}

//	lixlib = require("./lixlib.js");
//	lixlib = require("./lib.lix.js");
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 76; 
break;
case 1: return 27; 
break;
case 2: return 25; 
break;
case 3: return 26; 
break;
case 4:	return 24; 
break;
case 5:	return 24; 
break;
case 6:	return 24; 
break;
case 7:	return 24; 
break;
case 8:	return 24; 
break;
case 9:	return 32; 
break;
case 10:	return 33; 
break;
case 11:	return 30; 
break;
case 12: return 11; 
break;
case 13: return 9; 
break;
case 14: return 37; 
break;
case 15: return 50; 
break;
case 16: return 47; 
break;
case 17: return 21; 
break;
case 18: return 51; 
break;
case 19: return 12; 
break;
case 20: return 14; 
break;
case 21: return 38; 
break;
case 22: return 40; 
break;
case 23: return 34; 
break;
case 24: return 35; 
break;
case 25: return 67; 
break;
case 26: return 68; 
break;
case 27: return 72; 
break;
case 28: return 42; 
break;
case 29: return 41; 
break;
case 30: return 49; 
break;
case 31: return 46; 
break;
case 32: return 49; 
break;
case 33: return 46; 
break;
case 34: return 10; 
break;
case 35: return 4; 
break;
case 36: return 18; 
break;
case 37: return 17; 
break;
case 38: return 52; 
break;
case 39: return ">>>"; 
break;
case 40: return "<<<"; 
break;
case 41: return ">>"; 
break;
case 42: return "<<"; 
break;
case 43: return 4; 
break;
case 44: return 4; 
break;
case 45: return 4; 
break;
case 46: return 5; 
break;
case 47: return 4; 
break;
case 48: return 4; 
break;
case 49: return 4; 
break;
case 50: return 4; 
break;
case 51: return 4; 
break;
case 52: return 4; 
break;
case 53: return 4; 
break;
case 54: return 61; 
break;
case 55: return 63; 
break;
case 56: return 7; 
break;
}
},
rules: [/^(?:$)/,/^(?:\/+\(\s*((#.*)?\n+)*\s*)/,/^(?:\.\/+\(\s*((#.*)?\n+)*\s*)/,/^(?:\.\.\/+\(\s*((#.*)?\n+)*\s*)/,/^(?:\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\/+\.\.)/,/^(?:\/+\.)/,/^(?:\.\.\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\.\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\.\.\/+)/,/^(?:\.\/+)/,/^(?:\/\/+)/,/^(?:'(\\.|[^\\'])*'|"(\\.|[^\\"])*")/,/^(?:\.)/,/^(?:\s*((#.*)?\n+)*\s*->\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*and\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*or\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*)/,/^(?:\s*\|\s*)/,/^(?:\(\s*)/,/^(?:\s*\))/,/^(?:\{\s*((#.*)?\n+)*\s*)/,/^(?:\s*\})/,/^(?:\[\s*((#.*)?\n+)*\s*)/,/^(?:\s*\])/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:and\s*)/,/^(?:or\s*)/,/^(?:\s+and\s+)/,/^(?:\s+or\s+)/,/^(?:[+-]?[0-9]+(\.[0-9]*)?([Ee][+-]?[0-9]+)?)/,/^(?:[\u4e00-\u9fa5_a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9]*)/,/^(?:\$\(\s*((#.*)?\n+)*\s*)/,/^(?:\$[\u4e00-\u9fa5_a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9]*)/,/^(?:\s*>>=\s+)/,/^(?:\s*>>>\s+)/,/^(?:\s*<<<\s+)/,/^(?:\s*>>\s+)/,/^(?:\s*<<\s+)/,/^(?:\+)/,/^(?:\*)/,/^(?:-)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:\s+:=\s+)/,/^(?:\s+=\s+)/,/^(?:\s+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammer;
exports.Parser = grammer.Parser;
exports.parse = function () { return grammer.parse.apply(grammer, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}