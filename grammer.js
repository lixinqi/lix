/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammer = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"VAR":3,"var":4,"DIV":5,"FUNC_ARGS":6,"SEP":7,"PropertyField":8,"[":9,"STRING_LITERAL":10,"]":11,"NAT":12,"Field":13,"MultiLineExpr":14,"Object":15,"$":16,".":17,"Property":18,"PrimaryExpr":19,"NEWLINE":20,"PropertyList":21,"DirItem":22,"DIRITEM":23,"CURRENT_DIRITEM_BRACKET":24,"PARENT_DIRITEM_BRACKET":25,"DIRITEM_BRACKET":26,"PATH":27,"Slashes":28,"ROOT":29,"Path":30,"PARENT_PATH":31,"CURRENT_PATH":32,"OPENPARAN":33,"CLOSEPARAN":34,"FUNC_ARROW":35,"{":36,"FUNC_BODY":37,"}":38,"ArrayLiteral":39,"FALSE":40,"TRUE":41,"MultiLineSEP":42,"OptMultiLineSEP":43,"MultiLineOR":44,"OR":45,"NLOR":46,"MultiLineAND":47,"AND":48,"NLAND":49,"VBAR":50,"Expr":51,"NullableSourceElements":52,"ExprStatement":53,"DefStatement":54,"DEF":55,"AssignStatement":56,"ASSIGN_OPERATOR":57,"OptSEP":58,"IfCaseStatement":59,"IfStatementNoNL":60,"IF":61,"ELSE":62,"IfStatement":63,"EmptyStatement":64,"WhileStatement":65,"WHILE":66,"Statement":67,"SourceElements":68,"Program":69,"EOF":70,"$accept":0,"$end":1},
terminals_: {2:"error",4:"var",5:"DIV",7:"SEP",9:"[",10:"STRING_LITERAL",11:"]",12:"NAT",16:"$",17:".",20:"NEWLINE",23:"DIRITEM",24:"CURRENT_DIRITEM_BRACKET",25:"PARENT_DIRITEM_BRACKET",26:"DIRITEM_BRACKET",29:"ROOT",31:"PARENT_PATH",32:"CURRENT_PATH",33:"OPENPARAN",34:"CLOSEPARAN",35:"FUNC_ARROW",36:"{",38:"}",40:"FALSE",41:"TRUE",45:"OR",46:"NLOR",48:"AND",49:"NLAND",50:"VBAR",55:"DEF",57:"ASSIGN_OPERATOR",61:"IF",62:"ELSE",66:"WHILE",70:"EOF"},
productions_: [0,[3,1],[3,1],[6,1],[6,3],[8,1],[8,3],[8,3],[8,1],[13,1],[13,3],[13,1],[15,1],[15,2],[15,4],[15,3],[18,3],[18,3],[21,2],[21,4],[21,2],[21,4],[22,1],[22,3],[22,3],[22,3],[27,1],[27,2],[28,1],[28,1],[30,1],[30,1],[30,1],[30,1],[30,2],[19,7],[19,6],[19,3],[19,2],[19,3],[19,2],[19,3],[19,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[39,1],[39,3],[39,2],[39,3],[42,1],[42,1],[43,0],[43,1],[44,1],[44,1],[47,1],[47,1],[14,1],[14,2],[14,3],[14,3],[14,3],[14,5],[14,5],[14,3],[51,1],[51,3],[51,3],[51,3],[51,4],[51,4],[51,3],[37,1],[37,1],[53,2],[54,4],[56,4],[58,0],[58,1],[59,6],[59,7],[60,2],[60,8],[60,6],[63,2],[64,1],[65,8],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[52,0],[52,1],[68,1],[68,2],[69,0],[69,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
				this.$ = [[$$[$0], '{atomic}', '{var}']];
			
break;
case 4:
				$$[$0-2].push([$$[$0], '{atomic}', '{var}']);
				this.$ = $$[$0-2];
			
break;
case 5:
				this.$ = [$$[$0], "{atomic}"];
			
break;
case 6:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 7:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 8:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 9:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 10:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 11:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 12:
				this.$ = [$$[$0], '{atomic}', '{var}'];
			
break;
case 13:
				this.$ = [$$[$0], '{module}', '{var}'];
			
break;
case 14:
				this.$ = [makeExpr($$[$0-1]), '{module}', '{index}'];
			
break;
case 15:
				this.$ = [$$[$0-2], '{.}', $$[$0]];
			
break;
case 16:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 17:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 18:
				this.$ = [$$[$0]];
			
break;
case 19:
				$$[$0-3].push($$[$0]);
				this.$ = $$[$0-3];
			
break;
case 21:
				$$[$0-3].push($$[$0]);
				this.$ = $$[$0-3];
			
break;
case 22:
				this.$ = [$$[$0], '{path_item}'];
			
break;
case 23:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', './'];
			
break;
case 24:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', '../'];
			
break;
case 25:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', ''];
			
break;
case 26:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 27:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 31:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 32:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 33:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 35:
				this.$ = [$$[$0-5], '{func}', $$[$0-1]];
			
break;
case 36:
				this.$ = [[], '{func}', $$[$0-1]];
			
break;
case 37:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 38:
				this.$ = [[], '{object}'];
			
break;
case 39:
				this.$ = [$$[$0-1], '{object}'];
			
break;
case 40:
				this.$ = [[], '{array}'];
			
break;
case 41:
				this.$ = [$$[$0-1], '{array}'];
			
break;
case 42:
				this.$ = [$$[$0], '{method}']
			
break;
case 44:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 45:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 46:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 47:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 49:
				this.$ = [$$[$0]];
			
break;
case 50:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 52:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 61:
				this.$ = [$$[$0]];
			
break;
case 63:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 64:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 65:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 66:
				this.$ = [makeExpr($$[$0-4]), 'and', makeExpr($$[$0])];
			
break;
case 67:
				this.$ = [makeExpr($$[$0-4]), 'or', makeExpr($$[$0])];
			
break;
case 68:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 69:
				this.$ = [$$[$0]];
			
break;
case 70:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 71:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 72:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 73:
				this.$ = [makeExpr($$[$0-3]), 'and', makeExpr($$[$0])];
			
break;
case 74:
				this.$ = [makeExpr($$[$0-3]), 'or', makeExpr($$[$0])];
			
break;
case 75:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 77:
				this.$ = [[makeExpr($$[$0])], '{seq}'];
			
break;
case 78:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 79:
				this.$ = [[$$[$0-3], '{atomic}', '{var}'], ':=', makeExpr($$[$0-1])];
			
break;
case 80:
				this.$ = [$$[$0-3], '=', makeExpr($$[$0-1])];
			
break;
case 83:
				this.$ = [[makeExpr($$[$0-4]), $$[$0-1]]];
			
break;
case 84:
				$$[$0-6].push([makeExpr($$[$0-4]), $$[$0-1]]);
				this.$ = $$[$0-6]
			
break;
case 85:
				this.$ = [$$[$0], 'if'];
			
break;
case 86:
				$$[$0-6].push([$$[$0-1], 'else']);
				this.$ = [$$[$0-6], 'if'];
			
break;
case 87:
				$$[$0-4].push($$[$0]);
				this.$ = [$$[$0-4], 'if'];
			
break;
case 89:
				this.$ = [[], '{empty}'];
			
break;
case 90:
				this.$ = [makeExpr($$[$0-5]), 'while', $$[$0-2]]
			
break;
case 97:
				this.$ = [[], '{seq}'];
			
break;
case 99:
					this.$ = [[$$[$0]], '{seq}'];
			
break;
case 100:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 101:
				this.$ = [[], '{start}'];
				//lixlib.compile(this.$);
				return this.$;
			
break;
case 102:
				this.$ = [$$[$0-1], '{start}'];
				//lixlib.compile(this.$);
				return this.$;
			
break;
}
},
table: [{1:[2,101],3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27],51:10,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:3,68:2,69:1},{1:[3]},{3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27],51:10,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:40,70:[1,39]},{4:[2,99],5:[2,99],9:[2,99],10:[2,99],12:[2,99],16:[2,99],17:[2,99],20:[2,99],23:[2,99],24:[2,99],25:[2,99],26:[2,99],29:[2,99],31:[2,99],32:[2,99],33:[2,99],36:[2,99],38:[2,99],40:[2,99],41:[2,99],61:[2,99],66:[2,99],70:[2,99]},{4:[2,91],5:[2,91],9:[2,91],10:[2,91],12:[2,91],16:[2,91],17:[2,91],20:[2,91],23:[2,91],24:[2,91],25:[2,91],26:[2,91],29:[2,91],31:[2,91],32:[2,91],33:[2,91],36:[2,91],38:[2,91],40:[2,91],41:[2,91],61:[2,91],66:[2,91],70:[2,91]},{4:[2,92],5:[2,92],9:[2,92],10:[2,92],12:[2,92],16:[2,92],17:[2,92],20:[2,92],23:[2,92],24:[2,92],25:[2,92],26:[2,92],29:[2,92],31:[2,92],32:[2,92],33:[2,92],36:[2,92],38:[2,92],40:[2,92],41:[2,92],61:[2,92],66:[2,92],70:[2,92]},{4:[2,93],5:[2,93],9:[2,93],10:[2,93],12:[2,93],16:[2,93],17:[2,93],20:[2,93],23:[2,93],24:[2,93],25:[2,93],26:[2,93],29:[2,93],31:[2,93],32:[2,93],33:[2,93],36:[2,93],38:[2,93],40:[2,93],41:[2,93],61:[2,93],66:[2,93],70:[2,93]},{4:[2,94],5:[2,94],9:[2,94],10:[2,94],12:[2,94],16:[2,94],17:[2,94],20:[2,94],23:[2,94],24:[2,94],25:[2,94],26:[2,94],29:[2,94],31:[2,94],32:[2,94],33:[2,94],36:[2,94],38:[2,94],40:[2,94],41:[2,94],61:[2,94],66:[2,94],70:[2,94]},{4:[2,95],5:[2,95],9:[2,95],10:[2,95],12:[2,95],16:[2,95],17:[2,95],20:[2,95],23:[2,95],24:[2,95],25:[2,95],26:[2,95],29:[2,95],31:[2,95],32:[2,95],33:[2,95],36:[2,95],38:[2,95],40:[2,95],41:[2,95],61:[2,95],66:[2,95],70:[2,95]},{4:[2,96],5:[2,96],9:[2,96],10:[2,96],12:[2,96],16:[2,96],17:[2,96],20:[2,96],23:[2,96],24:[2,96],25:[2,96],26:[2,96],29:[2,96],31:[2,96],32:[2,96],33:[2,96],36:[2,96],38:[2,96],40:[2,96],41:[2,96],61:[2,96],66:[2,96],70:[2,96]},{7:[1,42],20:[1,41],50:[1,43]},{7:[2,43],17:[1,45],20:[2,43],38:[2,43],45:[2,43],48:[2,43],50:[2,43],57:[1,44]},{7:[2,12],17:[2,12],20:[2,12],38:[2,12],45:[2,12],48:[2,12],50:[2,12],55:[1,46],57:[2,12]},{20:[1,47]},{7:[1,48]},{4:[2,89],5:[2,89],9:[2,89],10:[2,89],12:[2,89],16:[2,89],17:[2,89],20:[2,89],23:[2,89],24:[2,89],25:[2,89],26:[2,89],29:[2,89],31:[2,89],32:[2,89],33:[2,89],36:[2,89],38:[2,89],40:[2,89],41:[2,89],61:[2,89],66:[2,89],70:[2,89]},{7:[2,69],20:[2,69],38:[2,69],45:[1,50],48:[1,49],50:[2,69]},{3:51,4:[1,18],5:[1,19],9:[1,52]},{7:[2,1],11:[2,1],17:[2,1],20:[2,1],34:[2,1],36:[2,1],38:[2,1],45:[2,1],46:[2,1],48:[2,1],49:[2,1],50:[2,1],55:[2,1],57:[2,1]},{7:[2,2],11:[2,2],17:[2,2],20:[2,2],34:[2,2],36:[2,2],38:[2,2],45:[2,2],46:[2,2],48:[2,2],49:[2,2],50:[2,2],55:[2,2],57:[2,2]},{4:[2,81],5:[2,81],7:[1,55],9:[2,81],10:[2,81],12:[2,81],16:[2,81],17:[2,81],23:[2,81],24:[2,81],25:[2,81],26:[2,81],29:[2,81],31:[2,81],32:[2,81],33:[2,81],36:[2,81],40:[2,81],41:[2,81],58:54,59:53},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],14:56,15:59,16:[1,17],17:[1,24],19:58,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],34:[1,57],36:[1,22],40:[1,26],41:[1,27]},{17:[1,63],21:62,38:[1,61]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],11:[1,64],12:[1,25],15:59,16:[1,17],17:[1,24],19:66,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],39:65,40:[1,26],41:[1,27]},{3:68,4:[1,18],5:[1,19],8:67,9:[1,69],12:[1,70]},{7:[2,44],11:[2,44],20:[2,44],34:[2,44],36:[2,44],38:[2,44],45:[2,44],46:[2,44],48:[2,44],49:[2,44],50:[2,44]},{7:[2,45],11:[2,45],20:[2,45],34:[2,45],36:[2,45],38:[2,45],45:[2,45],46:[2,45],48:[2,45],49:[2,45],50:[2,45]},{7:[2,46],11:[2,46],20:[2,46],34:[2,46],36:[2,46],38:[2,46],45:[2,46],46:[2,46],48:[2,46],49:[2,46],50:[2,46]},{7:[2,47],11:[2,47],20:[2,47],34:[2,47],36:[2,47],38:[2,47],45:[2,47],46:[2,47],48:[2,47],49:[2,47],50:[2,47]},{5:[1,72],7:[2,48],11:[2,48],20:[2,48],28:71,29:[1,73],34:[2,48],36:[2,48],38:[2,48],45:[2,48],46:[2,48],48:[2,48],49:[2,48],50:[2,48]},{5:[2,30],7:[2,30],11:[2,30],20:[2,30],22:74,23:[1,35],24:[1,36],25:[1,37],26:[1,38],29:[2,30],34:[2,30],36:[2,30],38:[2,30],45:[2,30],46:[2,30],48:[2,30],49:[2,30],50:[2,30]},{5:[2,31],7:[2,31],11:[2,31],20:[2,31],29:[2,31],34:[2,31],36:[2,31],38:[2,31],45:[2,31],46:[2,31],48:[2,31],49:[2,31],50:[2,31]},{5:[2,32],7:[2,32],11:[2,32],20:[2,32],29:[2,32],34:[2,32],36:[2,32],38:[2,32],45:[2,32],46:[2,32],48:[2,32],49:[2,32],50:[2,32]},{5:[2,33],7:[2,33],11:[2,33],20:[2,33],29:[2,33],34:[2,33],36:[2,33],38:[2,33],45:[2,33],46:[2,33],48:[2,33],49:[2,33],50:[2,33]},{5:[2,26],7:[2,26],11:[2,26],20:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],29:[2,26],34:[2,26],36:[2,26],38:[2,26],45:[2,26],46:[2,26],48:[2,26],49:[2,26],50:[2,26]},{5:[2,22],7:[2,22],11:[2,22],20:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],29:[2,22],34:[2,22],36:[2,22],38:[2,22],45:[2,22],46:[2,22],48:[2,22],49:[2,22],50:[2,22]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],14:75,15:59,16:[1,17],17:[1,24],19:58,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],14:76,15:59,16:[1,17],17:[1,24],19:58,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],14:77,15:59,16:[1,17],17:[1,24],19:58,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{1:[2,102]},{4:[2,100],5:[2,100],9:[2,100],10:[2,100],12:[2,100],16:[2,100],17:[2,100],20:[2,100],23:[2,100],24:[2,100],25:[2,100],26:[2,100],29:[2,100],31:[2,100],32:[2,100],33:[2,100],36:[2,100],38:[2,100],40:[2,100],41:[2,100],61:[2,100],66:[2,100],70:[2,100]},{4:[2,78],5:[2,78],9:[2,78],10:[2,78],12:[2,78],16:[2,78],17:[2,78],20:[2,78],23:[2,78],24:[2,78],25:[2,78],26:[2,78],29:[2,78],31:[2,78],32:[2,78],33:[2,78],36:[2,78],38:[2,78],40:[2,78],41:[2,78],61:[2,78],66:[2,78],70:[2,78]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:78,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:16,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27],45:[1,80],48:[1,79],51:81},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:16,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27],51:82},{3:84,4:[1,18],5:[1,19],9:[1,85],12:[1,86],13:83},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:16,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27],51:87},{4:[2,88],5:[2,88],9:[2,88],10:[2,88],12:[2,88],16:[2,88],17:[2,88],20:[2,88],23:[2,88],24:[2,88],25:[2,88],26:[2,88],29:[2,88],31:[2,88],32:[2,88],33:[2,88],36:[2,88],38:[2,88],40:[2,88],41:[2,88],61:[2,88],66:[2,88],70:[2,88]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:88,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:89,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:90,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{7:[2,13],11:[2,13],17:[2,13],20:[2,13],34:[2,13],36:[2,13],38:[2,13],45:[2,13],46:[2,13],48:[2,13],49:[2,13],50:[2,13],57:[2,13]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],14:91,15:59,16:[1,17],17:[1,24],19:58,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{4:[2,81],5:[2,81],7:[1,55],9:[2,81],10:[2,81],12:[2,81],16:[2,81],17:[2,81],20:[2,85],23:[2,81],24:[2,81],25:[2,81],26:[2,81],29:[2,81],31:[2,81],32:[2,81],33:[2,81],36:[2,81],40:[2,81],41:[2,81],58:92,62:[2,81]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:93,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{4:[2,82],5:[2,82],9:[2,82],10:[2,82],12:[2,82],16:[2,82],17:[2,82],23:[2,82],24:[2,82],25:[2,82],26:[2,82],29:[2,82],31:[2,82],32:[2,82],33:[2,82],36:[2,82],40:[2,82],41:[2,82],61:[2,82],62:[2,82]},{7:[1,98],20:[1,95],34:[1,94],42:96,50:[1,97]},{35:[1,99]},{7:[2,61],11:[2,61],20:[2,61],34:[2,61],44:101,45:[1,104],46:[1,105],47:100,48:[1,102],49:[1,103],50:[2,61]},{7:[2,43],11:[2,43],17:[1,45],20:[2,43],34:[2,43],36:[2,43],38:[2,43],45:[2,43],46:[2,43],48:[2,43],49:[2,43],50:[2,43]},{7:[2,12],11:[2,12],17:[2,12],20:[2,12],34:[2,12],36:[2,12],38:[2,12],45:[2,12],46:[2,12],48:[2,12],49:[2,12],50:[2,12]},{7:[2,38],11:[2,38],20:[2,38],34:[2,38],36:[2,38],38:[2,38],45:[2,38],46:[2,38],48:[2,38],49:[2,38],50:[2,38]},{7:[1,107],20:[1,108],38:[1,106]},{3:68,4:[1,18],5:[1,19],8:110,9:[1,69],12:[1,70],18:109},{7:[2,40],11:[2,40],20:[2,40],34:[2,40],36:[2,40],38:[2,40],45:[2,40],46:[2,40],48:[2,40],49:[2,40],50:[2,40]},{7:[1,112],11:[1,111],20:[1,113]},{7:[2,49],11:[2,49],20:[2,49]},{7:[2,42],11:[2,42],20:[2,42],34:[2,42],36:[2,42],38:[2,42],45:[2,42],46:[2,42],48:[2,42],49:[2,42],50:[2,42]},{7:[2,5],11:[2,5],20:[2,5],34:[2,5],36:[2,5],38:[2,5],45:[2,5],46:[2,5],48:[2,5],49:[2,5],50:[2,5]},{10:[1,114],12:[1,115]},{7:[2,8],11:[2,8],20:[2,8],34:[2,8],36:[2,8],38:[2,8],45:[2,8],46:[2,8],48:[2,8],49:[2,8],50:[2,8]},{5:[2,34],7:[2,34],11:[2,34],20:[2,34],29:[2,34],34:[2,34],36:[2,34],38:[2,34],45:[2,34],46:[2,34],48:[2,34],49:[2,34],50:[2,34]},{5:[2,28],7:[2,28],11:[2,28],20:[2,28],29:[2,28],34:[2,28],36:[2,28],38:[2,28],45:[2,28],46:[2,28],48:[2,28],49:[2,28],50:[2,28]},{5:[2,29],7:[2,29],11:[2,29],20:[2,29],29:[2,29],34:[2,29],36:[2,29],38:[2,29],45:[2,29],46:[2,29],48:[2,29],49:[2,29],50:[2,29]},{5:[2,27],7:[2,27],11:[2,27],20:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],29:[2,27],34:[2,27],36:[2,27],38:[2,27],45:[2,27],46:[2,27],48:[2,27],49:[2,27],50:[2,27]},{7:[1,98],11:[1,116],20:[1,95],42:96,50:[1,97]},{7:[1,98],11:[1,117],20:[1,95],42:96,50:[1,97]},{7:[1,98],11:[1,118],20:[1,95],42:96,50:[1,97]},{7:[2,70],20:[2,70],38:[2,70],50:[2,70]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:119,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:120,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{7:[1,42],20:[2,75],38:[2,75],50:[2,75]},{7:[1,42],20:[1,121],50:[1,43]},{7:[2,15],11:[2,15],17:[2,15],20:[2,15],34:[2,15],36:[2,15],38:[2,15],45:[2,15],46:[2,15],48:[2,15],49:[2,15],50:[2,15],57:[2,15]},{7:[2,9],11:[2,9],17:[2,9],20:[2,9],34:[2,9],36:[2,9],38:[2,9],45:[2,9],46:[2,9],48:[2,9],49:[2,9],50:[2,9],57:[2,9]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],14:122,15:59,16:[1,17],17:[1,24],19:58,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{7:[2,11],11:[2,11],17:[2,11],20:[2,11],34:[2,11],36:[2,11],38:[2,11],45:[2,11],46:[2,11],48:[2,11],49:[2,11],50:[2,11],57:[2,11]},{7:[1,42],20:[1,123],50:[1,43]},{7:[1,124]},{7:[2,71],20:[2,71],38:[2,71],50:[2,71]},{7:[2,72],20:[2,72],38:[2,72],50:[2,72]},{7:[1,98],11:[1,125],20:[1,95],42:96,50:[1,97]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:127,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27],62:[1,126]},{7:[1,55],36:[2,81],58:128},{7:[2,37],11:[2,37],20:[2,37],34:[2,37],35:[1,129],36:[2,37],38:[2,37],45:[2,37],46:[2,37],48:[2,37],49:[2,37],50:[2,37]},{4:[2,54],5:[2,54],7:[2,62],9:[2,54],10:[2,54],11:[2,62],12:[2,54],16:[2,54],17:[2,54],20:[2,62],23:[2,54],24:[2,54],25:[2,54],26:[2,54],29:[2,54],31:[2,54],32:[2,54],33:[2,54],34:[2,62],36:[2,54],40:[2,54],41:[2,54],50:[2,62]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:130,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],14:133,15:59,16:[1,17],17:[1,24],19:58,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27],44:132,45:[1,104],46:[1,105],47:131,48:[1,102],49:[1,103]},{4:[2,53],5:[2,53],9:[2,53],10:[2,53],12:[2,53],16:[2,53],17:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],29:[2,53],31:[2,53],32:[2,53],33:[2,53],36:[2,53],40:[2,53],41:[2,53]},{36:[1,134]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:135,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:136,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{4:[2,59],5:[2,59],7:[2,59],9:[2,59],10:[2,59],12:[2,59],16:[2,59],17:[2,59],20:[2,59],23:[2,59],24:[2,59],25:[2,59],26:[2,59],29:[2,59],31:[2,59],32:[2,59],33:[2,59],36:[2,59],40:[2,59],41:[2,59]},{4:[2,60],5:[2,60],7:[2,60],9:[2,60],10:[2,60],12:[2,60],16:[2,60],17:[2,60],20:[2,60],23:[2,60],24:[2,60],25:[2,60],26:[2,60],29:[2,60],31:[2,60],32:[2,60],33:[2,60],36:[2,60],40:[2,60],41:[2,60]},{4:[2,57],5:[2,57],7:[2,57],9:[2,57],10:[2,57],12:[2,57],16:[2,57],17:[2,57],20:[2,57],23:[2,57],24:[2,57],25:[2,57],26:[2,57],29:[2,57],31:[2,57],32:[2,57],33:[2,57],36:[2,57],40:[2,57],41:[2,57]},{4:[2,58],5:[2,58],7:[2,58],9:[2,58],10:[2,58],12:[2,58],16:[2,58],17:[2,58],20:[2,58],23:[2,58],24:[2,58],25:[2,58],26:[2,58],29:[2,58],31:[2,58],32:[2,58],33:[2,58],36:[2,58],40:[2,58],41:[2,58]},{7:[2,39],11:[2,39],20:[2,39],34:[2,39],36:[2,39],38:[2,39],45:[2,39],46:[2,39],48:[2,39],49:[2,39],50:[2,39]},{17:[1,137]},{7:[2,20],17:[1,138],20:[2,20],38:[2,20]},{7:[2,18],20:[2,18],38:[2,18]},{7:[1,139],20:[1,140]},{7:[2,41],11:[2,41],20:[2,41],34:[2,41],36:[2,41],38:[2,41],45:[2,41],46:[2,41],48:[2,41],49:[2,41],50:[2,41]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:141,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],7:[2,51],9:[1,23],10:[1,28],11:[2,51],12:[1,25],15:59,16:[1,17],17:[1,24],19:142,20:[2,51],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{11:[1,143]},{11:[1,144]},{5:[2,23],7:[2,23],11:[2,23],20:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],29:[2,23],34:[2,23],36:[2,23],38:[2,23],45:[2,23],46:[2,23],48:[2,23],49:[2,23],50:[2,23]},{5:[2,24],7:[2,24],11:[2,24],20:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],29:[2,24],34:[2,24],36:[2,24],38:[2,24],45:[2,24],46:[2,24],48:[2,24],49:[2,24],50:[2,24]},{5:[2,25],7:[2,25],11:[2,25],20:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],29:[2,25],34:[2,25],36:[2,25],38:[2,25],45:[2,25],46:[2,25],48:[2,25],49:[2,25],50:[2,25]},{7:[2,73],20:[2,73],38:[2,73],50:[2,73]},{7:[2,74],20:[2,74],38:[2,74],50:[2,74]},{4:[2,80],5:[2,80],9:[2,80],10:[2,80],12:[2,80],16:[2,80],17:[2,80],20:[2,80],23:[2,80],24:[2,80],25:[2,80],26:[2,80],29:[2,80],31:[2,80],32:[2,80],33:[2,80],36:[2,80],38:[2,80],40:[2,80],41:[2,80],61:[2,80],66:[2,80],70:[2,80]},{7:[1,98],11:[1,145],20:[1,95],42:96,50:[1,97]},{4:[2,79],5:[2,79],9:[2,79],10:[2,79],12:[2,79],16:[2,79],17:[2,79],20:[2,79],23:[2,79],24:[2,79],25:[2,79],26:[2,79],29:[2,79],31:[2,79],32:[2,79],33:[2,79],36:[2,79],38:[2,79],40:[2,79],41:[2,79],61:[2,79],66:[2,79],70:[2,79]},{36:[1,146]},{7:[2,14],11:[2,14],17:[2,14],20:[2,14],34:[2,14],36:[2,14],38:[2,14],45:[2,14],46:[2,14],48:[2,14],49:[2,14],50:[2,14],57:[2,14]},{7:[1,55],36:[2,81],58:147,61:[2,81]},{7:[1,55],36:[2,81],58:148},{36:[1,149]},{36:[1,150]},{7:[2,63],11:[2,63],20:[2,63],34:[2,63],50:[2,63]},{4:[2,55],5:[2,55],7:[1,98],9:[2,55],10:[2,55],12:[2,55],16:[2,55],17:[2,55],20:[1,153],23:[2,55],24:[2,55],25:[2,55],26:[2,55],29:[2,55],31:[2,55],32:[2,55],33:[2,55],36:[2,55],40:[2,55],41:[2,55],42:152,43:151},{4:[2,55],5:[2,55],7:[1,98],9:[2,55],10:[2,55],12:[2,55],16:[2,55],17:[2,55],20:[1,153],23:[2,55],24:[2,55],25:[2,55],26:[2,55],29:[2,55],31:[2,55],32:[2,55],33:[2,55],36:[2,55],40:[2,55],41:[2,55],42:152,43:154},{7:[1,98],11:[2,68],20:[2,68],34:[2,68],42:96,50:[2,68]},{3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],37:155,38:[2,97],40:[1,26],41:[1,27],51:157,52:156,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:3,68:158},{7:[2,64],11:[2,64],20:[2,64],34:[2,64],50:[2,64]},{7:[2,65],11:[2,65],20:[2,65],34:[2,65],50:[2,65]},{3:68,4:[1,18],5:[1,19],8:110,9:[1,69],12:[1,70],18:159},{3:68,4:[1,18],5:[1,19],8:110,9:[1,69],12:[1,70],18:160},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:161,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:162,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{7:[2,50],11:[2,50],20:[2,50]},{7:[2,52],11:[2,52],20:[2,52]},{7:[2,6],11:[2,6],20:[2,6],34:[2,6],36:[2,6],38:[2,6],45:[2,6],46:[2,6],48:[2,6],49:[2,6],50:[2,6]},{7:[2,7],11:[2,7],20:[2,7],34:[2,7],36:[2,7],38:[2,7],45:[2,7],46:[2,7],48:[2,7],49:[2,7],50:[2,7]},{7:[2,10],11:[2,10],17:[2,10],20:[2,10],34:[2,10],36:[2,10],38:[2,10],45:[2,10],46:[2,10],48:[2,10],49:[2,10],50:[2,10],57:[2,10]},{3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],38:[2,97],40:[1,26],41:[1,27],51:10,52:163,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:3,68:158},{36:[1,164],60:165,61:[1,20]},{36:[1,166]},{3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],38:[2,97],40:[1,26],41:[1,27],51:10,52:167,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:3,68:158},{3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],37:168,38:[2,97],40:[1,26],41:[1,27],51:157,52:156,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:3,68:158},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:169,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{4:[2,56],5:[2,56],9:[2,56],10:[2,56],12:[2,56],16:[2,56],17:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],29:[2,56],31:[2,56],32:[2,56],33:[2,56],36:[2,56],40:[2,56],41:[2,56]},{4:[2,54],5:[2,54],9:[2,54],10:[2,54],12:[2,54],16:[2,54],17:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],29:[2,54],31:[2,54],32:[2,54],33:[2,54],36:[2,54],40:[2,54],41:[2,54]},{3:60,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:59,16:[1,17],17:[1,24],19:170,22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],40:[1,26],41:[1,27]},{38:[1,171]},{38:[2,76]},{7:[1,42],20:[1,41],38:[2,77],50:[1,43]},{3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],38:[2,98],40:[1,26],41:[1,27],51:10,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:40},{7:[2,19],20:[2,19],38:[2,19]},{7:[2,21],20:[2,21],38:[2,21]},{7:[2,16],20:[2,16],38:[2,16]},{7:[2,17],20:[2,17],38:[2,17]},{38:[1,172]},{3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],38:[2,97],40:[1,26],41:[1,27],51:10,52:173,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:3,68:158},{20:[2,87]},{3:12,4:[1,18],5:[1,19],9:[1,23],10:[1,28],12:[1,25],15:11,16:[1,17],17:[1,24],19:16,20:[1,15],22:34,23:[1,35],24:[1,36],25:[1,37],26:[1,38],27:30,29:[1,31],30:29,31:[1,32],32:[1,33],33:[1,21],36:[1,22],38:[2,97],40:[1,26],41:[1,27],51:10,52:174,53:4,54:6,56:5,60:13,61:[1,20],63:7,64:9,65:8,66:[1,14],67:3,68:158},{38:[1,175]},{38:[1,176]},{7:[2,66],11:[2,66],20:[2,66],34:[2,66],50:[2,66]},{7:[2,67],11:[2,67],20:[2,67],34:[2,67],50:[2,67]},{7:[2,36],11:[2,36],20:[2,36],34:[2,36],36:[2,36],38:[2,36],45:[2,36],46:[2,36],48:[2,36],49:[2,36],50:[2,36]},{20:[1,177]},{38:[1,178]},{38:[1,179]},{4:[2,83],5:[2,83],7:[2,83],9:[2,83],10:[2,83],12:[2,83],16:[2,83],17:[2,83],20:[2,83],23:[2,83],24:[2,83],25:[2,83],26:[2,83],29:[2,83],31:[2,83],32:[2,83],33:[2,83],36:[2,83],40:[2,83],41:[2,83],62:[2,83]},{7:[2,35],11:[2,35],20:[2,35],34:[2,35],36:[2,35],38:[2,35],45:[2,35],46:[2,35],48:[2,35],49:[2,35],50:[2,35]},{4:[2,90],5:[2,90],9:[2,90],10:[2,90],12:[2,90],16:[2,90],17:[2,90],20:[2,90],23:[2,90],24:[2,90],25:[2,90],26:[2,90],29:[2,90],31:[2,90],32:[2,90],33:[2,90],36:[2,90],38:[2,90],40:[2,90],41:[2,90],61:[2,90],66:[2,90],70:[2,90]},{20:[2,86]},{4:[2,84],5:[2,84],7:[2,84],9:[2,84],10:[2,84],12:[2,84],16:[2,84],17:[2,84],20:[2,84],23:[2,84],24:[2,84],25:[2,84],26:[2,84],29:[2,84],31:[2,84],32:[2,84],33:[2,84],36:[2,84],40:[2,84],41:[2,84],62:[2,84]}],
defaultActions: {39:[2,102],156:[2,76],165:[2,87],178:[2,86]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function makeExpr(expr) {
		if (expr.length === 1) {
			expr.push("{mono}");
		}
		return expr;
	}
//	lixlib = require("./lixlib.js");
//	lixlib = require("./lib.lix.js");
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 70; 
break;
case 1: return 26; 
break;
case 2: return 24; 
break;
case 3: return 25; 
break;
case 4:	return 23; 
break;
case 5:	return 23; 
break;
case 6:	return 23; 
break;
case 7:	return 23; 
break;
case 8:	return 23; 
break;
case 9:	return 31; 
break;
case 10:	return 32; 
break;
case 11:	return 29; 
break;
case 12: return 16; 
break;
case 13: return 10; 
break;
case 14: return 17; 
break;
case 15: return 35; 
break;
case 16: return 49; 
break;
case 17: return 46; 
break;
case 18: return 20; 
break;
case 19: return 50; 
break;
case 20: return 33; 
break;
case 21: return 34; 
break;
case 22: return 36; 
break;
case 23: return 38; 
break;
case 24: return 9; 
break;
case 25: return 11; 
break;
case 26: return 61; 
break;
case 27: return 62; 
break;
case 28: return 66; 
break;
case 29: return 41; 
break;
case 30: return 40; 
break;
case 31: return 48; 
break;
case 32: return 45; 
break;
case 33: return 48; 
break;
case 34: return 45; 
break;
case 35: return 12; 
break;
case 36: return 4; 
break;
case 37: return 4; 
break;
case 38: return 4; 
break;
case 39: return 4; 
break;
case 40: return 5; 
break;
case 41: return 4; 
break;
case 42: return 4; 
break;
case 43: return 4; 
break;
case 44: return 4; 
break;
case 45: return 4; 
break;
case 46: return 4; 
break;
case 47: return 4; 
break;
case 48: return 55; 
break;
case 49: return 57; 
break;
case 50: return 7; 
break;
}
},
rules: [/^(?:$)/,/^(?:\/+\[\s*((#.*)?\n+)*\s*)/,/^(?:\.\/+\[\s*((#.*)?\n+)*\s*)/,/^(?:\.\.\/+\[\s*((#.*)?\n+)*\s*)/,/^(?:\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\/+\.\.)/,/^(?:\/+\.)/,/^(?:\.\.\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\.\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\.\.\/+)/,/^(?:\.\/+)/,/^(?:\/\/+)/,/^(?:\$)/,/^(?:'(\\.|[^\\'])*'|"(\\.|[^\\"])*")/,/^(?:\.)/,/^(?:\s*((#.*)?\n+)*\s*->\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*and\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*or\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*)/,/^(?:\s*\|\s*)/,/^(?:\(\s*)/,/^(?:\s*\))/,/^(?:\{\s*((#.*)?\n+)*\s*)/,/^(?:\s*\})/,/^(?:\[\s*((#.*)?\n+)*\s*)/,/^(?:\s*\])/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:and\s*)/,/^(?:or\s*)/,/^(?:\s+and\s+)/,/^(?:\s+or\s+)/,/^(?:[+-]?[0-9]+(\.[0-9]*)?([Ee][+-]?[0-9]+)?)/,/^(?:[\u4e00-\u9fa5_a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9]*)/,/^(?:\+)/,/^(?:\*)/,/^(?:-)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:\s+:=\s+)/,/^(?:\s+=\s+)/,/^(?:\s+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammer;
exports.Parser = grammer.Parser;
exports.parse = function () { return grammer.parse.apply(grammer, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}