/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammer = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"VAR":3,"var":4,"DIV":5,"FUNC_ARGS":6,"SEP":7,"PropertyField":8,"[":9,"STRING_LITERAL":10,"]":11,"NAT":12,"Field":13,"MultiLineExpr":14,"Object":15,".":16,"Property":17,"PrimaryExpr":18,"NEWLINE":19,"PropertyList":20,"DirItem":21,"DIRITEM":22,"CURRENT_DIRITEM_BRACKET":23,"PARENT_DIRITEM_BRACKET":24,"DIRITEM_BRACKET":25,"PATH":26,"Slashes":27,"ROOT":28,"Path":29,"PARENT_PATH":30,"CURRENT_PATH":31,"OPENPARAN":32,"CLOSEPARAN":33,"FUNC_ARROW":34,"{":35,"FUNC_BODY":36,"}":37,"ArrayLiteral":38,"FALSE":39,"TRUE":40,"MultiLineSEP":41,"OptMultiLineSEP":42,"MultiLineOR":43,"OR":44,"NLOR":45,"MultiLineAND":46,"AND":47,"NLAND":48,"VBAR":49,"Expr":50,"NullableSourceElements":51,"ExprStatement":52,"DefStatement":53,"DEF":54,"AssignStatement":55,"ASSIGN_OPERATOR":56,"OptSEP":57,"IfCaseStatement":58,"IfStatementNoNL":59,"IF":60,"ELSE":61,"IfStatement":62,"EmptyStatement":63,"WhileStatement":64,"WHILE":65,"BreakStatement":66,"BREAK":67,"Statement":68,"SourceElements":69,"Program":70,"EOF":71,"$accept":0,"$end":1},
terminals_: {2:"error",4:"var",5:"DIV",7:"SEP",9:"[",10:"STRING_LITERAL",11:"]",12:"NAT",16:".",19:"NEWLINE",22:"DIRITEM",23:"CURRENT_DIRITEM_BRACKET",24:"PARENT_DIRITEM_BRACKET",25:"DIRITEM_BRACKET",28:"ROOT",30:"PARENT_PATH",31:"CURRENT_PATH",32:"OPENPARAN",33:"CLOSEPARAN",34:"FUNC_ARROW",35:"{",37:"}",39:"FALSE",40:"TRUE",44:"OR",45:"NLOR",47:"AND",48:"NLAND",49:"VBAR",54:"DEF",56:"ASSIGN_OPERATOR",60:"IF",61:"ELSE",65:"WHILE",67:"BREAK",71:"EOF"},
productions_: [0,[3,1],[3,1],[6,1],[6,3],[8,1],[8,3],[8,3],[8,1],[13,1],[13,3],[13,1],[15,1],[15,3],[17,3],[17,3],[20,2],[20,4],[20,2],[20,4],[21,1],[21,3],[21,3],[21,3],[26,1],[26,2],[27,1],[27,1],[29,1],[29,1],[29,1],[29,1],[29,2],[18,7],[18,6],[18,3],[18,2],[18,3],[18,2],[18,3],[18,2],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[38,1],[38,3],[38,2],[38,3],[41,1],[41,1],[42,0],[42,1],[43,1],[43,1],[46,1],[46,1],[14,1],[14,2],[14,3],[14,3],[14,3],[14,5],[14,5],[14,3],[50,1],[50,3],[50,3],[50,3],[50,4],[50,4],[50,3],[36,1],[36,1],[52,2],[53,4],[55,4],[57,0],[57,1],[58,6],[58,7],[59,2],[59,8],[59,6],[62,2],[63,1],[64,8],[66,2],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[51,0],[51,1],[69,1],[69,2],[70,0],[70,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
				this.$ = [[$$[$0], '{atomic}', '{var}']];
			
break;
case 4:
				$$[$0-2].push([$$[$0], '{atomic}', '{var}']);
				this.$ = $$[$0-2];
			
break;
case 5:
				this.$ = [$$[$0], "{atomic}"];
			
break;
case 6:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 7:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 8:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 9:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 10:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 11:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 12:
				this.$ = [$$[$0], '{atomic}', '{var}'];
			
break;
case 13:
				this.$ = [$$[$0-2], '{.}', $$[$0]];
			
break;
case 14:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 15:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 16:
				this.$ = [$$[$0]];
			
break;
case 17:
				$$[$0-3].push($$[$0]);
				this.$ = $$[$0-3];
			
break;
case 19:
				$$[$0-3].push($$[$0]);
				this.$ = $$[$0-3];
			
break;
case 20:
				this.$ = [$$[$0], '{path_item}'];
			
break;
case 21:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', './'];
			
break;
case 22:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', '../'];
			
break;
case 23:
				this.$ = [makeExpr($$[$0-1]), '{path_arg_item}', ''];
			
break;
case 24:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 25:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 29:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 30:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 31:
				this.$ = [[$$[$0]], '{path}'];
			
break;
case 33:
				this.$ = [$$[$0-5], '{func}', $$[$0-1]];
			
break;
case 34:
				this.$ = [[], '{func}', $$[$0-1]];
			
break;
case 35:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 36:
				this.$ = [[], '{object}'];
			
break;
case 37:
				this.$ = [$$[$0-1], '{object}'];
			
break;
case 38:
				this.$ = [[], '{array}'];
			
break;
case 39:
				this.$ = [$$[$0-1], '{array}'];
			
break;
case 40:
				this.$ = [$$[$0], '{method}']
			
break;
case 42:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 43:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 44:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 45:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 47:
				this.$ = [$$[$0]];
			
break;
case 48:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 50:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 59:
				this.$ = [$$[$0]];
			
break;
case 61:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 62:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 63:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 64:
				this.$ = [makeExpr($$[$0-4]), 'and', makeExpr($$[$0])];
			
break;
case 65:
				this.$ = [makeExpr($$[$0-4]), 'or', makeExpr($$[$0])];
			
break;
case 66:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 67:
				this.$ = [$$[$0]];
			
break;
case 68:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 69:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 70:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 71:
				this.$ = [makeExpr($$[$0-3]), 'and', makeExpr($$[$0])];
			
break;
case 72:
				this.$ = [makeExpr($$[$0-3]), 'or', makeExpr($$[$0])];
			
break;
case 73:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 75:
				this.$ = makeExpr($$[$0]);
			
break;
case 76:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 77:
				this.$ = [[$$[$0-3], '{atomic}', '{var}'], ':=', makeExpr($$[$0-1])];
			
break;
case 78:
				this.$ = [$$[$0-3], '=', makeExpr($$[$0-1])];
			
break;
case 81:
				this.$ = [[makeExpr($$[$0-4]), $$[$0-1]]];
			
break;
case 82:
				$$[$0-6].push([makeExpr($$[$0-4]), $$[$0-1]]);
				this.$ = $$[$0-6]
			
break;
case 83:
				this.$ = [$$[$0], 'if'];
			
break;
case 84:
				$$[$0-6].push([$$[$0-1], 'else']);
				this.$ = [$$[$0-6], 'if'];
			
break;
case 85:
				$$[$0-4].push($$[$0]);
				this.$ = [$$[$0-4], 'if'];
			
break;
case 87:
				this.$ = [[], '{empty}'];
			
break;
case 88:
				this.$ = [makeExpr($$[$0-5]), 'while', $$[$0-2]]
			
break;
case 89:
				this.$ = [[], 'break']
			
break;
case 97:
				this.$ = [[], '{seq}'];
			
break;
case 99:
					this.$ = [[$$[$0]], '{seq}'];
			
break;
case 100:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 101:
				this.$ = [[], '{start}'];
				//lixlib.compile(this.$);
				return this.$;
			
break;
case 102:
				this.$ = [$$[$0-1], '{start}'];
				//lixlib.compile(this.$);
				return this.$;
			
break;
}
},
table: [{1:[2,101],3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28],50:11,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:3,69:2,70:1},{1:[3]},{3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28],50:11,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:41,71:[1,40]},{4:[2,99],5:[2,99],9:[2,99],10:[2,99],12:[2,99],16:[2,99],19:[2,99],22:[2,99],23:[2,99],24:[2,99],25:[2,99],28:[2,99],30:[2,99],31:[2,99],32:[2,99],35:[2,99],37:[2,99],39:[2,99],40:[2,99],60:[2,99],65:[2,99],67:[2,99],71:[2,99]},{4:[2,90],5:[2,90],9:[2,90],10:[2,90],12:[2,90],16:[2,90],19:[2,90],22:[2,90],23:[2,90],24:[2,90],25:[2,90],28:[2,90],30:[2,90],31:[2,90],32:[2,90],35:[2,90],37:[2,90],39:[2,90],40:[2,90],60:[2,90],65:[2,90],67:[2,90],71:[2,90]},{4:[2,91],5:[2,91],9:[2,91],10:[2,91],12:[2,91],16:[2,91],19:[2,91],22:[2,91],23:[2,91],24:[2,91],25:[2,91],28:[2,91],30:[2,91],31:[2,91],32:[2,91],35:[2,91],37:[2,91],39:[2,91],40:[2,91],60:[2,91],65:[2,91],67:[2,91],71:[2,91]},{4:[2,92],5:[2,92],9:[2,92],10:[2,92],12:[2,92],16:[2,92],19:[2,92],22:[2,92],23:[2,92],24:[2,92],25:[2,92],28:[2,92],30:[2,92],31:[2,92],32:[2,92],35:[2,92],37:[2,92],39:[2,92],40:[2,92],60:[2,92],65:[2,92],67:[2,92],71:[2,92]},{4:[2,93],5:[2,93],9:[2,93],10:[2,93],12:[2,93],16:[2,93],19:[2,93],22:[2,93],23:[2,93],24:[2,93],25:[2,93],28:[2,93],30:[2,93],31:[2,93],32:[2,93],35:[2,93],37:[2,93],39:[2,93],40:[2,93],60:[2,93],65:[2,93],67:[2,93],71:[2,93]},{4:[2,94],5:[2,94],9:[2,94],10:[2,94],12:[2,94],16:[2,94],19:[2,94],22:[2,94],23:[2,94],24:[2,94],25:[2,94],28:[2,94],30:[2,94],31:[2,94],32:[2,94],35:[2,94],37:[2,94],39:[2,94],40:[2,94],60:[2,94],65:[2,94],67:[2,94],71:[2,94]},{4:[2,95],5:[2,95],9:[2,95],10:[2,95],12:[2,95],16:[2,95],19:[2,95],22:[2,95],23:[2,95],24:[2,95],25:[2,95],28:[2,95],30:[2,95],31:[2,95],32:[2,95],35:[2,95],37:[2,95],39:[2,95],40:[2,95],60:[2,95],65:[2,95],67:[2,95],71:[2,95]},{4:[2,96],5:[2,96],9:[2,96],10:[2,96],12:[2,96],16:[2,96],19:[2,96],22:[2,96],23:[2,96],24:[2,96],25:[2,96],28:[2,96],30:[2,96],31:[2,96],32:[2,96],35:[2,96],37:[2,96],39:[2,96],40:[2,96],60:[2,96],65:[2,96],67:[2,96],71:[2,96]},{7:[1,43],19:[1,42],49:[1,44]},{7:[2,41],16:[1,46],19:[2,41],37:[2,41],44:[2,41],47:[2,41],49:[2,41],56:[1,45]},{7:[2,12],16:[2,12],19:[2,12],37:[2,12],44:[2,12],47:[2,12],49:[2,12],54:[1,47],56:[2,12]},{19:[1,48]},{7:[1,49]},{19:[1,50]},{4:[2,87],5:[2,87],9:[2,87],10:[2,87],12:[2,87],16:[2,87],19:[2,87],22:[2,87],23:[2,87],24:[2,87],25:[2,87],28:[2,87],30:[2,87],31:[2,87],32:[2,87],35:[2,87],37:[2,87],39:[2,87],40:[2,87],60:[2,87],65:[2,87],67:[2,87],71:[2,87]},{7:[2,67],19:[2,67],37:[2,67],44:[1,52],47:[1,51],49:[2,67]},{7:[2,1],11:[2,1],16:[2,1],19:[2,1],33:[2,1],35:[2,1],37:[2,1],44:[2,1],45:[2,1],47:[2,1],48:[2,1],49:[2,1],54:[2,1],56:[2,1]},{7:[2,2],11:[2,2],16:[2,2],19:[2,2],33:[2,2],35:[2,2],37:[2,2],44:[2,2],45:[2,2],47:[2,2],48:[2,2],49:[2,2],54:[2,2],56:[2,2]},{4:[2,79],5:[2,79],7:[1,55],9:[2,79],10:[2,79],12:[2,79],16:[2,79],22:[2,79],23:[2,79],24:[2,79],25:[2,79],28:[2,79],30:[2,79],31:[2,79],32:[2,79],35:[2,79],39:[2,79],40:[2,79],57:54,58:53},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],14:56,15:59,16:[1,25],18:58,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],33:[1,57],35:[1,23],39:[1,27],40:[1,28]},{16:[1,63],20:62,37:[1,61]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],11:[1,64],12:[1,26],15:59,16:[1,25],18:66,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],38:65,39:[1,27],40:[1,28]},{3:68,4:[1,19],5:[1,20],8:67,9:[1,69],12:[1,70]},{7:[2,42],11:[2,42],19:[2,42],33:[2,42],35:[2,42],37:[2,42],44:[2,42],45:[2,42],47:[2,42],48:[2,42],49:[2,42]},{7:[2,43],11:[2,43],19:[2,43],33:[2,43],35:[2,43],37:[2,43],44:[2,43],45:[2,43],47:[2,43],48:[2,43],49:[2,43]},{7:[2,44],11:[2,44],19:[2,44],33:[2,44],35:[2,44],37:[2,44],44:[2,44],45:[2,44],47:[2,44],48:[2,44],49:[2,44]},{7:[2,45],11:[2,45],19:[2,45],33:[2,45],35:[2,45],37:[2,45],44:[2,45],45:[2,45],47:[2,45],48:[2,45],49:[2,45]},{5:[1,72],7:[2,46],11:[2,46],19:[2,46],27:71,28:[1,73],33:[2,46],35:[2,46],37:[2,46],44:[2,46],45:[2,46],47:[2,46],48:[2,46],49:[2,46]},{5:[2,28],7:[2,28],11:[2,28],19:[2,28],21:74,22:[1,36],23:[1,37],24:[1,38],25:[1,39],28:[2,28],33:[2,28],35:[2,28],37:[2,28],44:[2,28],45:[2,28],47:[2,28],48:[2,28],49:[2,28]},{5:[2,29],7:[2,29],11:[2,29],19:[2,29],28:[2,29],33:[2,29],35:[2,29],37:[2,29],44:[2,29],45:[2,29],47:[2,29],48:[2,29],49:[2,29]},{5:[2,30],7:[2,30],11:[2,30],19:[2,30],28:[2,30],33:[2,30],35:[2,30],37:[2,30],44:[2,30],45:[2,30],47:[2,30],48:[2,30],49:[2,30]},{5:[2,31],7:[2,31],11:[2,31],19:[2,31],28:[2,31],33:[2,31],35:[2,31],37:[2,31],44:[2,31],45:[2,31],47:[2,31],48:[2,31],49:[2,31]},{5:[2,24],7:[2,24],11:[2,24],19:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],28:[2,24],33:[2,24],35:[2,24],37:[2,24],44:[2,24],45:[2,24],47:[2,24],48:[2,24],49:[2,24]},{5:[2,20],7:[2,20],11:[2,20],19:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],28:[2,20],33:[2,20],35:[2,20],37:[2,20],44:[2,20],45:[2,20],47:[2,20],48:[2,20],49:[2,20]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],14:75,15:59,16:[1,25],18:58,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],14:76,15:59,16:[1,25],18:58,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],14:77,15:59,16:[1,25],18:58,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{1:[2,102]},{4:[2,100],5:[2,100],9:[2,100],10:[2,100],12:[2,100],16:[2,100],19:[2,100],22:[2,100],23:[2,100],24:[2,100],25:[2,100],28:[2,100],30:[2,100],31:[2,100],32:[2,100],35:[2,100],37:[2,100],39:[2,100],40:[2,100],60:[2,100],65:[2,100],67:[2,100],71:[2,100]},{4:[2,76],5:[2,76],9:[2,76],10:[2,76],12:[2,76],16:[2,76],19:[2,76],22:[2,76],23:[2,76],24:[2,76],25:[2,76],28:[2,76],30:[2,76],31:[2,76],32:[2,76],35:[2,76],37:[2,76],39:[2,76],40:[2,76],60:[2,76],65:[2,76],67:[2,76],71:[2,76]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:78,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:18,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28],44:[1,80],47:[1,79],50:81},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:18,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28],50:82},{3:84,4:[1,19],5:[1,20],9:[1,85],12:[1,86],13:83},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:18,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28],50:87},{4:[2,86],5:[2,86],9:[2,86],10:[2,86],12:[2,86],16:[2,86],19:[2,86],22:[2,86],23:[2,86],24:[2,86],25:[2,86],28:[2,86],30:[2,86],31:[2,86],32:[2,86],35:[2,86],37:[2,86],39:[2,86],40:[2,86],60:[2,86],65:[2,86],67:[2,86],71:[2,86]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:88,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{4:[2,89],5:[2,89],9:[2,89],10:[2,89],12:[2,89],16:[2,89],19:[2,89],22:[2,89],23:[2,89],24:[2,89],25:[2,89],28:[2,89],30:[2,89],31:[2,89],32:[2,89],35:[2,89],37:[2,89],39:[2,89],40:[2,89],60:[2,89],65:[2,89],67:[2,89],71:[2,89]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:89,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:90,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{4:[2,79],5:[2,79],7:[1,55],9:[2,79],10:[2,79],12:[2,79],16:[2,79],19:[2,83],22:[2,79],23:[2,79],24:[2,79],25:[2,79],28:[2,79],30:[2,79],31:[2,79],32:[2,79],35:[2,79],39:[2,79],40:[2,79],57:91,61:[2,79]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:92,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{4:[2,80],5:[2,80],9:[2,80],10:[2,80],12:[2,80],16:[2,80],22:[2,80],23:[2,80],24:[2,80],25:[2,80],28:[2,80],30:[2,80],31:[2,80],32:[2,80],35:[2,80],39:[2,80],40:[2,80],60:[2,80],61:[2,80]},{7:[1,97],19:[1,94],33:[1,93],41:95,49:[1,96]},{34:[1,98]},{7:[2,59],11:[2,59],19:[2,59],33:[2,59],43:100,44:[1,103],45:[1,104],46:99,47:[1,101],48:[1,102],49:[2,59]},{7:[2,41],11:[2,41],16:[1,46],19:[2,41],33:[2,41],35:[2,41],37:[2,41],44:[2,41],45:[2,41],47:[2,41],48:[2,41],49:[2,41]},{7:[2,12],11:[2,12],16:[2,12],19:[2,12],33:[2,12],35:[2,12],37:[2,12],44:[2,12],45:[2,12],47:[2,12],48:[2,12],49:[2,12]},{7:[2,36],11:[2,36],19:[2,36],33:[2,36],35:[2,36],37:[2,36],44:[2,36],45:[2,36],47:[2,36],48:[2,36],49:[2,36]},{7:[1,106],19:[1,107],37:[1,105]},{3:68,4:[1,19],5:[1,20],8:109,9:[1,69],12:[1,70],17:108},{7:[2,38],11:[2,38],19:[2,38],33:[2,38],35:[2,38],37:[2,38],44:[2,38],45:[2,38],47:[2,38],48:[2,38],49:[2,38]},{7:[1,111],11:[1,110],19:[1,112]},{7:[2,47],11:[2,47],19:[2,47]},{7:[2,40],11:[2,40],19:[2,40],33:[2,40],35:[2,40],37:[2,40],44:[2,40],45:[2,40],47:[2,40],48:[2,40],49:[2,40]},{7:[2,5],11:[2,5],19:[2,5],33:[2,5],35:[2,5],37:[2,5],44:[2,5],45:[2,5],47:[2,5],48:[2,5],49:[2,5]},{10:[1,113],12:[1,114]},{7:[2,8],11:[2,8],19:[2,8],33:[2,8],35:[2,8],37:[2,8],44:[2,8],45:[2,8],47:[2,8],48:[2,8],49:[2,8]},{5:[2,32],7:[2,32],11:[2,32],19:[2,32],28:[2,32],33:[2,32],35:[2,32],37:[2,32],44:[2,32],45:[2,32],47:[2,32],48:[2,32],49:[2,32]},{5:[2,26],7:[2,26],11:[2,26],19:[2,26],28:[2,26],33:[2,26],35:[2,26],37:[2,26],44:[2,26],45:[2,26],47:[2,26],48:[2,26],49:[2,26]},{5:[2,27],7:[2,27],11:[2,27],19:[2,27],28:[2,27],33:[2,27],35:[2,27],37:[2,27],44:[2,27],45:[2,27],47:[2,27],48:[2,27],49:[2,27]},{5:[2,25],7:[2,25],11:[2,25],19:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],28:[2,25],33:[2,25],35:[2,25],37:[2,25],44:[2,25],45:[2,25],47:[2,25],48:[2,25],49:[2,25]},{7:[1,97],11:[1,115],19:[1,94],41:95,49:[1,96]},{7:[1,97],11:[1,116],19:[1,94],41:95,49:[1,96]},{7:[1,97],11:[1,117],19:[1,94],41:95,49:[1,96]},{7:[2,68],19:[2,68],37:[2,68],49:[2,68]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:118,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:119,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{7:[1,43],19:[2,73],37:[2,73],49:[2,73]},{7:[1,43],19:[1,120],49:[1,44]},{7:[2,13],11:[2,13],16:[2,13],19:[2,13],33:[2,13],35:[2,13],37:[2,13],44:[2,13],45:[2,13],47:[2,13],48:[2,13],49:[2,13],56:[2,13]},{7:[2,9],11:[2,9],16:[2,9],19:[2,9],33:[2,9],35:[2,9],37:[2,9],44:[2,9],45:[2,9],47:[2,9],48:[2,9],49:[2,9],56:[2,9]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],14:121,15:59,16:[1,25],18:58,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{7:[2,11],11:[2,11],16:[2,11],19:[2,11],33:[2,11],35:[2,11],37:[2,11],44:[2,11],45:[2,11],47:[2,11],48:[2,11],49:[2,11],56:[2,11]},{7:[1,43],19:[1,122],49:[1,44]},{7:[1,123]},{7:[2,69],19:[2,69],37:[2,69],49:[2,69]},{7:[2,70],19:[2,70],37:[2,70],49:[2,70]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:125,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28],61:[1,124]},{7:[1,55],35:[2,79],57:126},{7:[2,35],11:[2,35],19:[2,35],33:[2,35],34:[1,127],35:[2,35],37:[2,35],44:[2,35],45:[2,35],47:[2,35],48:[2,35],49:[2,35]},{4:[2,52],5:[2,52],7:[2,60],9:[2,52],10:[2,52],11:[2,60],12:[2,52],16:[2,52],19:[2,60],22:[2,52],23:[2,52],24:[2,52],25:[2,52],28:[2,52],30:[2,52],31:[2,52],32:[2,52],33:[2,60],35:[2,52],39:[2,52],40:[2,52],49:[2,60]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:128,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],14:131,15:59,16:[1,25],18:58,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28],43:130,44:[1,103],45:[1,104],46:129,47:[1,101],48:[1,102]},{4:[2,51],5:[2,51],9:[2,51],10:[2,51],12:[2,51],16:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],28:[2,51],30:[2,51],31:[2,51],32:[2,51],35:[2,51],39:[2,51],40:[2,51]},{35:[1,132]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:133,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:134,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{4:[2,57],5:[2,57],7:[2,57],9:[2,57],10:[2,57],12:[2,57],16:[2,57],19:[2,57],22:[2,57],23:[2,57],24:[2,57],25:[2,57],28:[2,57],30:[2,57],31:[2,57],32:[2,57],35:[2,57],39:[2,57],40:[2,57]},{4:[2,58],5:[2,58],7:[2,58],9:[2,58],10:[2,58],12:[2,58],16:[2,58],19:[2,58],22:[2,58],23:[2,58],24:[2,58],25:[2,58],28:[2,58],30:[2,58],31:[2,58],32:[2,58],35:[2,58],39:[2,58],40:[2,58]},{4:[2,55],5:[2,55],7:[2,55],9:[2,55],10:[2,55],12:[2,55],16:[2,55],19:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],28:[2,55],30:[2,55],31:[2,55],32:[2,55],35:[2,55],39:[2,55],40:[2,55]},{4:[2,56],5:[2,56],7:[2,56],9:[2,56],10:[2,56],12:[2,56],16:[2,56],19:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],28:[2,56],30:[2,56],31:[2,56],32:[2,56],35:[2,56],39:[2,56],40:[2,56]},{7:[2,37],11:[2,37],19:[2,37],33:[2,37],35:[2,37],37:[2,37],44:[2,37],45:[2,37],47:[2,37],48:[2,37],49:[2,37]},{16:[1,135]},{7:[2,18],16:[1,136],19:[2,18],37:[2,18]},{7:[2,16],19:[2,16],37:[2,16]},{7:[1,137],19:[1,138]},{7:[2,39],11:[2,39],19:[2,39],33:[2,39],35:[2,39],37:[2,39],44:[2,39],45:[2,39],47:[2,39],48:[2,39],49:[2,39]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:139,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],7:[2,49],9:[1,24],10:[1,29],11:[2,49],12:[1,26],15:59,16:[1,25],18:140,19:[2,49],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{11:[1,141]},{11:[1,142]},{5:[2,21],7:[2,21],11:[2,21],19:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],28:[2,21],33:[2,21],35:[2,21],37:[2,21],44:[2,21],45:[2,21],47:[2,21],48:[2,21],49:[2,21]},{5:[2,22],7:[2,22],11:[2,22],19:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],28:[2,22],33:[2,22],35:[2,22],37:[2,22],44:[2,22],45:[2,22],47:[2,22],48:[2,22],49:[2,22]},{5:[2,23],7:[2,23],11:[2,23],19:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],28:[2,23],33:[2,23],35:[2,23],37:[2,23],44:[2,23],45:[2,23],47:[2,23],48:[2,23],49:[2,23]},{7:[2,71],19:[2,71],37:[2,71],49:[2,71]},{7:[2,72],19:[2,72],37:[2,72],49:[2,72]},{4:[2,78],5:[2,78],9:[2,78],10:[2,78],12:[2,78],16:[2,78],19:[2,78],22:[2,78],23:[2,78],24:[2,78],25:[2,78],28:[2,78],30:[2,78],31:[2,78],32:[2,78],35:[2,78],37:[2,78],39:[2,78],40:[2,78],60:[2,78],65:[2,78],67:[2,78],71:[2,78]},{7:[1,97],11:[1,143],19:[1,94],41:95,49:[1,96]},{4:[2,77],5:[2,77],9:[2,77],10:[2,77],12:[2,77],16:[2,77],19:[2,77],22:[2,77],23:[2,77],24:[2,77],25:[2,77],28:[2,77],30:[2,77],31:[2,77],32:[2,77],35:[2,77],37:[2,77],39:[2,77],40:[2,77],60:[2,77],65:[2,77],67:[2,77],71:[2,77]},{35:[1,144]},{7:[1,55],35:[2,79],57:145,60:[2,79]},{7:[1,55],35:[2,79],57:146},{35:[1,147]},{35:[1,148]},{7:[2,61],11:[2,61],19:[2,61],33:[2,61],49:[2,61]},{4:[2,53],5:[2,53],7:[1,97],9:[2,53],10:[2,53],12:[2,53],16:[2,53],19:[1,151],22:[2,53],23:[2,53],24:[2,53],25:[2,53],28:[2,53],30:[2,53],31:[2,53],32:[2,53],35:[2,53],39:[2,53],40:[2,53],41:150,42:149},{4:[2,53],5:[2,53],7:[1,97],9:[2,53],10:[2,53],12:[2,53],16:[2,53],19:[1,151],22:[2,53],23:[2,53],24:[2,53],25:[2,53],28:[2,53],30:[2,53],31:[2,53],32:[2,53],35:[2,53],39:[2,53],40:[2,53],41:150,42:152},{7:[1,97],11:[2,66],19:[2,66],33:[2,66],41:95,49:[2,66]},{3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],36:153,37:[2,97],39:[1,27],40:[1,28],50:155,51:154,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:3,69:156},{7:[2,62],11:[2,62],19:[2,62],33:[2,62],49:[2,62]},{7:[2,63],11:[2,63],19:[2,63],33:[2,63],49:[2,63]},{3:68,4:[1,19],5:[1,20],8:109,9:[1,69],12:[1,70],17:157},{3:68,4:[1,19],5:[1,20],8:109,9:[1,69],12:[1,70],17:158},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:159,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:160,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{7:[2,48],11:[2,48],19:[2,48]},{7:[2,50],11:[2,50],19:[2,50]},{7:[2,6],11:[2,6],19:[2,6],33:[2,6],35:[2,6],37:[2,6],44:[2,6],45:[2,6],47:[2,6],48:[2,6],49:[2,6]},{7:[2,7],11:[2,7],19:[2,7],33:[2,7],35:[2,7],37:[2,7],44:[2,7],45:[2,7],47:[2,7],48:[2,7],49:[2,7]},{7:[2,10],11:[2,10],16:[2,10],19:[2,10],33:[2,10],35:[2,10],37:[2,10],44:[2,10],45:[2,10],47:[2,10],48:[2,10],49:[2,10],56:[2,10]},{3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],37:[2,97],39:[1,27],40:[1,28],50:11,51:161,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:3,69:156},{35:[1,162],59:163,60:[1,21]},{35:[1,164]},{3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],37:[2,97],39:[1,27],40:[1,28],50:11,51:165,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:3,69:156},{3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],36:166,37:[2,97],39:[1,27],40:[1,28],50:155,51:154,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:3,69:156},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:167,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{4:[2,54],5:[2,54],9:[2,54],10:[2,54],12:[2,54],16:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],28:[2,54],30:[2,54],31:[2,54],32:[2,54],35:[2,54],39:[2,54],40:[2,54]},{4:[2,52],5:[2,52],9:[2,52],10:[2,52],12:[2,52],16:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],28:[2,52],30:[2,52],31:[2,52],32:[2,52],35:[2,52],39:[2,52],40:[2,52]},{3:60,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:59,16:[1,25],18:168,21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],39:[1,27],40:[1,28]},{37:[1,169]},{37:[2,74]},{7:[1,43],19:[1,42],37:[2,75],49:[1,44]},{3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],37:[2,98],39:[1,27],40:[1,28],50:11,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:41},{7:[2,17],19:[2,17],37:[2,17]},{7:[2,19],19:[2,19],37:[2,19]},{7:[2,14],19:[2,14],37:[2,14]},{7:[2,15],19:[2,15],37:[2,15]},{37:[1,170]},{3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],37:[2,97],39:[1,27],40:[1,28],50:11,51:171,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:3,69:156},{19:[2,85]},{3:13,4:[1,19],5:[1,20],9:[1,24],10:[1,29],12:[1,26],15:12,16:[1,25],18:18,19:[1,17],21:35,22:[1,36],23:[1,37],24:[1,38],25:[1,39],26:31,28:[1,32],29:30,30:[1,33],31:[1,34],32:[1,22],35:[1,23],37:[2,97],39:[1,27],40:[1,28],50:11,51:172,52:4,53:6,55:5,59:14,60:[1,21],62:7,63:10,64:8,65:[1,15],66:9,67:[1,16],68:3,69:156},{37:[1,173]},{37:[1,174]},{7:[2,64],11:[2,64],19:[2,64],33:[2,64],49:[2,64]},{7:[2,65],11:[2,65],19:[2,65],33:[2,65],49:[2,65]},{7:[2,34],11:[2,34],19:[2,34],33:[2,34],35:[2,34],37:[2,34],44:[2,34],45:[2,34],47:[2,34],48:[2,34],49:[2,34]},{19:[1,175]},{37:[1,176]},{37:[1,177]},{4:[2,81],5:[2,81],7:[2,81],9:[2,81],10:[2,81],12:[2,81],16:[2,81],19:[2,81],22:[2,81],23:[2,81],24:[2,81],25:[2,81],28:[2,81],30:[2,81],31:[2,81],32:[2,81],35:[2,81],39:[2,81],40:[2,81],61:[2,81]},{7:[2,33],11:[2,33],19:[2,33],33:[2,33],35:[2,33],37:[2,33],44:[2,33],45:[2,33],47:[2,33],48:[2,33],49:[2,33]},{4:[2,88],5:[2,88],9:[2,88],10:[2,88],12:[2,88],16:[2,88],19:[2,88],22:[2,88],23:[2,88],24:[2,88],25:[2,88],28:[2,88],30:[2,88],31:[2,88],32:[2,88],35:[2,88],37:[2,88],39:[2,88],40:[2,88],60:[2,88],65:[2,88],67:[2,88],71:[2,88]},{19:[2,84]},{4:[2,82],5:[2,82],7:[2,82],9:[2,82],10:[2,82],12:[2,82],16:[2,82],19:[2,82],22:[2,82],23:[2,82],24:[2,82],25:[2,82],28:[2,82],30:[2,82],31:[2,82],32:[2,82],35:[2,82],39:[2,82],40:[2,82],61:[2,82]}],
defaultActions: {40:[2,102],154:[2,74],163:[2,85],176:[2,84]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function makeExpr(expr) {
		if (expr.length === 1) {
			expr.push("{mono}");
		}
		return expr;
	}
//	lixlib = require("./lixlib.js");
//	lixlib = require("./lib.lix.js");
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 71; 
break;
case 1: return 25; 
break;
case 2: return 23; 
break;
case 3: return 24; 
break;
case 4:	return 22; 
break;
case 5:	return 22; 
break;
case 6:	return 22; 
break;
case 7:	return 22; 
break;
case 8:	return 22; 
break;
case 9:	return 30; 
break;
case 10:	return 31; 
break;
case 11:	return 28; 
break;
case 12: return 10; 
break;
case 13: return 16; 
break;
case 14: return 34; 
break;
case 15: return 48; 
break;
case 16: return 45; 
break;
case 17: return 19; 
break;
case 18: return 49; 
break;
case 19: return 32; 
break;
case 20: return 33; 
break;
case 21: return 35; 
break;
case 22: return 37; 
break;
case 23: return 9; 
break;
case 24: return 11; 
break;
case 25: return 60; 
break;
case 26: return 61; 
break;
case 27: return 65; 
break;
case 28: return 67; 
break;
case 29: return 40; 
break;
case 30: return 39; 
break;
case 31: return 47; 
break;
case 32: return 44; 
break;
case 33: return 47; 
break;
case 34: return 44; 
break;
case 35: return 12; 
break;
case 36: return 4; 
break;
case 37: return 4; 
break;
case 38: return 4; 
break;
case 39: return 4; 
break;
case 40: return 5; 
break;
case 41: return 4; 
break;
case 42: return 4; 
break;
case 43: return 4; 
break;
case 44: return 4; 
break;
case 45: return 4; 
break;
case 46: return 4; 
break;
case 47: return 4; 
break;
case 48: return 54; 
break;
case 49: return 56; 
break;
case 50: return 7; 
break;
}
},
rules: [/^(?:$)/,/^(?:\/+\[\s*((#.*)?\n+)*\s*)/,/^(?:\.\/+\[\s*((#.*)?\n+)*\s*)/,/^(?:\.\.\/+\[\s*((#.*)?\n+)*\s*)/,/^(?:\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\/+\.\.)/,/^(?:\/+\.)/,/^(?:\.\.\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\.\/+[\-.\u4e00-\u9fa5_a-zA-Z0-9]+)/,/^(?:\.\.\/+)/,/^(?:\.\/+)/,/^(?:\/\/+)/,/^(?:'(\\.|[^\\'])*'|"(\\.|[^\\"])*")/,/^(?:\.)/,/^(?:\s*((#.*)?\n+)*\s*->\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*and\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*or\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*)/,/^(?:\s*\|\s*)/,/^(?:\(\s*)/,/^(?:\s*\))/,/^(?:\{\s*((#.*)?\n+)*\s*)/,/^(?:\s*\})/,/^(?:\[\s*((#.*)?\n+)*\s*)/,/^(?:\s*\])/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:and\s*)/,/^(?:or\s*)/,/^(?:\s+and\s+)/,/^(?:\s+or\s+)/,/^(?:[+-]?[0-9]+(\.[0-9]*)?([Ee][+-]?[0-9]+)?)/,/^(?:[\u4e00-\u9fa5_a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9]*)/,/^(?:\+)/,/^(?:\*)/,/^(?:-)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:\s+:=\s+)/,/^(?:\s+=\s+)/,/^(?:\s+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammer;
exports.Parser = grammer.Parser;
exports.parse = function () { return grammer.parse.apply(grammer, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}