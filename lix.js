/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lix = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"FUNC_ARGS":3,"VAR":4,"SEP":5,"PropertyField":6,"[":7,"STRING_LITERAL":8,"]":9,"NAT":10,"Field":11,"MultiLineExpr":12,"Object":13,".":14,"Property":15,"PrimaryExpr":16,"NEWLINE":17,"PropertyList":18,"OPENPARAN":19,"CLOSEPARAN":20,"FUNC_ARROW":21,"{":22,"FUNC_BODY":23,"}":24,"ArrayLiteral":25,"FALSE":26,"TRUE":27,"MultiLineSEP":28,"OptMultiLineSEP":29,"MultiLineOR":30,"OR":31,"NLOR":32,"MultiLineAND":33,"AND":34,"NLAND":35,"VBAR":36,"Expr":37,"SourceElements":38,"ExprStatement":39,"DefStatement":40,"DEF":41,"AssignStatement":42,"ASSIGN_OPERATOR":43,"OptSEP":44,"IfCaseStatement":45,"NullableSourceElements":46,"IfStatementNoNL":47,"IF":48,"ELSE":49,"IfStatement":50,"EmptyStatement":51,"Statement":52,"Program":53,"EOF":54,"$accept":0,"$end":1},
terminals_: {2:"error",4:"VAR",5:"SEP",7:"[",8:"STRING_LITERAL",9:"]",10:"NAT",14:".",17:"NEWLINE",19:"OPENPARAN",20:"CLOSEPARAN",21:"FUNC_ARROW",22:"{",24:"}",26:"FALSE",27:"TRUE",31:"OR",32:"NLOR",34:"AND",35:"NLAND",36:"VBAR",41:"DEF",43:"ASSIGN_OPERATOR",48:"IF",49:"ELSE",54:"EOF"},
productions_: [0,[3,1],[3,3],[6,1],[6,3],[6,3],[6,1],[11,1],[11,3],[11,1],[13,1],[13,3],[15,3],[15,3],[18,2],[18,4],[18,2],[18,4],[16,7],[16,6],[16,3],[16,2],[16,3],[16,2],[16,3],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[25,1],[25,3],[25,2],[25,3],[28,1],[28,1],[29,0],[29,1],[30,1],[30,1],[33,1],[33,1],[12,1],[12,2],[12,3],[12,3],[12,3],[12,5],[12,5],[12,3],[37,1],[37,3],[37,3],[37,3],[37,4],[37,4],[37,3],[23,0],[23,1],[23,1],[39,2],[40,4],[42,4],[44,0],[44,1],[45,6],[45,7],[47,2],[47,8],[47,6],[50,2],[51,1],[52,1],[52,1],[52,1],[52,1],[52,1],[46,0],[46,1],[38,1],[38,2],[53,0],[53,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
				this.$ = [[$$[$0], '{atomic}', '{var}']];
			
break;
case 2:
				$$[$0-2].push([$$[$0], '{atomic}', '{var}']);
				this.$ = $$[$0-2];
			
break;
case 3:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 4:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 5:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 6:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 7:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 8:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 9:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 10:
				this.$ = [$$[$0], '{atomic}', '{var}'];
			
break;
case 11:
				this.$ = [$$[$0-2], '{.}', $$[$0]];
			
break;
case 12:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 13:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 14:
				this.$ = [$$[$0]];
			
break;
case 15:
				$$[$0-3].push($$[$0]);
				this.$ = $$[$0-3];
			
break;
case 17:
				$$[$0-3].push($$[$0]);
				this.$ = $$[$0-3];
			
break;
case 18:
				this.$ = [$$[$0-5], '{func}', $$[$0-1]];
			
break;
case 19:
				this.$ = [[], '{func}', $$[$0-1]];
			
break;
case 20:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 21:
				this.$ = [[], '{object}'];
			
break;
case 22:
				this.$ = [$$[$0-1], '{object}'];
			
break;
case 23:
				this.$ = [[], '{array}'];
			
break;
case 24:
				this.$ = [$$[$0-1], '{array}'];
			
break;
case 25:
				this.$ = [$$[$0], '{method}']
			
break;
case 27:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 28:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 29:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 30:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 31:
				this.$ = [$$[$0]];
			
break;
case 32:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 34:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 43:
				this.$ = [$$[$0]];
			
break;
case 45:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 46:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 47:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 48:
				this.$ = [makeExpr($$[$0-4]), 'and', makeExpr($$[$0])];
			
break;
case 49:
				this.$ = [makeExpr($$[$0-4]), 'or', makeExpr($$[$0])];
			
break;
case 50:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 51:
				this.$ = [$$[$0]];
			
break;
case 52:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 53:
				this.$ = [makeExpr($$[$0-2]), 'and', makeExpr($$[$0])];
			
break;
case 54:
				this.$ = [makeExpr($$[$0-2]), 'or', makeExpr($$[$0])];
			
break;
case 55:
				this.$ = [makeExpr($$[$0-3]), 'and', makeExpr($$[$0])];
			
break;
case 56:
				this.$ = [makeExpr($$[$0-3]), 'or', makeExpr($$[$0])];
			
break;
case 57:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 59:
				this.$ = makeExpr($$[$0]);
			
break;
case 61:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 62:
				this.$ = [[$$[$0-3], '{atomic}', '{var}'], ':=', makeExpr($$[$0-1])];
			
break;
case 63:
				this.$ = [$$[$0-3], '=', makeExpr($$[$0-1])];
			
break;
case 66:
				this.$ = [[makeExpr($$[$0-4]), $$[$0-1]]];
			
break;
case 67:
				$$[$0-6].push([makeExpr($$[$0-4]), $$[$0-1]]);
				this.$ = $$[$0-6]
			
break;
case 68:
				this.$ = [$$[$0], 'if'];
			
break;
case 69:
				$$[$0-6].push([$$[$0-1], 'else']);
				this.$ = [$$[$0-6], 'if'];
			
break;
case 70:
				$$[$0-4].push($$[$0]);
				this.$ = [$$[$0-4], 'if'];
			
break;
case 72:
				this.$ = [[], '{empty}'];
			
break;
case 78:
				this.$ = [[], '{seq}'];
			
break;
case 80:
					this.$ = [[$$[$0]], '{seq}'];
			
break;
case 81:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 83:
				this.$ = [$$[$0-1], '{start}'];
				lixlib.compile(this.$);
			
break;
}
},
table: [{1:[2,82],4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],26:[1,21],27:[1,22],37:9,38:2,39:4,40:6,42:5,47:12,48:[1,15],50:7,51:8,52:3,53:1},{1:[3]},{4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],26:[1,21],27:[1,22],37:9,39:4,40:6,42:5,47:12,48:[1,15],50:7,51:8,52:25,54:[1,24]},{4:[2,80],7:[2,80],8:[2,80],10:[2,80],14:[2,80],17:[2,80],19:[2,80],22:[2,80],24:[2,80],26:[2,80],27:[2,80],48:[2,80],54:[2,80]},{4:[2,73],7:[2,73],8:[2,73],10:[2,73],14:[2,73],17:[2,73],19:[2,73],22:[2,73],24:[2,73],26:[2,73],27:[2,73],48:[2,73],54:[2,73]},{4:[2,74],7:[2,74],8:[2,74],10:[2,74],14:[2,74],17:[2,74],19:[2,74],22:[2,74],24:[2,74],26:[2,74],27:[2,74],48:[2,74],54:[2,74]},{4:[2,75],7:[2,75],8:[2,75],10:[2,75],14:[2,75],17:[2,75],19:[2,75],22:[2,75],24:[2,75],26:[2,75],27:[2,75],48:[2,75],54:[2,75]},{4:[2,76],7:[2,76],8:[2,76],10:[2,76],14:[2,76],17:[2,76],19:[2,76],22:[2,76],24:[2,76],26:[2,76],27:[2,76],48:[2,76],54:[2,76]},{4:[2,77],7:[2,77],8:[2,77],10:[2,77],14:[2,77],17:[2,77],19:[2,77],22:[2,77],24:[2,77],26:[2,77],27:[2,77],48:[2,77],54:[2,77]},{5:[1,27],17:[1,26],36:[1,28]},{5:[2,26],14:[1,30],17:[2,26],24:[2,26],31:[2,26],34:[2,26],36:[2,26],43:[1,29]},{5:[2,10],14:[2,10],17:[2,10],24:[2,10],31:[2,10],34:[2,10],36:[2,10],41:[1,31],43:[2,10]},{17:[1,32]},{4:[2,72],7:[2,72],8:[2,72],10:[2,72],14:[2,72],17:[2,72],19:[2,72],22:[2,72],24:[2,72],26:[2,72],27:[2,72],48:[2,72],54:[2,72]},{5:[2,51],17:[2,51],24:[2,51],31:[1,34],34:[1,33],36:[2,51]},{4:[2,64],5:[1,37],7:[2,64],8:[2,64],10:[2,64],14:[2,64],19:[2,64],22:[2,64],26:[2,64],27:[2,64],44:36,45:35},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],12:38,13:41,14:[1,19],16:40,19:[1,16],20:[1,39],22:[1,17],26:[1,21],27:[1,22]},{14:[1,45],18:44,24:[1,43]},{4:[1,42],7:[1,18],8:[1,23],9:[1,46],10:[1,20],13:41,14:[1,19],16:48,19:[1,16],22:[1,17],25:47,26:[1,21],27:[1,22]},{4:[1,50],6:49,7:[1,51],10:[1,52]},{5:[2,27],9:[2,27],17:[2,27],20:[2,27],22:[2,27],24:[2,27],31:[2,27],32:[2,27],34:[2,27],35:[2,27],36:[2,27]},{5:[2,28],9:[2,28],17:[2,28],20:[2,28],22:[2,28],24:[2,28],31:[2,28],32:[2,28],34:[2,28],35:[2,28],36:[2,28]},{5:[2,29],9:[2,29],17:[2,29],20:[2,29],22:[2,29],24:[2,29],31:[2,29],32:[2,29],34:[2,29],35:[2,29],36:[2,29]},{5:[2,30],9:[2,30],17:[2,30],20:[2,30],22:[2,30],24:[2,30],31:[2,30],32:[2,30],34:[2,30],35:[2,30],36:[2,30]},{1:[2,83]},{4:[2,81],7:[2,81],8:[2,81],10:[2,81],14:[2,81],17:[2,81],19:[2,81],22:[2,81],24:[2,81],26:[2,81],27:[2,81],48:[2,81],54:[2,81]},{4:[2,61],7:[2,61],8:[2,61],10:[2,61],14:[2,61],17:[2,61],19:[2,61],22:[2,61],24:[2,61],26:[2,61],27:[2,61],48:[2,61],54:[2,61]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:53,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:14,19:[1,16],22:[1,17],26:[1,21],27:[1,22],31:[1,55],34:[1,54],37:56},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:14,19:[1,16],22:[1,17],26:[1,21],27:[1,22],37:57},{4:[1,59],7:[1,60],10:[1,61],11:58},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:14,19:[1,16],22:[1,17],26:[1,21],27:[1,22],37:62},{4:[2,71],7:[2,71],8:[2,71],10:[2,71],14:[2,71],17:[2,71],19:[2,71],22:[2,71],24:[2,71],26:[2,71],27:[2,71],48:[2,71],54:[2,71]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:63,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:64,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[2,64],5:[1,37],7:[2,64],8:[2,64],10:[2,64],14:[2,64],17:[2,68],19:[2,64],22:[2,64],26:[2,64],27:[2,64],44:65,49:[2,64]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:66,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[2,65],7:[2,65],8:[2,65],10:[2,65],14:[2,65],19:[2,65],22:[2,65],26:[2,65],27:[2,65],48:[2,65],49:[2,65]},{5:[1,71],17:[1,68],20:[1,67],28:69,36:[1,70]},{21:[1,72]},{5:[2,43],9:[2,43],17:[2,43],20:[2,43],30:74,31:[1,77],32:[1,78],33:73,34:[1,75],35:[1,76],36:[2,43]},{5:[2,26],9:[2,26],14:[1,30],17:[2,26],20:[2,26],22:[2,26],24:[2,26],31:[2,26],32:[2,26],34:[2,26],35:[2,26],36:[2,26]},{5:[2,10],9:[2,10],14:[2,10],17:[2,10],20:[2,10],22:[2,10],24:[2,10],31:[2,10],32:[2,10],34:[2,10],35:[2,10],36:[2,10]},{5:[2,21],9:[2,21],17:[2,21],20:[2,21],22:[2,21],24:[2,21],31:[2,21],32:[2,21],34:[2,21],35:[2,21],36:[2,21]},{5:[1,80],17:[1,81],24:[1,79]},{4:[1,50],6:83,7:[1,51],10:[1,52],15:82},{5:[2,23],9:[2,23],17:[2,23],20:[2,23],22:[2,23],24:[2,23],31:[2,23],32:[2,23],34:[2,23],35:[2,23],36:[2,23]},{5:[1,85],9:[1,84],17:[1,86]},{5:[2,31],9:[2,31],17:[2,31]},{5:[2,25],9:[2,25],17:[2,25],20:[2,25],22:[2,25],24:[2,25],31:[2,25],32:[2,25],34:[2,25],35:[2,25],36:[2,25]},{5:[2,3],9:[2,3],17:[2,3],20:[2,3],22:[2,3],24:[2,3],31:[2,3],32:[2,3],34:[2,3],35:[2,3],36:[2,3]},{8:[1,87],10:[1,88]},{5:[2,6],9:[2,6],17:[2,6],20:[2,6],22:[2,6],24:[2,6],31:[2,6],32:[2,6],34:[2,6],35:[2,6],36:[2,6]},{5:[2,52],17:[2,52],24:[2,52],36:[2,52]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:89,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:90,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{5:[1,27],17:[2,57],24:[2,57],36:[2,57]},{5:[1,27],17:[1,91],36:[1,28]},{5:[2,11],9:[2,11],14:[2,11],17:[2,11],20:[2,11],22:[2,11],24:[2,11],31:[2,11],32:[2,11],34:[2,11],35:[2,11],36:[2,11],43:[2,11]},{5:[2,7],9:[2,7],14:[2,7],17:[2,7],20:[2,7],22:[2,7],24:[2,7],31:[2,7],32:[2,7],34:[2,7],35:[2,7],36:[2,7],43:[2,7]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],12:92,13:41,14:[1,19],16:40,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{5:[2,9],9:[2,9],14:[2,9],17:[2,9],20:[2,9],22:[2,9],24:[2,9],31:[2,9],32:[2,9],34:[2,9],35:[2,9],36:[2,9],43:[2,9]},{5:[1,27],17:[1,93],36:[1,28]},{5:[2,53],17:[2,53],24:[2,53],36:[2,53]},{5:[2,54],17:[2,54],24:[2,54],36:[2,54]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:95,19:[1,16],22:[1,17],26:[1,21],27:[1,22],49:[1,94]},{5:[1,37],22:[2,64],44:96},{5:[2,20],9:[2,20],17:[2,20],20:[2,20],21:[1,97],22:[2,20],24:[2,20],31:[2,20],32:[2,20],34:[2,20],35:[2,20],36:[2,20]},{4:[2,36],5:[2,44],7:[2,36],8:[2,36],9:[2,44],10:[2,36],14:[2,36],17:[2,44],19:[2,36],20:[2,44],22:[2,36],26:[2,36],27:[2,36],36:[2,44]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:98,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],12:101,13:41,14:[1,19],16:40,19:[1,16],22:[1,17],26:[1,21],27:[1,22],30:100,31:[1,77],32:[1,78],33:99,34:[1,75],35:[1,76]},{4:[2,35],7:[2,35],8:[2,35],10:[2,35],14:[2,35],19:[2,35],22:[2,35],26:[2,35],27:[2,35]},{22:[1,102]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:103,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:104,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[2,41],5:[2,41],7:[2,41],8:[2,41],10:[2,41],14:[2,41],17:[2,41],19:[2,41],22:[2,41],26:[2,41],27:[2,41]},{4:[2,42],5:[2,42],7:[2,42],8:[2,42],10:[2,42],14:[2,42],17:[2,42],19:[2,42],22:[2,42],26:[2,42],27:[2,42]},{4:[2,39],5:[2,39],7:[2,39],8:[2,39],10:[2,39],14:[2,39],17:[2,39],19:[2,39],22:[2,39],26:[2,39],27:[2,39]},{4:[2,40],5:[2,40],7:[2,40],8:[2,40],10:[2,40],14:[2,40],17:[2,40],19:[2,40],22:[2,40],26:[2,40],27:[2,40]},{5:[2,22],9:[2,22],17:[2,22],20:[2,22],22:[2,22],24:[2,22],31:[2,22],32:[2,22],34:[2,22],35:[2,22],36:[2,22]},{14:[1,105]},{5:[2,16],14:[1,106],17:[2,16],24:[2,16]},{5:[2,14],17:[2,14],24:[2,14]},{5:[1,107],17:[1,108]},{5:[2,24],9:[2,24],17:[2,24],20:[2,24],22:[2,24],24:[2,24],31:[2,24],32:[2,24],34:[2,24],35:[2,24],36:[2,24]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:109,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[1,42],5:[2,33],7:[1,18],8:[1,23],9:[2,33],10:[1,20],13:41,14:[1,19],16:110,17:[2,33],19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{9:[1,111]},{9:[1,112]},{5:[2,55],17:[2,55],24:[2,55],36:[2,55]},{5:[2,56],17:[2,56],24:[2,56],36:[2,56]},{4:[2,63],7:[2,63],8:[2,63],10:[2,63],14:[2,63],17:[2,63],19:[2,63],22:[2,63],24:[2,63],26:[2,63],27:[2,63],48:[2,63],54:[2,63]},{5:[1,71],9:[1,113],17:[1,68],28:69,36:[1,70]},{4:[2,62],7:[2,62],8:[2,62],10:[2,62],14:[2,62],17:[2,62],19:[2,62],22:[2,62],24:[2,62],26:[2,62],27:[2,62],48:[2,62],54:[2,62]},{5:[1,37],22:[2,64],44:114,48:[2,64]},{5:[1,37],22:[2,64],44:115},{22:[1,116]},{22:[1,117]},{5:[2,45],9:[2,45],17:[2,45],20:[2,45],36:[2,45]},{4:[2,37],5:[1,71],7:[2,37],8:[2,37],10:[2,37],14:[2,37],17:[1,120],19:[2,37],22:[2,37],26:[2,37],27:[2,37],28:119,29:118},{4:[2,37],5:[1,71],7:[2,37],8:[2,37],10:[2,37],14:[2,37],17:[1,120],19:[2,37],22:[2,37],26:[2,37],27:[2,37],28:119,29:121},{5:[1,71],9:[2,50],17:[2,50],20:[2,50],28:69,36:[2,50]},{4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],23:122,24:[2,58],26:[1,21],27:[1,22],37:123,38:124,39:4,40:6,42:5,47:12,48:[1,15],50:7,51:8,52:3},{5:[2,46],9:[2,46],17:[2,46],20:[2,46],36:[2,46]},{5:[2,47],9:[2,47],17:[2,47],20:[2,47],36:[2,47]},{4:[1,50],6:83,7:[1,51],10:[1,52],15:125},{4:[1,50],6:83,7:[1,51],10:[1,52],15:126},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:127,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:128,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{5:[2,32],9:[2,32],17:[2,32]},{5:[2,34],9:[2,34],17:[2,34]},{5:[2,4],9:[2,4],17:[2,4],20:[2,4],22:[2,4],24:[2,4],31:[2,4],32:[2,4],34:[2,4],35:[2,4],36:[2,4]},{5:[2,5],9:[2,5],17:[2,5],20:[2,5],22:[2,5],24:[2,5],31:[2,5],32:[2,5],34:[2,5],35:[2,5],36:[2,5]},{5:[2,8],9:[2,8],14:[2,8],17:[2,8],20:[2,8],22:[2,8],24:[2,8],31:[2,8],32:[2,8],34:[2,8],35:[2,8],36:[2,8],43:[2,8]},{22:[1,129],47:130,48:[1,15]},{22:[1,131]},{4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],24:[2,78],26:[1,21],27:[1,22],37:9,38:133,39:4,40:6,42:5,46:132,47:12,48:[1,15],50:7,51:8,52:3},{4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],23:134,24:[2,58],26:[1,21],27:[1,22],37:123,38:124,39:4,40:6,42:5,47:12,48:[1,15],50:7,51:8,52:3},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:135,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{4:[2,38],7:[2,38],8:[2,38],10:[2,38],14:[2,38],19:[2,38],22:[2,38],26:[2,38],27:[2,38]},{4:[2,36],7:[2,36],8:[2,36],10:[2,36],14:[2,36],19:[2,36],22:[2,36],26:[2,36],27:[2,36]},{4:[1,42],7:[1,18],8:[1,23],10:[1,20],13:41,14:[1,19],16:136,19:[1,16],22:[1,17],26:[1,21],27:[1,22]},{24:[1,137]},{5:[1,27],17:[1,26],24:[2,59],36:[1,28]},{4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],24:[2,60],26:[1,21],27:[1,22],37:9,39:4,40:6,42:5,47:12,48:[1,15],50:7,51:8,52:25},{5:[2,15],17:[2,15],24:[2,15]},{5:[2,17],17:[2,17],24:[2,17]},{5:[2,12],17:[2,12],24:[2,12]},{5:[2,13],17:[2,13],24:[2,13]},{4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],24:[2,78],26:[1,21],27:[1,22],37:9,38:133,39:4,40:6,42:5,46:138,47:12,48:[1,15],50:7,51:8,52:3},{17:[2,70]},{4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],24:[2,78],26:[1,21],27:[1,22],37:9,38:133,39:4,40:6,42:5,46:139,47:12,48:[1,15],50:7,51:8,52:3},{24:[1,140]},{4:[1,11],7:[1,18],8:[1,23],10:[1,20],13:10,14:[1,19],16:14,17:[1,13],19:[1,16],22:[1,17],24:[2,79],26:[1,21],27:[1,22],37:9,39:4,40:6,42:5,47:12,48:[1,15],50:7,51:8,52:25},{24:[1,141]},{5:[2,48],9:[2,48],17:[2,48],20:[2,48],36:[2,48]},{5:[2,49],9:[2,49],17:[2,49],20:[2,49],36:[2,49]},{5:[2,19],9:[2,19],17:[2,19],20:[2,19],22:[2,19],24:[2,19],31:[2,19],32:[2,19],34:[2,19],35:[2,19],36:[2,19]},{24:[1,142]},{24:[1,143]},{4:[2,66],5:[2,66],7:[2,66],8:[2,66],10:[2,66],14:[2,66],17:[2,66],19:[2,66],22:[2,66],26:[2,66],27:[2,66],49:[2,66]},{5:[2,18],9:[2,18],17:[2,18],20:[2,18],22:[2,18],24:[2,18],31:[2,18],32:[2,18],34:[2,18],35:[2,18],36:[2,18]},{17:[2,69]},{4:[2,67],5:[2,67],7:[2,67],8:[2,67],10:[2,67],14:[2,67],17:[2,67],19:[2,67],22:[2,67],26:[2,67],27:[2,67],49:[2,67]}],
defaultActions: {24:[2,83],130:[2,70],142:[2,69]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function makeExpr(expr) {
		if (expr.length === 1) {
			expr.push('{mono}');
		}
		return expr;
	}
	lixlib = require("./lixlib.js");
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 54; 
break;
case 1: return 8; 
break;
case 2: return 14; 
break;
case 3: return 21; 
break;
case 4: return 35; 
break;
case 5: return 32; 
break;
case 6: return 17; 
break;
case 7: return 36; 
break;
case 8: return 19; 
break;
case 9: return 20; 
break;
case 10: return 22; 
break;
case 11: return 24; 
break;
case 12: return 7; 
break;
case 13: return 9; 
break;
case 14: return 48; 
break;
case 15: return 49; 
break;
case 16: return 27; 
break;
case 17: return 26; 
break;
case 18: return 34; 
break;
case 19: return 31; 
break;
case 20: return 34; 
break;
case 21: return 31; 
break;
case 22: return 10; 
break;
case 23: return 4; 
break;
case 24: return 4; 
break;
case 25: return 4; 
break;
case 26: return 4; 
break;
case 27: return 4; 
break;
case 28: return 4; 
break;
case 29: return 4; 
break;
case 30: return 4; 
break;
case 31: return 4; 
break;
case 32: return 4; 
break;
case 33: return 4; 
break;
case 34: return 41; 
break;
case 35: return 43; 
break;
case 36: return 5; 
break;
}
},
rules: [/^(?:$)/,/^(?:'(\\.|[^\\'])*'|"(\\.|[^\\"])*")/,/^(?:\.)/,/^(?:\s*((#.*)?\n+)*\s*->\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*and\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*or\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)+\s*)/,/^(?:\s*\|\s*)/,/^(?:\(\s*)/,/^(?:\s*\))/,/^(?:\{\s*((#.*)?\n+)*\s*)/,/^(?:\s*\})/,/^(?:\[\s*((#.*)?\n+)*\s*)/,/^(?:\s*\])/,/^(?:if\b)/,/^(?:else\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:and\s*)/,/^(?:or\s*)/,/^(?:\s+and\s+)/,/^(?:\s+or\s+)/,/^(?:[+-]?[0-9]+(\.[0-9]*)?([Ee][+-]?[0-9]+)?)/,/^(?:[\u4e00-\u9fa5_a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9]*)/,/^(?:\+)/,/^(?:\*)/,/^(?:-)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:<=)/,/^(?:<)/,/^(?:\s+:=\s+)/,/^(?:\s+=\s+)/,/^(?:\s+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lix;
exports.Parser = lix.Parser;
exports.parse = function () { return lix.parse.apply(lix, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}