/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lix = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"OPENBRACE":3,"{":4,"CLOSEBRACE":5,"}":6,"FUNC_ARGS":7,"VAR":8,"SEP":9,"PropertyField":10,"[":11,"STRING_LITERAL":12,"]":13,"NAT":14,"Field":15,"MultiLineExpr":16,"Object":17,".":18,"Property":19,"PrimaryExpr":20,"NEWLINE":21,"PropertyList":22,"SEPDOT":23,"OPENPARAN":24,"CLOSEPARAN":25,"FUNC_ARROW":26,"FUNC_BODY":27,"ArrayLiteral":28,"MultiLineBasicExpr":29,"MultiLineSEP":30,"BasicExpr":31,"MultiLineDOT":32,"NLDOT":33,"MultiLineDOTAfterVar":34,"VBAR":35,"Expr":36,"SourceElements":37,"ExprStatement":38,"DefStatement":39,"DEF":40,"AssignStatement":41,"ASSIGN_OPERATOR":42,"EmptyStatement":43,"Statement":44,"Program":45,"EOF":46,"$accept":0,"$end":1},
terminals_: {2:"error",4:"{",6:"}",8:"VAR",9:"SEP",11:"[",12:"STRING_LITERAL",13:"]",14:"NAT",18:".",21:"NEWLINE",23:"SEPDOT",24:"OPENPARAN",25:"CLOSEPARAN",26:"FUNC_ARROW",33:"NLDOT",35:"VBAR",40:"DEF",42:"ASSIGN_OPERATOR",46:"EOF"},
productions_: [0,[3,1],[5,1],[7,1],[7,3],[10,1],[10,3],[10,3],[10,1],[15,1],[15,3],[15,1],[17,1],[17,3],[19,3],[19,3],[22,2],[22,3],[22,4],[22,2],[22,4],[20,7],[20,6],[20,3],[20,2],[20,3],[20,2],[20,3],[20,1],[20,1],[20,1],[28,1],[28,3],[28,2],[28,3],[29,1],[29,2],[29,3],[31,1],[31,3],[32,1],[32,1],[34,1],[34,1],[30,1],[30,1],[16,1],[16,3],[16,4],[16,5],[16,3],[16,4],[16,5],[16,6],[36,1],[36,3],[36,5],[36,3],[36,4],[36,6],[27,0],[27,1],[27,1],[38,2],[39,4],[41,4],[43,1],[44,1],[44,1],[44,1],[44,1],[37,1],[37,2],[45,0],[45,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
				this.$ = [[$$[$0], '{atomic}']];
			
break;
case 4:
				$$[$0-2].push([$$[$0], '{atomic}']);
				this.$ = $$[$0-2];
			
break;
case 5:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 6:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 7:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 8:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 9:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 10:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 11:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 12:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 13:
				this.$ = [$$[$0-2], '{.}', $$[$0]];
			
break;
case 14:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 15:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 16:
				this.$ = [$$[$0]];
			
break;
case 17:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 18:
				$$[$0-3].push($$[$0]);
				this.$ = $$[$0-3];
			
break;
case 20:
				$$[$0-3].push($$[$0]);
				this.$ = $$[$0-3];
			
break;
case 21:
				this.$ = [$$[$0-5], '{func}', $$[$0-1]];
			
break;
case 22:
				this.$ = [[], '{func}', $$[$0-1]];
			
break;
case 23:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 24:
				this.$ = [[], '{object}'];
			
break;
case 25:
				this.$ = [$$[$0-1], '{object}'];
			
break;
case 26:
				this.$ = [[], '{array}'];
			
break;
case 27:
				this.$ = [$$[$0-1], '{array}'];
			
break;
case 29:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 30:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 31:
				this.$ = [$$[$0]];
			
break;
case 32:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 34:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 35:
				this.$ = [$$[$0]];
			
break;
case 37:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 38:
				this.$ = [$$[$0]];
			
break;
case 39:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 47:
				this.$ = [[$$[$0-2], $$[$0]], '{method}'];
			
break;
case 48:
				this.$ = [[$$[$0-3], $$[$0-1]], '{method}'];
			
break;
case 49:
				this.$ = [[$$[$0-4], $$[$0-2]], '{method}'];
				for (var i = 0; i < $$[$0].length; i++) {
					this.$[0].push($$[$0][i]);
				}
			
break;
case 50:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 51:
				this.$ = [[makeExpr($$[$0-3]), $$[$0]], '{method}'];
			
break;
case 52:
				this.$ = [[makeExpr($$[$0-4]), $$[$0-1]], '{method}'];
			
break;
case 53:
				this.$ = [[makeExpr($$[$0-5]), $$[$0-2]], '{method}'];
				for (var i = 0; i < $$[$0].length; i++) {
					this.$[0].push($$[$0][i]);
				}
			
break;
case 55:
				this.$ = [[$$[$0-2], $$[$0]], '{method}'];
			
break;
case 56:
				this.$ = [[$$[$0-4], $$[$0-2]], '{method}'];
				for (var i = 0; i < $$[$0].length; i++) {
					this.$[0].push($$[$0][i]);
				}
			
break;
case 57:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 58:
				this.$ = [[makeExpr($$[$0-3]), $$[$0]], '{method}'];
			
break;
case 59:
				this.$ = [[makeExpr($$[$0-5]), $$[$0-2]], '{method}'];
				for (var i = 0; i < $$[$0].length; i++) {
					this.$[0].push($$[$0][i]);
				}
			
break;
case 61:
				this.$ = makeExpr($$[$0]);
			
break;
case 63:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 64:
				this.$ = [[$$[$0-3], '{atomic}'], ':=', makeExpr($$[$0-1])];
			
break;
case 65:
				this.$ = [$$[$0-3], '=', makeExpr($$[$0-1])];
			
break;
case 66:
				this.$ = [[], '{empty}'];
			
break;
case 71:
					this.$ = [[$$[$0]], '{seq}'];
			
break;
case 72:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 74:
				this.$ = [$$[$0-1], '{start}'];
				lixlib.compile(this.$);
			
break;
}
},
table: [{1:[2,73],4:[1,15],8:[1,10],11:[1,16],12:[1,18],14:[1,17],17:9,20:13,21:[1,11],24:[1,14],31:12,36:8,37:2,38:4,39:6,41:5,43:7,44:3,45:1},{1:[3]},{4:[1,15],8:[1,10],11:[1,16],12:[1,18],14:[1,17],17:9,20:13,21:[1,11],24:[1,14],31:12,36:8,38:4,39:6,41:5,43:7,44:20,46:[1,19]},{4:[2,71],6:[2,71],8:[2,71],11:[2,71],12:[2,71],14:[2,71],21:[2,71],24:[2,71],46:[2,71]},{4:[2,67],6:[2,67],8:[2,67],11:[2,67],12:[2,67],14:[2,67],21:[2,67],24:[2,67],46:[2,67]},{4:[2,68],6:[2,68],8:[2,68],11:[2,68],12:[2,68],14:[2,68],21:[2,68],24:[2,68],46:[2,68]},{4:[2,69],6:[2,69],8:[2,69],11:[2,69],12:[2,69],14:[2,69],21:[2,69],24:[2,69],46:[2,69]},{4:[2,70],6:[2,70],8:[2,70],11:[2,70],12:[2,70],14:[2,70],21:[2,70],24:[2,70],46:[2,70]},{21:[1,21],35:[1,22]},{6:[2,28],9:[2,28],18:[1,24],21:[2,28],23:[2,28],35:[2,28],42:[1,23]},{6:[2,12],9:[2,12],18:[2,12],21:[2,12],23:[2,12],35:[2,12],40:[1,25],42:[2,12]},{4:[2,66],6:[2,66],8:[2,66],11:[2,66],12:[2,66],14:[2,66],21:[2,66],24:[2,66],46:[2,66]},{6:[2,54],9:[1,26],21:[2,54],35:[2,54]},{6:[2,38],9:[2,38],21:[2,38],23:[1,27],35:[2,38]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],16:28,17:32,20:31,24:[1,14],25:[1,29],29:30},{6:[1,34],18:[1,36],22:35},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],13:[1,37],14:[1,17],17:32,20:39,24:[1,14],28:38},{6:[2,29],9:[2,29],13:[2,29],21:[2,29],23:[2,29],25:[2,29],33:[2,29],35:[2,29]},{6:[2,30],9:[2,30],13:[2,30],21:[2,30],23:[2,30],25:[2,30],33:[2,30],35:[2,30]},{1:[2,74]},{4:[2,72],6:[2,72],8:[2,72],11:[2,72],12:[2,72],14:[2,72],21:[2,72],24:[2,72],46:[2,72]},{4:[2,63],6:[2,63],8:[2,63],11:[2,63],12:[2,63],14:[2,63],21:[2,63],24:[2,63],46:[2,63]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,18:[1,41],20:42,24:[1,14],31:40},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:13,24:[1,14],31:12,36:43},{8:[1,45],11:[1,46],14:[1,47],15:44},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:13,24:[1,14],31:12,36:48},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:49,24:[1,14]},{8:[1,45],11:[1,46],14:[1,47],15:50},{25:[1,51],35:[1,52]},{26:[1,53]},{9:[1,56],13:[2,46],21:[1,54],25:[2,46],30:55,35:[2,46]},{9:[2,35],13:[2,35],21:[2,35],23:[1,59],25:[2,35],32:57,33:[1,58],35:[2,35]},{6:[2,28],9:[2,28],13:[2,28],18:[1,24],21:[2,28],23:[2,28],25:[2,28],33:[2,28],35:[2,28]},{6:[2,12],9:[2,12],13:[2,12],18:[2,12],21:[2,12],23:[2,12],25:[2,12],33:[2,12],35:[2,12]},{6:[2,24],9:[2,24],13:[2,24],21:[2,24],23:[2,24],25:[2,24],33:[2,24],35:[2,24]},{6:[1,60],9:[1,62],21:[1,63],23:[1,61]},{8:[1,66],10:65,11:[1,67],14:[1,68],19:64},{6:[2,26],9:[2,26],13:[2,26],21:[2,26],23:[2,26],25:[2,26],33:[2,26],35:[2,26]},{9:[1,70],13:[1,69],21:[1,71]},{9:[2,31],13:[2,31],21:[2,31]},{6:[2,57],9:[1,26],21:[2,57],35:[2,57]},{8:[1,45],11:[1,46],14:[1,47],15:72},{6:[2,38],9:[2,38],21:[2,38],35:[2,38]},{21:[1,73],35:[1,22]},{6:[2,13],9:[2,13],13:[2,13],18:[2,13],21:[2,13],23:[2,13],25:[2,13],33:[2,13],35:[2,13],42:[2,13]},{6:[2,9],9:[2,9],13:[2,9],18:[2,9],21:[2,9],23:[2,9],25:[2,9],33:[2,9],35:[2,9],42:[2,9]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],16:74,17:32,20:31,24:[1,14],29:30},{6:[2,11],9:[2,11],13:[2,11],18:[2,11],21:[2,11],23:[2,11],25:[2,11],33:[2,11],35:[2,11],42:[2,11]},{21:[1,75],35:[1,22]},{6:[2,39],9:[2,39],21:[2,39],35:[2,39]},{6:[2,55],9:[1,76],21:[2,55],35:[2,55]},{6:[2,23],9:[2,23],13:[2,23],21:[2,23],23:[2,23],25:[2,23],26:[1,77],33:[2,23],35:[2,23]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,18:[1,81],20:80,24:[1,14],29:78,33:[1,82],34:79},{4:[1,83]},{4:[2,45],8:[2,45],9:[2,36],11:[2,45],12:[2,45],13:[2,36],14:[2,45],21:[2,36],24:[2,45],25:[2,36],35:[2,36]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:84,24:[1,14]},{4:[2,44],8:[2,44],11:[2,44],12:[2,44],13:[2,44],14:[2,44],24:[2,44],25:[2,44],35:[2,44]},{8:[1,45],11:[1,46],14:[1,47],15:85},{8:[2,40],11:[2,40],14:[2,40]},{8:[2,41],11:[2,41],14:[2,41]},{6:[2,25],9:[2,25],13:[2,25],21:[2,25],23:[2,25],25:[2,25],33:[2,25],35:[2,25]},{8:[1,66],10:65,11:[1,67],14:[1,68],19:86},{18:[1,87]},{6:[2,19],9:[2,19],18:[1,88],21:[2,19],23:[2,19]},{6:[2,16],9:[2,16],21:[2,16],23:[2,16]},{9:[1,89],21:[1,90]},{9:[2,5],21:[2,5]},{12:[1,91],14:[1,92]},{9:[2,8],21:[2,8]},{6:[2,27],9:[2,27],13:[2,27],21:[2,27],23:[2,27],25:[2,27],33:[2,27],35:[2,27]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:93,24:[1,14]},{4:[1,15],8:[1,33],9:[2,33],11:[1,16],12:[1,18],13:[2,33],14:[1,17],17:32,20:94,21:[2,33],24:[1,14]},{6:[2,58],9:[1,95],21:[2,58],35:[2,58]},{4:[2,65],6:[2,65],8:[2,65],11:[2,65],12:[2,65],14:[2,65],21:[2,65],24:[2,65],46:[2,65]},{13:[1,96],35:[1,52]},{4:[2,64],6:[2,64],8:[2,64],11:[2,64],12:[2,64],14:[2,64],21:[2,64],24:[2,64],46:[2,64]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:42,24:[1,14],31:97},{4:[1,98]},{9:[1,56],13:[2,50],21:[1,54],25:[2,50],30:55,35:[2,50]},{8:[1,45],11:[1,46],14:[1,47],15:99},{9:[2,35],13:[2,35],21:[2,35],25:[2,35],35:[2,35]},{8:[2,42],11:[2,42],14:[2,42]},{8:[2,43],11:[2,43],14:[2,43]},{4:[1,15],6:[2,60],8:[1,10],11:[1,16],12:[1,18],14:[1,17],17:9,20:13,21:[1,11],24:[1,14],27:100,31:12,36:101,37:102,38:4,39:6,41:5,43:7,44:3},{9:[2,37],13:[2,37],21:[2,37],25:[2,37],35:[2,37]},{9:[1,56],13:[2,47],21:[1,104],25:[2,47],30:103,35:[2,47]},{6:[2,17],9:[2,17],21:[2,17],23:[2,17]},{8:[1,66],10:65,11:[1,67],14:[1,68],19:105},{8:[1,66],10:65,11:[1,67],14:[1,68],19:106},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:107,24:[1,14]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:108,24:[1,14]},{13:[1,109]},{13:[1,110]},{9:[2,32],13:[2,32],21:[2,32]},{9:[2,34],13:[2,34],21:[2,34]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],14:[1,17],17:32,20:42,24:[1,14],31:111},{6:[2,10],9:[2,10],13:[2,10],18:[2,10],21:[2,10],23:[2,10],25:[2,10],33:[2,10],35:[2,10],42:[2,10]},{6:[2,56],9:[1,26],21:[2,56],35:[2,56]},{4:[1,15],6:[2,60],8:[1,10],11:[1,16],12:[1,18],14:[1,17],17:9,20:13,21:[1,11],24:[1,14],27:112,31:12,36:101,37:102,38:4,39:6,41:5,43:7,44:3},{9:[1,56],13:[2,51],21:[1,104],25:[2,51],30:113,35:[2,51]},{6:[1,114]},{6:[2,61],21:[1,21],35:[1,22]},{4:[1,15],6:[2,62],8:[1,10],11:[1,16],12:[1,18],14:[1,17],17:9,20:13,21:[1,11],24:[1,14],31:12,36:8,38:4,39:6,41:5,43:7,44:20},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],13:[2,48],14:[1,17],17:32,20:80,24:[1,14],25:[2,48],29:115,35:[2,48]},{4:[2,45],8:[2,45],11:[2,45],12:[2,45],13:[2,45],14:[2,45],24:[2,45],25:[2,45],35:[2,45]},{6:[2,18],9:[2,18],21:[2,18],23:[2,18]},{6:[2,20],9:[2,20],21:[2,20],23:[2,20]},{6:[2,14],9:[2,14],21:[2,14],23:[2,14]},{6:[2,15],9:[2,15],21:[2,15],23:[2,15]},{9:[2,6],21:[2,6]},{9:[2,7],21:[2,7]},{6:[2,59],9:[1,26],21:[2,59],35:[2,59]},{6:[1,116]},{4:[1,15],8:[1,33],11:[1,16],12:[1,18],13:[2,52],14:[1,17],17:32,20:80,24:[1,14],25:[2,52],29:117,35:[2,52]},{6:[2,22],9:[2,22],13:[2,22],21:[2,22],23:[2,22],25:[2,22],33:[2,22],35:[2,22]},{9:[1,56],13:[2,49],21:[1,54],25:[2,49],30:55,35:[2,49]},{6:[2,21],9:[2,21],13:[2,21],21:[2,21],23:[2,21],25:[2,21],33:[2,21],35:[2,21]},{9:[1,56],13:[2,53],21:[1,54],25:[2,53],30:55,35:[2,53]}],
defaultActions: {19:[2,74]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function makeExpr(expr) {
		if (expr.length === 1) {
			expr.push('{mono}');
		}
		return expr;
	}
	lixlib = require("./lixlib.js");
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 46; 
break;
case 1: return 12; 
break;
case 2: return 18; 
break;
case 3: return 23; 
break;
case 4: return 33; 
break;
case 5: return 21; 
break;
case 6: return 24; 
break;
case 7: return 25; 
break;
case 8: return 4; 
break;
case 9: return 6; 
break;
case 10: return 11; 
break;
case 11: return 13; 
break;
case 12: return 26; 
break;
case 13: return 35; 
break;
case 14: return 40; 
break;
case 15: return 42; 
break;
case 16: return 8; 
break;
case 17: return 14; 
break;
case 18: return 9; 
break;
}
},
rules: [/^(?:$)/,/^(?:'(\\.|[^\\'])*'|"(\\.|[^\\"])*")/,/^(?:\.)/,/^(?:\s+\.)/,/^(?:\s*((#.*)?\n+)+\s*\.)/,/^(?:\s*((#.*)?\n+)+\s*)/,/^(?:\(\s*)/,/^(?:\s*\))/,/^(?:\{\s*((#.*)?\n+)*\s*)/,/^(?:\s*\})/,/^(?:\[\s*((#.*)?\n+)*\s*)/,/^(?:\s*\])/,/^(?:\s*->\s*)/,/^(?:\s*\|\s*)/,/^(?:\s*:=\s*)/,/^(?:\s*=\s*)/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:[0-9]+)/,/^(?:\s+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lix;
exports.Parser = lix.Parser;
exports.parse = function () { return lix.parse.apply(lix, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}