/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lix = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"OPENBRACE":3,"{":4,"CLOSEBRACE":5,"}":6,"FUNC_ARGS":7,"VAR":8,"SEP":9,"PropertyField":10,"[":11,"STRING_LITERAL":12,"]":13,"NAT":14,"Field":15,"MultiLineExpr":16,"Object":17,".":18,"Property":19,"PrimaryExpr":20,"NEWLINE":21,"PropertyList":22,"OPENPARAN":23,"CLOSEPARAN":24,"FUNC_ARROW":25,"FUNC_BODY":26,"ArrayLiteral":27,"VBAR":28,"Expr":29,"SourceElements":30,"ExprStatement":31,"DefStatement":32,"DEF":33,"AssignStatement":34,"ASSIGN_OPERATOR":35,"EmptyStatement":36,"Statement":37,"Program":38,"EOF":39,"$accept":0,"$end":1},
terminals_: {2:"error",4:"{",6:"}",8:"VAR",9:"SEP",11:"[",12:"STRING_LITERAL",13:"]",14:"NAT",18:".",21:"NEWLINE",23:"OPENPARAN",24:"CLOSEPARAN",25:"FUNC_ARROW",28:"VBAR",33:"DEF",35:"ASSIGN_OPERATOR",39:"EOF"},
productions_: [0,[3,1],[5,1],[7,1],[7,3],[10,1],[10,3],[10,3],[10,1],[15,1],[15,3],[15,1],[17,1],[17,3],[19,4],[19,4],[22,1],[22,3],[22,3],[20,7],[20,6],[20,3],[20,2],[20,3],[20,2],[20,3],[20,1],[20,1],[20,1],[27,1],[27,3],[27,2],[27,3],[16,1],[16,3],[16,2],[16,3],[16,3],[29,1],[29,3],[29,3],[26,0],[26,1],[26,1],[31,2],[32,4],[34,4],[36,1],[37,1],[37,1],[37,1],[37,1],[30,1],[30,2],[38,0],[38,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
				this.$ = [[$$[$0], '{atomic}']];
			
break;
case 4:
				$$[$0-2].push([$$[$0], '{atomic}']);
				this.$ = $$[$0-2];
			
break;
case 5:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 6:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 7:
				this.$ = [[$$[$0-1], '{atomic}'], '{index}'];
			
break;
case 8:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 9:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 10:
				this.$ = [makeExpr($$[$0-1]), '{index}'];
			
break;
case 11:
				this.$ = [[$$[$0], '{atomic}'], '{index}'];
			
break;
case 12:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 13:
				this.$ = [$$[$0-2], '{.}', $$[$0]];
			
break;
case 14:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 15:
				this.$ = [$$[$0-2], '{property}', makeExpr($$[$0])];
			
break;
case 16:
				this.$ = [$$[$0]];
			
break;
case 17:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 18:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 19:
				this.$ = [$$[$0-5], '{func}', $$[$0-1]];
			
break;
case 20:
				this.$ = [[], '{func}', $$[$0-1]];
			
break;
case 21:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 22:
				this.$ = [[], '{object}'];
			
break;
case 23:
				this.$ = [$$[$0-1], '{object}'];
			
break;
case 24:
				this.$ = [[], '{array}'];
			
break;
case 25:
				this.$ = [$$[$0-1], '{array}'];
			
break;
case 27:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 28:
				this.$ = [$$[$0], '{atomic}'];
			
break;
case 29:
				this.$ = [$$[$0]];
			
break;
case 30:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 32:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 33:
				this.$ = [$$[$0]];
			
break;
case 34:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 36:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 37:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 38:
				this.$ = [$$[$0]];
			
break;
case 39:
				$$[$0-2].push($$[$0]);
				this.$ = $$[$0-2];
			
break;
case 40:
				$$[$0].unshift(makeExpr($$[$0-2]));
				this.$ = $$[$0];
			
break;
case 42:
				this.$ = makeExpr($$[$0]);
			
break;
case 44:
				this.$ = makeExpr($$[$0-1]);
			
break;
case 45:
				this.$ = [[$$[$0-3], '{atomic}'], ':=', makeExpr($$[$0-1])];
			
break;
case 46:
				this.$ = [$$[$0-3], '=', makeExpr($$[$0-1])];
			
break;
case 47:
				this.$ = [[], '{empty}'];
			
break;
case 52:
					this.$ = [[$$[$0]], '{seq}'];
			
break;
case 53:
				$$[$0-1][0].push($$[$0]);
				this.$ = $$[$0-1];
			
break;
case 55:
				this.$ = [$$[$0-1], '{start}'];
				lixlib.compile(this.$);
			
break;
}
},
table: [{1:[2,54],4:[1,14],8:[1,10],11:[1,15],12:[1,17],14:[1,16],17:9,20:12,21:[1,11],23:[1,13],29:8,30:2,31:4,32:6,34:5,36:7,37:3,38:1},{1:[3]},{4:[1,14],8:[1,10],11:[1,15],12:[1,17],14:[1,16],17:9,20:12,21:[1,11],23:[1,13],29:8,31:4,32:6,34:5,36:7,37:19,39:[1,18]},{4:[2,52],6:[2,52],8:[2,52],11:[2,52],12:[2,52],14:[2,52],21:[2,52],23:[2,52],39:[2,52]},{4:[2,48],6:[2,48],8:[2,48],11:[2,48],12:[2,48],14:[2,48],21:[2,48],23:[2,48],39:[2,48]},{4:[2,49],6:[2,49],8:[2,49],11:[2,49],12:[2,49],14:[2,49],21:[2,49],23:[2,49],39:[2,49]},{4:[2,50],6:[2,50],8:[2,50],11:[2,50],12:[2,50],14:[2,50],21:[2,50],23:[2,50],39:[2,50]},{4:[2,51],6:[2,51],8:[2,51],11:[2,51],12:[2,51],14:[2,51],21:[2,51],23:[2,51],39:[2,51]},{9:[1,21],21:[1,20],28:[1,22]},{6:[2,26],9:[2,26],18:[1,24],21:[2,26],28:[2,26],35:[1,23]},{6:[2,12],9:[2,12],18:[2,12],21:[2,12],28:[2,12],33:[1,25],35:[2,12]},{4:[2,47],6:[2,47],8:[2,47],11:[2,47],12:[2,47],14:[2,47],21:[2,47],23:[2,47],39:[2,47]},{6:[2,38],9:[2,38],21:[2,38],28:[2,38]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],16:26,17:29,20:28,23:[1,13],24:[1,27]},{6:[1,31],18:[1,34],19:33,22:32},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],13:[1,35],14:[1,16],17:29,20:37,23:[1,13],27:36},{6:[2,27],9:[2,27],13:[2,27],21:[2,27],24:[2,27],28:[2,27]},{6:[2,28],9:[2,28],13:[2,28],21:[2,28],24:[2,28],28:[2,28]},{1:[2,55]},{4:[2,53],6:[2,53],8:[2,53],11:[2,53],12:[2,53],14:[2,53],21:[2,53],23:[2,53],39:[2,53]},{4:[2,44],6:[2,44],8:[2,44],11:[2,44],12:[2,44],14:[2,44],21:[2,44],23:[2,44],39:[2,44]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],17:29,20:38,23:[1,13]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],17:29,20:12,23:[1,13],29:39},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],17:29,20:12,23:[1,13],29:40},{8:[1,42],11:[1,43],14:[1,44],15:41},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],17:29,20:12,23:[1,13],29:45},{9:[1,47],21:[1,48],24:[1,46],28:[1,49]},{25:[1,50]},{9:[2,33],13:[2,33],21:[2,33],24:[2,33],28:[2,33]},{6:[2,26],9:[2,26],13:[2,26],18:[1,24],21:[2,26],24:[2,26],28:[2,26]},{6:[2,12],9:[2,12],13:[2,12],18:[2,12],21:[2,12],24:[2,12],28:[2,12]},{6:[2,22],9:[2,22],13:[2,22],21:[2,22],24:[2,22],28:[2,22]},{6:[1,51],9:[1,52],21:[1,53]},{6:[2,16],9:[2,16],21:[2,16]},{8:[1,55],10:54,11:[1,56],14:[1,57]},{6:[2,24],9:[2,24],13:[2,24],21:[2,24],24:[2,24],28:[2,24]},{9:[1,59],13:[1,58],21:[1,60]},{9:[2,29],13:[2,29],21:[2,29]},{6:[2,39],9:[2,39],21:[2,39],28:[2,39]},{6:[2,40],9:[1,21],21:[2,40],28:[2,40]},{9:[1,21],21:[1,61],28:[1,22]},{6:[2,13],9:[2,13],13:[2,13],18:[2,13],21:[2,13],24:[2,13],28:[2,13],35:[2,13]},{6:[2,9],9:[2,9],13:[2,9],18:[2,9],21:[2,9],24:[2,9],28:[2,9],35:[2,9]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],16:62,17:29,20:28,23:[1,13]},{6:[2,11],9:[2,11],13:[2,11],18:[2,11],21:[2,11],24:[2,11],28:[2,11],35:[2,11]},{9:[1,21],21:[1,63],28:[1,22]},{6:[2,21],9:[2,21],13:[2,21],21:[2,21],24:[2,21],25:[1,64],28:[2,21]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],17:29,20:65,23:[1,13]},{4:[1,14],8:[1,30],9:[2,35],11:[1,15],12:[1,17],13:[2,35],14:[1,16],17:29,20:66,21:[2,35],23:[1,13],24:[2,35],28:[2,35]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],16:67,17:29,20:28,23:[1,13]},{4:[1,68]},{6:[2,23],9:[2,23],13:[2,23],21:[2,23],24:[2,23],28:[2,23]},{18:[1,34],19:69},{18:[1,34],19:70},{9:[1,71],21:[1,72]},{9:[2,5],21:[2,5]},{12:[1,73],14:[1,74]},{9:[2,8],21:[2,8]},{6:[2,25],9:[2,25],13:[2,25],21:[2,25],24:[2,25],28:[2,25]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],17:29,20:75,23:[1,13]},{4:[1,14],8:[1,30],9:[2,31],11:[1,15],12:[1,17],13:[2,31],14:[1,16],17:29,20:76,21:[2,31],23:[1,13]},{4:[2,46],6:[2,46],8:[2,46],11:[2,46],12:[2,46],14:[2,46],21:[2,46],23:[2,46],39:[2,46]},{9:[1,47],13:[1,77],21:[1,48],28:[1,49]},{4:[2,45],6:[2,45],8:[2,45],11:[2,45],12:[2,45],14:[2,45],21:[2,45],23:[2,45],39:[2,45]},{4:[1,78]},{9:[2,34],13:[2,34],21:[2,34],24:[2,34],28:[2,34]},{9:[2,36],13:[2,36],21:[2,36],24:[2,36],28:[2,36]},{9:[1,47],13:[2,37],21:[2,37],24:[2,37],28:[2,37]},{4:[1,14],6:[2,41],8:[1,10],11:[1,15],12:[1,17],14:[1,16],17:9,20:12,21:[1,11],23:[1,13],26:79,29:80,30:81,31:4,32:6,34:5,36:7,37:3},{6:[2,17],9:[2,17],21:[2,17]},{6:[2,18],9:[2,18],21:[2,18]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],17:29,20:82,23:[1,13]},{4:[1,14],8:[1,30],11:[1,15],12:[1,17],14:[1,16],17:29,20:83,23:[1,13]},{13:[1,84]},{13:[1,85]},{9:[2,30],13:[2,30],21:[2,30]},{9:[2,32],13:[2,32],21:[2,32]},{6:[2,10],9:[2,10],13:[2,10],18:[2,10],21:[2,10],24:[2,10],28:[2,10],35:[2,10]},{4:[1,14],6:[2,41],8:[1,10],11:[1,15],12:[1,17],14:[1,16],17:9,20:12,21:[1,11],23:[1,13],26:86,29:80,30:81,31:4,32:6,34:5,36:7,37:3},{6:[1,87]},{6:[2,42],9:[1,21],21:[1,20],28:[1,22]},{4:[1,14],6:[2,43],8:[1,10],11:[1,15],12:[1,17],14:[1,16],17:9,20:12,21:[1,11],23:[1,13],29:8,31:4,32:6,34:5,36:7,37:19},{6:[2,14],9:[2,14],21:[2,14]},{6:[2,15],9:[2,15],21:[2,15]},{9:[2,6],21:[2,6]},{9:[2,7],21:[2,7]},{6:[1,88]},{6:[2,20],9:[2,20],13:[2,20],21:[2,20],24:[2,20],28:[2,20]},{6:[2,19],9:[2,19],13:[2,19],21:[2,19],24:[2,19],28:[2,19]}],
defaultActions: {18:[2,55]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function makeExpr(expr) {
		if (expr.length === 1) {
			expr.push('{mono}');
		}
		return expr;
	}
	lixlib = require("./lixlib.js");
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 39; 
break;
case 1: return 12; 
break;
case 2: return 23; 
break;
case 3: return 24; 
break;
case 4: return 4; 
break;
case 5: return 6; 
break;
case 6: return 11; 
break;
case 7: return 13; 
break;
case 8: return 21; 
break;
case 9: return 25; 
break;
case 10: return 28; 
break;
case 11: return 33; 
break;
case 12: return 35; 
break;
case 13: return 18; 
break;
case 14: return 8; 
break;
case 15: return 14; 
break;
case 16: return 9; 
break;
}
},
rules: [/^(?:$)/,/^(?:'(\\.|[^\\'])*'|"(\\.|[^\\"])*")/,/^(?:\(\s*)/,/^(?:\s*\))/,/^(?:\{\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)*\s*\})/,/^(?:\[\s*((#.*)?\n+)*\s*)/,/^(?:\s*((#.*)?\n+)*\s*\])/,/^(?:\s*((#.*)?\n+)+\s*)/,/^(?:\s*->\s*)/,/^(?:\s*\|\s*)/,/^(?:\s*:=\s*)/,/^(?:\s*=\s*)/,/^(?:\.)/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:[0-9]+)/,/^(?:\s+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lix;
exports.Parser = lix.Parser;
exports.parse = function () { return lix.parse.apply(lix, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}