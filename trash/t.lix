#!/usr/local/bin/node


x := 3

x match { 0 -> { 1 } 1 -> { 2 } 1 -> { 3 } _ -> { 'good' } }

N | until > 10 | map \(_0 * _0) | hook print | exec


whileT call \(i < 10) \{
	i | square | print
	i = i + 1
}

for call \{i = 0} \(i < 10) \{i = i + 1} \{
	i | square | square | print
}

i := 0
\(i < 10) whileT \{
	i | square | print
	i = i + 1
}

for fn init cond step do -> {
	init call
	while (cond call) {
		do call
		step call
	}
}

square fn x -> { x * x }

inc fn (p: Function) -> { *p = *p + 1 }
inc fn (i: Number) -> { i + 1 }

whileT fn cond do -> {
	while (cond call) {
		do call
	}
}

