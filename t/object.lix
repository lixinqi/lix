#!/usr/local/bin/node ./lix.js
a := {
	.1 									'ok'
	.a 									"good"
	.b 									"nice"
	.("hello world") 		'good'
	.(9527) 						'fine'
}

a | print
a.1 | print 
a.(1) | print 
a.("1") | print 
a.a | print
a.("a") | print
a.b | print
index := "hello world"
index | + ": " | + a.(index) | print

b := {}

b print

b.0 = 30
b.1 = 28

b print

list := {
	.length [i]->{
		i.length
	}

	.append [l x]->{
		l.(l.length) = x
		l
	}

}

[1 2 3 4 ] | list.length | print

pipe := [i fn]->{
	i fn
	i
}

[0 1 2 3] | list.append 30 | pipe print | list.length | print

A := [self name]->{
	self.name = name
	self
}

_new := [Class args]->{
	obj := {}
	obj Class args
}

A _new "good" | print

obj := A _new "good"

obj.name | print

ext := [Class config]->{
	newClassObj := {}
	newClassObj config
	newClass := []->{
		this
	}
	newClass.prototype = newClassObj
	newClass
}

A := {} ext [pub]->{
	pub._name = "lixinqi"
	pub._age = 20

	pub.construct = [self]->{
		self
	}

	pub.name = [self value]->{
		if (value == undefined) {
			self._name
		} else {
			self._name = value
		}
	}
	pub.age = [self]->{
		self._age
	}
}

instance := [Class args]->{
	obj := Class _instance_
	obj Class.prototype.construct
	obj
}

go := [fn]->{
	0 fn
}

A | print

obj := A instance

obj | obj.name | print

# obj obj.name "nice" | obj.name | print
# obj .name "nice" | .name | print

