#!/usr/local/bin/node ./lix.js
join := (arr)->{ arr .join "" }

map := (arr cb)->{
	ret := []
	arr foreach (i index)->{
		ret .push (i cb index)
	}
	ret
}

counterGenerator := ()->{
	counter := 0
	()->{
		ret := counter
		counter = counter + 1
		ret
	}
}

getCount := counterGenerator call

getUniqVarName := ()->{ '_uniq_var_' + (getCount call) }

generateFuncArgs := (args env ctx)->{
	args map (i)->{
		varname := i.0
		env.[varname] = true
		varname
	} | .join ', '
}

ctx0 := (x)->{x}

generateSeq := (expr env ctx def)->{
	funcName := getUniqVarName call
	ctx := (v)->{
		v + '()'
	}
	body := expr.0 map (item index)->{
		stmt := item generate env ctx def
		if (index == (expr.[0].length - 1)) {
			stmt := 'return ' + stmt
		}
		stmt
	} | .join ";\n" | + ";\n"

	['function ' funcName '() {\n' body '}'] | join | def.defineFunc
	funcName
}

generateOr := (expr env ctx)->{
	['(' (expr.0 generate env ctx0) " || " (expr.2 generate env ctx0) ')'] | join | ctx
}

generateAnd := (expr env ctx)->{
	['(' (expr.0 generate env ctx0) " && " (expr.2 generate env ctx0) ')'] | join | ctx
}

generateIf := (expr env ctx)->{
	expr.0 map (i)->{
		if (i.1 == 'else') {
			['{\n' (i.0 generate env ctx) '\n}'] join
		} (i.1 == 'if') {
			(i generateIf env ctx)
		} else {
			[ 'if (' (i.0 generate env ctx0) ') {\n'
					(i.1 generate env ctx)
				'\n}'
			] join
		}
	} | .join ' else '
}

operateFuncName := {
	.["+"] 				'__add__'
	.["-"] 				'__sub__'
	.["*"] 				'__mul__'
	.["/"] 				'__div__'
	.["%"] 				'__mod__'
	.[">="] 			'__ge__'
	.[">"] 				'__gt__'
	.["=="] 			'__eq__'
	.["!="] 			'__ne__'
	.["<"] 				'__lt__'
	.["<="] 			'__le__'
}

generateAtomic := (expr env ctx def)->{
	ret := expr.0
	if (expr.2 == '{var}') {
		if (operateFuncName.[expr.0]) {
			ret = operateFuncName.[expr.0]
		} else {
			ret = expr.0 transformVarName
		}
	}
	ret
}

generatePropertyName := (expr env ctx def)->{
	if (expr.1 == '{atomic}') {
		expr generateAtomic env ctx def
	} (expr.1 == '{index}') {
		expr.0 generateAtomic env ctx def
	}
}

generateProperty := (expr env ctx def)->{
	propertyName := expr.0 generatePropertyName env ctx0 def
	propertyValue := expr.2 generate env ctx def
	[propertyName ": " propertyValue] | join
}

generateObjectLiteral := (expr env ctx def)->{
	objectBody := expr.0 map (i)->{
		(i generateProperty env ctx def)
	} | .join ",\n"
	["{\n" objectBody "\n}"] | join
}

transformVarName := (name)->{ name }

getVarName := (expr)->{
	if (expr.1 == '{atomic}') {
		expr generateAtomic {} ctx0
	} (expr.1 == '{.}') {
		expr.0 getVarName
	}
}

generateField := (expr env ctx def)->{
	if (expr.1 == '{atomic}') {
		'.' + (expr generateAtomic env ctx0 def)
	} (expr.1 == '{index}') {
		['[' (expr.0 generate env ctx def) ']'] join
	}
}


generateFieldAccess := (expr env ctx def)->{
	if (expr.1 == '{atomic}') {
		expr generateAtomic env ctx0 def
	} (expr.1 == '{.}') {
		obj := (expr.0 generateFieldAccess env ctx def)
		field := (expr.2 generateField env ctx def)
		obj + field
	}
}

generateArray := (expr env ctx def)->{
	arrayBody := expr.0 map (i)->{
		(i generate env ctx def)
	} | .join ', '
	['[' arrayBody ']'] | join
}

generateMethod := (expr env ctx)->{
	localVarName := getUniqVarName call
	localValueName := getUniqVarName call
	methodName := (expr.0 generateField env ctx0)
	method := localVarName + methodName
	tmpVar := (getUniqVarName call)
	["(function (" localVarName ", " localValueName ") {\n"
		"if (typeof " method " === 'function') {\n"
				"arguments = Array.prototype.slice.call(arguments, 0, arguments.length);\n"
				"return " method ".apply(" localVarName ", arguments);\n"
		"} else if (" method " !== undefined) {\n"
			"if (" localValueName " === undefined) {\n"
				"return " method ';\n'
			"}\n"
			"return function () {\n"
				method " = " localValueName ";\n"
			"}\n"
		"}"
	"})"] join
}


generateWhile := (expr env ctx)->{
	['while (' (expr.0 generate env ctx0) ') {\n'
			(expr.2 generate env ctx0)
		"}\n"
		('null' ctx)] join
}

generateBreak := (expr env ctx)->{
	'break'
}

generateEmpty := (expr env ctx def)->{
	""
}

generateDef := (expr env ctx def)->{
	varname := expr.[0].[0]
	varname def.defineVar
	ret := [varname ' = ' (expr.2 generate env ctx def)] | join
	env.[varname] = true
	ret
}

generateAssign := (expr env ctx def)->{
	varname := expr.0 getVarName
	if (env.[varname] == undefined) {
		varname console.log
		"var undefined" console.log
	}

	varname := (expr.0 generate env ctx0 def)
	[varname " = " (expr.2 generate env ctx def)] | join
}

generateFunc := (expr env ctx def)->{
	funcEnv := env env_new
	args := expr.0 generateFuncArgs funcEnv ctx0
	tmpVar := (getUniqVarName call)

	def := GenerateDefNew call
	body := expr.2 generate funcEnv ctx0 def
	['(function (' args ') {\n'
		(def.defineVar call) ";\n"
		(def.defineFunc call) ";\n"
		'return ' body ";\n"
	'})'] join
}

generateExpr := (expr env ctx def)->{
	func := (expr.1 generate env ctx0 def)
	args := (expr.0 generate env ctx0 def)
	expr foreach (item index)->{
		if (index > 1) {
			args = [args ', ' (item generate env ctx0 def)] join
		}
	}
	[func '(' args ')'] | join | ctx
}

GenerateDefNew := ()->{
	vars := {}
	funcs := []

	{
		.defineVar (v)->{
			if (v) {
				vars.[v] = v
			} else {
				vecs := vars map (i)->{i}
				if (vecs.length > 0) {
					'var ' + (vecs .join ', ')
				} else {
					''
				}
			}
		}
		.defineFunc (v)->{
			if (v) {
				funcs .push v
			} else {
				funcs .join ';\n'
			}
		}
	}
}

generateStart := (expr env ctx def)->{
	def := GenerateDefNew call
	body := expr.0 generate env ctx def
	body := [body '()'] join
	[(def.defineVar call) ";\n" (def.defineFunc call) ";\n" body] join
}

generateMono := (expr env ctx def)->{
	expr.0 generate env ctx def
}

generatePathItem := (expr env ctx)->{
	['"' expr.0 '"'] | join | ctx
}

generatePathArgItem := (expr env ctx)->{
	['("' expr.2 '" + ' (expr.0 generate env ctx0) ')'] | join | ctx
}

generatePath := (expr env ctx)->{
	path := expr.0 map (i)->{
		i generate env ctx0
	} | .join ','
	['[' path '].join("/")'] | join | ctx
}

generateOpTable := {
	.['{start}'] 							generateStart
	.['{seq}'] 								generateSeq
	.['{mono}'] 							generateMono
	.['{atomic}']							generateAtomic
	.['{.}'] 									generateFieldAccess
	.['{func}'] 							generateFunc
	.['{array}'] 							generateArray
	.['{object}'] 						generateObjectLiteral
	.['{method}'] 						generateMethod
	.['{empty}'] 							generateEmpty
	.['{path}'] 							generatePath
	.['{path_item}'] 					generatePathItem
	.['{path_arg_item}']			generatePathArgItem
	.[':=']										generateDef
	.['='] 										generateAssign
	.['if']										generateIf
	.['and']									generateAnd
	.['or'] 									generateOr
	.['while']								generateWhile
	.['break'] 								generateBreak
}

generateOp := (hint)->{
	if (generateOpTable.[hint]) {
		generateOpTable.[hint]
	} else {
		generateExpr
	}
}

generate := (expr env ctx def)->{
	expr (expr.1 generateOp) env ctx def
}

env0 := {
	.exports 				true
#	.require 				true
	.array_join
									([
									"function array_join(arr, glue) {\n"
										"return function () {\n"
											"return arr.join(glue)\n"
										"}\n"
									"}"
									] .join '\n')
	.print 					([
										"function print(x) {"
											"return function () {"
												"return console.log(x); "
											"}"
										"}"
									] .join '\n')
	.not 					([
										"function not(x) {"
											"return function () {"
												"return !x; "
											"}"
										"}"
									] .join '\n')
	._instance_ 	([
										"function _instance_(x) {"
											"return function () {"
												"return new x(); "
											"}"
										"}"
									] .join '\n')
	.__add__ 				([
										"function __add__(x, y) {"
											"return function () {"
												"return x + y;"
											"}"
										"}"
									] .join '\n')
	.__sub__ 				([
										"function __sub__(x, y) {"
											"return function () {"
												"return x - y;"
											"}"
										"}"
									] .join '\n')
	.__mul__ 				([
										"function __mul__(x, y) {"
											"return function () {"
												"return x * y;"
											"}"
										"}"
									] .join '\n')
	.__div__ 				([
										"function __div__(x, y) {"
											"return function () {"
												"return x / y;"
											"}"
										"}"
									] .join '\n')
	.__mod__ 				([
										"function __mod__(x, y) {"
											"return function () {"
												"return x % y;"
											"}"
										"}"
									] .join '\n')
	.__gt__ 				([
										"function __gt__(x, y) {"
											"return function () {"
												"return x > y;"
											"}"
										"}"
									] .join '\n')
	.__ge__ 				([
										"function __ge__(x, y) {"
											"return function () {"
												"return x >= y;"
											"}"
										"}"
									] .join '\n')
	.__eq__ 				([
										"function __eq__(x, y) {"
											"return function () {"
												"return x == y;"
											"}"
										"}"
									] .join '\n')
	.__ne__ 				([
										"function __ne__(x, y) {"
											"return function () {"
												"return x != y;"
											"}"
										"}"
									] .join '\n')
	.__le__ 				([
										"function __le__(x, y) {"
											"return function () {"
												"return x <= y;"
											"}"
										"}"
									] .join '\n')
	.__lt__ 				([
										"function __lt__(x, y) {"
											"return function () {"
												"return x < y;"
											"}"
										"}"
									] .join '\n')
	.isFunction 		([
										"function isFunction(x) {"
											"return function () {"
												"return typeof x === 'function';"
											"}"
										"}"
									] .join '\n')
	.isArray 				([
										"function isArray(x) {"
											"return function () {"
												"return x instanceof Array;"
											"}"
										"}"
									] .join '\n')
	.foreach				([
										"function foreach(arr, cb) {"
											"return function () {"
												"for (var i in arr) {"
													"cb(arr[i], i)();"
												"}"
											"}"
										"}"
									] .join '\n')
	.call						([
										"function call(fn) {"
											"var collect = []"
											"for (var i in arguments) {"
												"collect.push(arguments[i])"
											"}"
											"return fn.apply(fn, collect);"
										"}"
									] .join '\n')
	.apply					([
										"function apply(fn) {"
											"var args = arguments[1]"
											"return function () {"
												"return fn.apply(fn, args)();"
											"}"
										"}"
									] .join '\n')
}

env_new := (env)->{
	env = env or env0
	Env := ()->{}
	Env.prototype = env
	Env _instance_
}

flattenExpr := (expr define)->{
	expr map (item)->{
		item flatten define
	} | define
}

flattenBreak := (expr define)->{
	expr
}

flattenWhile := (expr define)->{
		whileDefine := statementFlattenGenerator call
		expr.0 = expr.0 flatten whileDefine
		expr.2 = expr.2 flatten define0
		expr.[2].[0] = expr.[2].[0] .concat (whileDefine call)

		whileDefine call | foreach (i)->{
			i define true
		}
		expr
}

flattenOr := (expr define)->{
	ret := expr.0 flatten define
	if (ret.2 != 'var') {
		ret := ret define
	}
	getAndOpSeq := ()->{
		AndDefine := statementFlattenGenerator call
		seqRet := expr.2 flatten AndDefine
		seq := (AndDefine call)
		seq .push [ret '=' seqRet]
		[seq '{seq}']
	}
	[[[[ret ['not' '{atomic}' 'var']] (getAndOpSeq call)]] 'if'] define true
	ret
}

flattenAnd := (expr define)->{
	ret := expr.0 flatten define
	if (ret.2 != 'var') {
		ret := ret define
	}
	getAndOpSeq := ()->{
		AndDefine := statementFlattenGenerator call
		seqRet := expr.2 flatten AndDefine
		seq := (AndDefine call)
		seq .push [ret '=' seqRet]
		[seq '{seq}']
	}
	[[[ret (getAndOpSeq call)]] 'if'] define true
	ret
}

_flattenIf := (expr define tmpVar ctx)->{
	expr.0 foreach (i)->{
		if (i.1 == 'else') {
			elseSeq := i.0 flatten define0 ctx
			[[[tmpVar elseSeq]] 'if'] define true
		} (i.1 == 'if') {
			i _flattenIf define tmpVar ctx | define
		} else {
			ifSeq := i.1 flatten define0 ctx
			ifSeq.0 .unshift [tmpVar '=' ['false' '{atomic}']]
			cond := i.0 flatten define
			cond := [tmpVar 'and' cond]
			[[[cond ifSeq]] 'if'] define true
		}
	}
}

flattenIf := (expr define)->{
	tmpVar := ['true' '{atomic}'] define
	retVar := ['null' '{atomic}'] define
	ctx := (i)->{
		[retVar '=' i]
	}
	expr _flattenIf define tmpVar ctx
	retVar
}

flattenAssign := (expr define)->{
	expr.2 = expr.2 flatten define
	expr
}

flattenDef := (expr define)->{
	expr.2 = expr.2 flatten define
 	expr define true
 	expr.0
}

flattenPathArgItem := (expr define)->{
	expr.0 = expr.0 flatten define
	expr
}

flattenPathItem := (expr define)->{
	expr
}

flattenPath := (expr define)->{
	expr.0 = expr.0 map (i)->{
		i flatten define
	}
	expr
}

flattenEmpty := (expr define)->{
	expr
}

flattenField := (expr define)->{
	if (expr.1 == '{index}') {
		expr.0 = expr.0 flatten define
	}
	expr
}

flattenMethod := (expr define)->{
	expr.0 = expr.0 flattenField define
	expr
}

flattenProperty := (expr define)->{
	expr.2 = expr.2 flatten define
	expr
}

flattenObjectLiteral := (expr define)->{
	expr.0 = expr.0 map (i)->{
		i flattenProperty define
	}
	expr
}

flattenArray := (expr define)->{
	expr.0 = expr.0 map (i)->{
		i flatten define
	}
	expr
}

flattenFunc := (expr define)->{
	expr.2 = expr.2 flatten define
	expr
}

flattenFieldAccess := (expr define)->{
	if (expr.1 == '{.}') {
		expr.0 = expr.0 flattenFieldAccess define
		expr.2 = expr.2 flattenField define
	}
	expr
}

flattenAtomic := (expr define)->{
	expr
}

flattenMono := (expr define)->{
	expr.0 flatten define
}

statementFlattenGenerator := ()->{
	data := []
	(statement onlyPush)->{
		if (statement == undefined) {
			data
		} (onlyPush) {
			data .push statement 
		} else {
			varName := getUniqVarName call
			lixVar := [varName '{atomic}' '{var}']
			data .push [lixVar ':=' statement] 
			lixVar
		}
	}
}

flattenSeq := (expr define seqCtx)->{
	ret := []
	ctx := (stmt index)->{
		ret := stmt
		if (seqCtx and ((index parseInt) == (expr.[0].length - 1))) {
			ret := stmt seqCtx
		}
		ret
	}
	expr.0 foreach (item index)->{
		exprDefine := statementFlattenGenerator call
		itemRet := item flatten exprDefine
		ret = ret .concat (exprDefine call)
		ret .push (itemRet ctx index)
	}
	expr.0 = ret
	expr
}

flattenStart := (expr define)->{
	ret := expr.0 flatten define
	[ret '{start}']
}

flattenOpTable := {
	.['{start}'] 							flattenStart
	.['{seq}'] 								flattenSeq
	.['{mono}'] 							flattenMono
	.['{atomic}']							flattenAtomic
	.['{.}'] 									flattenFieldAccess
	.['{func}'] 							flattenFunc
	.['{array}'] 							flattenArray
	.['{object}'] 						flattenObjectLiteral
	.['{method}'] 						flattenMethod
	.['{empty}'] 							flattenEmpty
	.['{path}'] 							flattenPath
	.['{path_item}'] 					flattenPathItem
	.['{path_arg_item}']			flattenPathArgItem
	.[':=']										flattenDef
	.['='] 										flattenAssign
	.['if']										flattenIf
	.['and']									flattenAnd
	.['or'] 									flattenOr
	.['while']								flattenWhile
	.['break'] 								flattenBreak
}

flattenOp := (hint)->{
	if (flattenOpTable.[hint]) {
		flattenOpTable.[hint]
	} else {
		flattenExpr
	}
}

flatten := (expr define ctx)->{
	expr (expr.1 flattenOp) define ctx
}

define0 := (i)->{i}

def0 := {
	.defineVar (i)->{}
	.defineFunc (i)->{}
}

exports.compile = (expr)->{
	libs := env0 | map (i)->{i} | .join "\n"
	code := expr | flatten (i)->{} | generate (env_new call) ctx0 def0
	[libs "\n" code] join | console.log
}
