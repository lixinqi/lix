
require('/lib/lix/__builtin__.js');
var defer_stack = [];
function chain_defer() {
thisDefer(defer_stack)(function(){return;}, 0);
}
var Lf, _ret, _11, _12;
function _13(_cb, _step, _cont, _ret, cb_defer) {
switch (_step) {
case 0:
_ret = Lf = (function (Lcb) {
var Larguments = arguments;
var defer_stack = [];
var _ret, _4;
function _15(_cb, _step, _cont, _ret, cb_defer) {
switch (_step) {
case 0:
_ret = Lcall(Lcc, (function (Lbreak) {
var Larguments = arguments;
var defer_stack = [];
var _ret, _1, _2, _3;
function _17(_cb, _step, _cont, _ret, cb_defer) {
switch (_step) {
case 0:
_ret = Lcall(Ltrap, (function () {
var Larguments = arguments;
var defer_stack = [];
var _ret, _0;
function _19(_cb, _step, _cont, _ret, cb_defer) {
switch (_step) {
case 0:
_ret = Lprint('catch')(function (_ret) {
return _19(_cb, 1, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 1:
_0 = _ret;
case 2:
_ret = '--trap return--'
default:
}
thisDefer(defer_stack, false)(function () {
_cb(_ret);
}, 0);
if (_cont) {
_cb(_ret);
} else {
return _ret;
}
};
return _19;
}))(function (_ret) {
return _17(_cb, 1, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 1:
_1 = _ret;
case 2:
_ret = Lcall(Lcb)(function (_ret) {
return _17(_cb, 3, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 3:
_2 = _ret;
case 4:
_ret = Lcall(Lbreak)(function (_ret) {
return _17(_cb, 5, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 5:
_3 = _ret
default:
}
thisDefer(defer_stack, false)(function () {
_cb(_ret);
}, 0);
if (_cont) {
_cb(_ret);
} else {
return _ret;
}
};
return _17;
}))(function (_ret) {
return _15(_cb, 1, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 1:
_4 = _ret
default:
}
thisDefer(defer_stack, false)(function () {
_cb(_ret);
}, 0);
if (_cont) {
_cb(_ret);
} else {
return _ret;
}
};
return _15;
});
case 1:
_ret = Lcall(Lf, (function () {
var Larguments = arguments;
var defer_stack = [];
var _ret, _5, _6, _7, _8, _9, _10;
function _21(_cb, _step, _cont, _ret, cb_defer) {
switch (_step) {
case 0:
_ret = Lprint('nice after')(function (_ret) {
return _21(_cb, 1, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 1:
_5 = _ret;
case 2:
_ret = Lcall(Ltrap)(function (_ret) {
return _21(_cb, 3, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 3:
_6 = _ret;
case 4:
_ret = Lcall(_6)(function (_ret) {
return _21(_cb, 5, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 5:
_7 = _ret;
case 6:
_ret = Lprint(_7)(function (_ret) {
return _21(_cb, 7, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 7:
_8 = _ret;
case 8:
_ret = Lprint('nice after')(function (_ret) {
return _21(_cb, 9, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 9:
_9 = _ret;
case 10:
_ret = Lcall('good')(function (_ret) {
return _21(_cb, 11, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 11:
_10 = _ret
default:
}
thisDefer(defer_stack, false)(function () {
_cb(_ret);
}, 0);
if (_cont) {
_cb(_ret);
} else {
return _ret;
}
};
return _21;
}))(function (_ret) {
return _13(_cb, 2, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 2:
_11 = _ret;
case 3:
_ret = Lprint('end')(function (_ret) {
return _13(_cb, 4, true, _ret, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
}, 0, false, undefined, function () {
thisDefer(defer_stack, true)(function () {
cb_defer && cb_defer();
}, 0);
cb_defer && cb_defer();
}
);
case 4:
_12 = _ret
default:
}
thisDefer(defer_stack, false)(function () {
_cb(_ret);
}, 0);
if (_cont) {
_cb(_ret);
} else {
return _ret;
}
};
module.exports = _13
