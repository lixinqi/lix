#!/usr/local/bin/node

numbers := [cb]->{
	i := 0
	while (1) {
		defer call [isBreak]->{
			if (isBreak) {
			['defer in numbers: i = ' i ' isBreak = ' isBreak] .Join "" | print
			}
		}
		i cb
		i = i + 1
	}
}

squares := [cb]->{
	numbers call [i]->{
		defer call [isBreak]->{
			if (isBreak) {
			['defer in squares: i = ' (i * i) ' isBreak = ' isBreak] .Join "" | print
			}
		}
		i * i | cb
	}
}

squareAdd1 := [cb]->{
	squares call [i]->{
		defer call [isBreak]->{
			if (isBreak) {
			['defer in squareAdd1: i = ' (i + 1) ' isBreak = ' isBreak] .Join "" | print
			}
		}
		i + 1 | cb
	}
}

cc call [brk]->{
	squareAdd1 call [i]->{
		i print
		if (i > 82) {
			brk call
		}
	}
}

f := [cb]->{
	defer call []->{
		'good' print
	}
	cb call
}

call call []->{
	defer call []->{
		'ok' print
	}
	cc call [brk]->{
		defer call []->{
			'nice0' print
		}
		defer call []->{
			'nice1' print
		}

		f call []->{
			brk call
		}
	}
	'out of cc' print
}


# execAsCbSubsequently := []->{
# 	cc call [brk]->{
# 		brk call
# 	}
# }
# 
# bar := []->{
# 	defer call []->{ 'good' print }
# 	defer call []->{
# 		execAsCbSubsequently call
# 		'nice' print
# 	}
# 	execAsCbSubsequently call
# }
#  
# bar call
'end' print
