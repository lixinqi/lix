
require('/lib/lix/__builtin__.js');
var Ltest;
function _12(_cb, _step, _cont, _ret) {
	switch (_step) {
		case 0:
			_ret = Ltest = (function (Lname, Lcb) {
				var Larguments = arguments;
				var _ret, _0, _1, _2, LgetCounter, Lt, _11;
				function _14(_cb, _step, _cont, _ret) {
					switch (_step) {
						case 0:
							_ret = L__add__("counter", "-lix")(function (_ret) {
								return _14(_cb, 1, true, _ret);
							}, 0);
						case 1:
							_0 = _ret;
						case 2:
							_ret = require(_0)(function (_ret) {
								return _14(_cb, 3, true, _ret);
							}, 0);
						case 3:
							_1 = _ret;
						case 4:
							_ret = Lcall(_1.generator)(function (_ret) {
								return _14(_cb, 5, true, _ret);
							}, 0);
						case 5:
							_2 = _ret;
						case 6:
							_ret = LgetCounter = _2;
						case 7:
							_ret = Lt = (function (Lcond) {
								var Larguments = arguments;
								var _ret, _3, Lcounter, _4, _5, _8, _6, _7, _9, _10;
								function _17(_cb, _step, _cont, _ret) {
									switch (_step) {
										case 0:
											_4 = false;
										case 1:
											_ret = (function (_18, _19) {
												if (typeof _18.Join === 'function') {
													arguments = Array.prototype.slice.call(arguments, 0, arguments.length);
													return _18.Join.apply(_18, arguments);
												} else if (_18.Join !== undefined) {
													if (_19 === undefined) {
														return function (_ret) {
															return _18.Join;
														}
													}
													return function (_ret) {
														_18.Join = _19;
													}
												}})(['Failed! ', Lname, ' #', Lcounter], '')(function (_ret) {
													return _17(_cb, 2, true, _ret);
												}, 0);
										case 2:
											_6 = _ret;
										case 3:
											_ret = Lprint(_6)(function (_ret) {
												return _17(_cb, 4, true, _ret);
											}, 0);
										case 4:
											_7 = _ret;
										case 5:
											_ret = _5 = _7
										default:
									}
									if (_cont) {
										_cb(_ret)
									} else {
										return _ret
									}
								};
								function _21(_cb, _step, _cont, _ret) {
									switch (_step) {
										case 0:
											_ret = (function (_22, _23) {
												if (typeof _22.Join === 'function') {
													arguments = Array.prototype.slice.call(arguments, 0, arguments.length);
													return _22.Join.apply(_22, arguments);
												} else if (_22.Join !== undefined) {
													if (_23 === undefined) {
														return function (_ret) {
															return _22.Join;
														}
													}
													return function (_ret) {
														_22.Join = _23;
													}
												}})(['OK ', Lname, ' #', Lcounter], '')(function (_ret) {
													return _21(_cb, 1, true, _ret);
												}, 0);
										case 1:
											_9 = _ret;
										case 2:
											_ret = Lprint(_9)(function (_ret) {
												return _21(_cb, 3, true, _ret);
											}, 0);
										case 3:
											_10 = _ret;
										case 4:
											_ret = _5 = _10
										default:
									}
									if (_cont) {
										_cb(_ret)
									} else {
										return _ret
									}
								};
								function _16(_cb, _step, _cont, _ret) {
									switch (_step) {
										case 0:
											_ret = Lcall(LgetCounter)(function (_ret) {
												return _16(_cb, 1, true, _ret);
											}, 0);
										case 1:
											_3 = _ret;
										case 2:
											_ret = Lcounter = _3;
										case 3:
											_ret = true;
										case 4:
											_4 = _ret;
										case 5:
											_ret = null;
										case 6:
											_5 = _ret;
										case 7:
											_ret = L__eq__(Lcond, false)(function (_ret) {
												return _16(_cb, 8, true, _ret);
											}, 0);
										case 8:
											_8 = _ret;
										case 9:
											if ((_4 && _8)) {
												_17(function (_ret) {
													return _16(_cb, 10, true, _ret);
												}, 0)
											};
										case 10:
											if (_4) {
												_21(function (_ret) {
													return _16(_cb, 11, true, _ret);
												}, 0)
											}
										default:
									}
									if (_cont) {
										_cb(_ret)
									} else {
										return _ret
									}
								};
								return _16;
							});
						case 8:
							_ret = Lcall(Lcb, Lt)(function (_ret) {
								return _14(_cb, 9, true, _ret);
							}, 0);
						case 9:
							_11 = _ret
						default:
					}
					if (_cont) {
						_cb(_ret)
					} else {
						return _ret
					}
				};
				return _14;
			});
		case 1:
			_ret = Ltest
		default:
	}
	if (_cont) {
		_cb(_ret)
	} else {
		return _ret
	}
};
module.exports = _12
