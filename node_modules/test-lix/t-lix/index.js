
require('/lib/lix/__builtin__.js');
var _ret, _0, _1, _7, _8, _9, _15;
function _16(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__add__("test", "-lix")(function (_ret) {
return _16(_cb, 1, true, _ret);
}, 0);
case 1:
_0 = _ret;
case 2:
_ret = require(_0)(function (_ret) {
return _16(_cb, 3, true, _ret);
}, 0);
case 3:
_1 = _ret;
case 4:
_ret = _1('$test ==', (function (Lassert) {
var Larguments = arguments;
var _ret, _2, _3, _4, _5, _6;
function _18(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__eq__(0, 0)(function (_ret) {
return _18(_cb, 1, true, _ret);
}, 0);
case 1:
_2 = _ret;
case 2:
_ret = Lassert(_2)(function (_ret) {
return _18(_cb, 3, true, _ret);
}, 0);
case 3:
_3 = _ret;
case 4:
_ret = L__eq__(1, 0)(function (_ret) {
return _18(_cb, 5, true, _ret);
}, 0);
case 5:
_4 = _ret;
case 6:
_ret = L__eq__(_4, false)(function (_ret) {
return _18(_cb, 7, true, _ret);
}, 0);
case 7:
_5 = _ret;
case 8:
_ret = Lassert(_5)(function (_ret) {
return _18(_cb, 9, true, _ret);
}, 0);
case 9:
_6 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _18;
}))(function (_ret) {
return _16(_cb, 5, true, _ret);
}, 0);
case 5:
_7 = _ret;
case 6:
_ret = L__add__("test", "-lix")(function (_ret) {
return _16(_cb, 7, true, _ret);
}, 0);
case 7:
_8 = _ret;
case 8:
_ret = require(_8)(function (_ret) {
return _16(_cb, 9, true, _ret);
}, 0);
case 9:
_9 = _ret;
case 10:
_ret = _9('$test !=', (function (Lassert) {
var Larguments = arguments;
var _ret, _10, _11, _12, _13, _14;
function _20(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__ne__(0, 0)(function (_ret) {
return _20(_cb, 1, true, _ret);
}, 0);
case 1:
_10 = _ret;
case 2:
_ret = L__eq__(_10, false)(function (_ret) {
return _20(_cb, 3, true, _ret);
}, 0);
case 3:
_11 = _ret;
case 4:
_ret = Lassert(_11)(function (_ret) {
return _20(_cb, 5, true, _ret);
}, 0);
case 5:
_12 = _ret;
case 6:
_ret = L__ne__(1, 0)(function (_ret) {
return _20(_cb, 7, true, _ret);
}, 0);
case 7:
_13 = _ret;
case 8:
_ret = Lassert(_13)(function (_ret) {
return _20(_cb, 9, true, _ret);
}, 0);
case 9:
_14 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _20;
}))(function (_ret) {
return _16(_cb, 11, true, _ret);
}, 0);
case 11:
_15 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
try {
_16(function(x){return x;}, 0)
} catch (e) {
}