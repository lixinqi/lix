
require('/lib/lix/__builtin__.js');
var _ret, _0, _1, _3, _4, _5, _6, _14, _15, _16, _30, _31;
function _32(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__add__("try", "-lix")(function (_ret) {
return _32(_cb, 1, true, _ret);
}, 0);
case 1:
_0 = _ret;
case 2:
_ret = require(_0)(function (_ret) {
return _32(_cb, 3, true, _ret);
}, 0);
case 3:
_1 = _ret;
case 4:
_ret = Lcall(_1, (function () {
var Larguments = arguments;
var _ret, _2;
function _34(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint('good')(function (_ret) {
return _34(_cb, 1, true, _ret);
}, 0);
case 1:
_2 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _34;
}), (function (Le) {
var Larguments = arguments;
;
function _36(_cb, _step, _cont, _ret) {
switch (_step) {

default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _36;
}))(function (_ret) {
return _32(_cb, 5, true, _ret);
}, 0);
case 5:
_3 = _ret;
case 6:
_ret = Lprint('nice')(function (_ret) {
return _32(_cb, 7, true, _ret);
}, 0);
case 7:
_4 = _ret;
case 8:
_ret = L__add__("try", "-lix")(function (_ret) {
return _32(_cb, 9, true, _ret);
}, 0);
case 9:
_5 = _ret;
case 10:
_ret = require(_5)(function (_ret) {
return _32(_cb, 11, true, _ret);
}, 0);
case 11:
_6 = _ret;
case 12:
_ret = Lcall(_6, (function () {
var Larguments = arguments;
var _ret, _7, _8, _9, _10, _11;
function _38(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint('try begin')(function (_ret) {
return _38(_cb, 1, true, _ret);
}, 0);
case 1:
_7 = _ret;
case 2:
_ret = L__add__("raise", "-lix")(function (_ret) {
return _38(_cb, 3, true, _ret);
}, 0);
case 3:
_8 = _ret;
case 4:
_ret = require(_8)(function (_ret) {
return _38(_cb, 5, true, _ret);
}, 0);
case 5:
_9 = _ret;
case 6:
_ret = _9('Error')(function (_ret) {
return _38(_cb, 7, true, _ret);
}, 0);
case 7:
_10 = _ret;
case 8:
_ret = Lprint('try end')(function (_ret) {
return _38(_cb, 9, true, _ret);
}, 0);
case 9:
_11 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _38;
}), (function (Le) {
var Larguments = arguments;
var _ret, _12, _13;
function _40(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint('Catch')(function (_ret) {
return _40(_cb, 1, true, _ret);
}, 0);
case 1:
_12 = _ret;
case 2:
_ret = Lprint(Le)(function (_ret) {
return _40(_cb, 3, true, _ret);
}, 0);
case 3:
_13 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _40;
}))(function (_ret) {
return _32(_cb, 13, true, _ret);
}, 0);
case 13:
_14 = _ret;
case 14:
_ret = L__add__("try", "-lix")(function (_ret) {
return _32(_cb, 15, true, _ret);
}, 0);
case 15:
_15 = _ret;
case 16:
_ret = require(_15)(function (_ret) {
return _32(_cb, 17, true, _ret);
}, 0);
case 17:
_16 = _ret;
case 18:
_ret = Lcall(_16, (function () {
var Larguments = arguments;
var _ret, _17, _18, _27, _28;
function _42(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__add__("try", "-lix")(function (_ret) {
return _42(_cb, 1, true, _ret);
}, 0);
case 1:
_17 = _ret;
case 2:
_ret = require(_17)(function (_ret) {
return _42(_cb, 3, true, _ret);
}, 0);
case 3:
_18 = _ret;
case 4:
_ret = Lcall(_18, (function () {
var Larguments = arguments;
var _ret, _19, _20, _21, _22;
function _44(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__add__("raise", "-lix")(function (_ret) {
return _44(_cb, 1, true, _ret);
}, 0);
case 1:
_19 = _ret;
case 2:
_ret = require(_19)(function (_ret) {
return _44(_cb, 3, true, _ret);
}, 0);
case 3:
_20 = _ret;
case 4:
_ret = _20('Inner error in try block')(function (_ret) {
return _44(_cb, 5, true, _ret);
}, 0);
case 5:
_21 = _ret;
case 6:
_ret = Lprint('!!!!!!!!!!!!!!!! impossable to run here')(function (_ret) {
return _44(_cb, 7, true, _ret);
}, 0);
case 7:
_22 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _44;
}), (function (Le) {
var Larguments = arguments;
var _ret, _23, _24, _25, _26;
function _46(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint(Le)(function (_ret) {
return _46(_cb, 1, true, _ret);
}, 0);
case 1:
_23 = _ret;
case 2:
_ret = L__add__("raise", "-lix")(function (_ret) {
return _46(_cb, 3, true, _ret);
}, 0);
case 3:
_24 = _ret;
case 4:
_ret = require(_24)(function (_ret) {
return _46(_cb, 5, true, _ret);
}, 0);
case 5:
_25 = _ret;
case 6:
_ret = _25('Outer error in catch block')(function (_ret) {
return _46(_cb, 7, true, _ret);
}, 0);
case 7:
_26 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _46;
}))(function (_ret) {
return _42(_cb, 5, true, _ret);
}, 0);
case 5:
_27 = _ret;
case 6:
_ret = Lprint('!!!!!!!!!!!!!!!! impossable to run here')(function (_ret) {
return _42(_cb, 7, true, _ret);
}, 0);
case 7:
_28 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _42;
}), (function (Le) {
var Larguments = arguments;
var _ret, _29;
function _48(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint(Le)(function (_ret) {
return _48(_cb, 1, true, _ret);
}, 0);
case 1:
_29 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _48;
}))(function (_ret) {
return _32(_cb, 19, true, _ret);
}, 0);
case 19:
_30 = _ret;
case 20:
_ret = Lprint('end')(function (_ret) {
return _32(_cb, 21, true, _ret);
}, 0);
case 21:
_31 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
module.exports = _32
