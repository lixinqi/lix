
require('/lib/lix/__builtin__.js');
var _ret, _0, _1, _3, _4, _5, _7, _8, _9, _11;
function _12(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__add__("foreach", "-lix")(function (_ret) {
return _12(_cb, 1, true, _ret);
}, 0);
case 1:
_0 = _ret;
case 2:
_ret = _require(require)(_0)(function (_ret) {
return _12(_cb, 3, true, _ret);
}, 0);
case 3:
_1 = _ret;
case 4:
_ret = _1([1, 2, 3, 4], (function (Litem) {
var Larguments = arguments;
var _ret, _2;
function _14(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint(Litem)(function (_ret) {
return _14(_cb, 1, true, _ret);
}, 0);
case 1:
_2 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _14;
}))(function (_ret) {
return _12(_cb, 5, true, _ret);
}, 0);
case 5:
_3 = _ret;
case 6:
_ret = L__add__("foreach", "-lix")(function (_ret) {
return _12(_cb, 7, true, _ret);
}, 0);
case 7:
_4 = _ret;
case 8:
_ret = _require(require)(_4)(function (_ret) {
return _12(_cb, 9, true, _ret);
}, 0);
case 9:
_5 = _ret;
case 10:
_ret = _5([4, 3, 2, 1], (function (Litem, Lindex) {
var Larguments = arguments;
var _ret, _6;
function _16(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint([Litem, Lindex])(function (_ret) {
return _16(_cb, 1, true, _ret);
}, 0);
case 1:
_6 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _16;
}))(function (_ret) {
return _12(_cb, 11, true, _ret);
}, 0);
case 11:
_7 = _ret;
case 12:
_ret = L__add__("foreach", "-lix")(function (_ret) {
return _12(_cb, 13, true, _ret);
}, 0);
case 13:
_8 = _ret;
case 14:
_ret = _require(require)(_8)(function (_ret) {
return _12(_cb, 15, true, _ret);
}, 0);
case 15:
_9 = _ret;
case 16:
_ret = _9({
a: 2,
b: 3,
c: 4,
d: 5
}, (function (Litem, Lindex) {
var Larguments = arguments;
var _ret, _10;
function _18(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint([Litem, Lindex])(function (_ret) {
return _18(_cb, 1, true, _ret);
}, 0);
case 1:
_10 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _18;
}))(function (_ret) {
return _12(_cb, 17, true, _ret);
}, 0);
case 17:
_11 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
module.exports = _12
