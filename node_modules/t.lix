naturalNumbers := [cb]->{
	i := 0
	while (1) {
		i cb
		i = i + 1
	}
}

exec := call

MinorArgsToFunc := [args]->{
	args := args | Array.Slice
	args.0 = __ 
	call apply args
}

filter := [monad]->{
	fn := arguments MinorArgsToFunc
	[cb]->{
		monad call [x]->{
			if (x fn) {
				x cb
			}
		}
	}
}

then := [monad]->{
	fn := arguments MinorArgsToFunc
	[cb]->{
		monad call [x]->{
			x fn
			x cb
		}
	}
}

until := [monad]->{
	fn := arguments MinorArgsToFunc
	[cb]->{
		cc call [brk]->{
			monad call [x]->{
				if (x fn) {
					brk call
				}
				x cb
			}
			brk call
		}
	}
}

each := [x]->{
	x >>= ($I << (arguments MinorArgsToFunc))
}

reduce := [monad acc init]->{
	[cb]->{
		ret := init
		monad each [i]->{
			ret = ret acc i
		} | exec
		ret cb
	}
}

square := [x]->{x * x}

#(naturalNumbers
#	| until > 10
#	| filter > 5
#	| each + 5
#	| each square
#	| then print
#	| exec
#)

_1class := [
	{	
		.ID 119
		.age 26
		.name '李新奇'
	}
	{
		.ID 110
		.age 18
		.name '李明超'
	}
]

array_monad := [arr]->{
	[cb]->{
		i := 0
		while (i < arr.length) {
			arr.(i) cb
			i = i + 1
		}
	}
}

class_each_student := array_monad 

class_each_total_age :=  class_each_student >> each (.age >> + 10 >> * 100)

_1class class_each_student | each (.age >> + 10 >> * 100) | then print | exec

_1class class_each_total_age | call print

class_each_total_age_print := class_each_total_age >> then print

_1class class_each_total_age_print | exec

each_total_age := $I << (.age >> + 10 >> * 100)

'---------' print

_1class | (class_each_student >>> each_total_age) | then print | exec

'---------' print

1 $I | then []->{'good0' print} | filter > 1 | then []->{'good1' print} | exec 

naturalNumbers | until > 100 | reduce + 0 | then print | exec

concat := [arr b]->{
	arr .Push b
	arr
}

naturalNumbers | until > 5 | reduce concat [] | then print | exec

'end' print
