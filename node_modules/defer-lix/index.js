
require('/lib/lix/__builtin__.js');
var defer_stack = [];
var this_defer = thisDefer(defer_stack);
var chain_defer = chainDefer(defer_stack, function () {return;});
;
function _2(_cb, _step, _cont, _ret, cb_defer) {
	switch (_step) {
		case 0:
			_ret = (function (LdeferList) {
				var Larguments = arguments;
				var defer_stack = [];
				var this_defer = thisDefer(defer_stack);
				var chain_defer = chainDefer(defer_stack, cb_defer);
				var _ret, _0, _1;
				function _5(_cb, _step, _cont, _ret, cb_defer) {
					switch (_step) {
						case 0:
							_ret = LdeferList.Pop(LdeferList)(function (_ret) {
								return _5(_cb, 1, true, _ret, chain_defer);
							}, 0);
						case 1:
							_0 = _ret;
						case 2:
							_ret = Lcall(_0)(function (_ret) {
								return _5(_cb, 3, true, _ret, chain_defer);
							}, 0);
						case 3:
							_1 = _ret
						default:
					}
					thisDefer(defer_stack)(function () {
						_cb(_ret);
					}, 0);
					if (_cont) {
						_cb(_ret);
					} else {
						return _ret;
					}
				};
				function _4(_cb, _step, _cont, _ret, cb_defer) {
					switch (_step) {
						case 0:
							while (LdeferList.length) {
								_5(function (_ret) {
									return _4(_cb, 0, true, _ret, chain_defer);
								}, 0)
							};
						case 1:
							_ret = undefined
						default:
					}
					thisDefer(defer_stack)(function () {
						_cb(_ret);
					}, 0);
					if (_cont) {
						_cb(_ret);
					} else {
						return _ret;
					}
				};
				return _4;
			})
		default:
	}
	thisDefer(defer_stack)(function () {
		_cb(_ret);
	}, 0);
	if (_cont) {
		_cb(_ret);
	} else {
		return _ret;
	}
};
module.exports = _2
