
require('/lib/lix/__builtin__.js');
var _ret, _0, _1, Lfs;
function _5(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__add__("_fs", "-lix")(function (_ret) {
return _5(_cb, 1, true, _ret);
}, 0);
case 1:
_0 = _ret;
case 2:
_ret = require(_0)(function (_ret) {
return _5(_cb, 3, true, _ret);
}, 0);
case 3:
_1 = _ret;
case 4:
_ret = Lfs = _1;
case 5:
_ret = Lfs.ReadFile = (function (Lfilename, Loptions) {
var Larguments = arguments;
var _ret, _4;
function _7(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lcall(Lcc, (function (Lbrk) {
var Larguments = arguments;
var _ret, _3;
function _9(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lfs.ReadFileAsync(Lfilename, Loptions, (function (Lerr, Ldata) {
var Larguments = arguments;
var _ret, _2;
function _11(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lcall(Lbrk, [Lerr, Ldata])(function (_ret) {
return _11(_cb, 1, true, _ret);
}, 0);
case 1:
_2 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _11;
}))(function (_ret) {
return _9(_cb, 1, true, _ret);
}, 0);
case 1:
_3 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _9;
}))(function (_ret) {
return _7(_cb, 1, true, _ret);
}, 0);
case 1:
_4 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _7;
});
case 6:
_ret = Lfs
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
module.exports = _5
