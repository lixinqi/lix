
require('/lib/lix/__builtin__.js');
;
function _8(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = (function () {
var Larguments = arguments;
var _ret, _0, _1, _2, _7;
function _10(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint('file a')(function (_ret) {
return _10(_cb, 1, true, _ret);
}, 0);
case 1:
_0 = _ret;
case 2:
_ret = L__add__("trap", "-lix")(function (_ret) {
return _10(_cb, 3, true, _ret);
}, 0);
case 3:
_1 = _ret;
case 4:
_ret = require(_1)(function (_ret) {
return _10(_cb, 5, true, _ret);
}, 0);
case 5:
_2 = _ret;
case 6:
_ret = Lcall(_2.try, (function () {
var Larguments = arguments;
var _ret, _3, _4, _5;
function _12(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = L__add__("b", "-lix")(function (_ret) {
return _12(_cb, 1, true, _ret);
}, 0);
case 1:
_3 = _ret;
case 2:
_ret = require(_3)(function (_ret) {
return _12(_cb, 3, true, _ret);
}, 0);
case 3:
_4 = _ret;
case 4:
_ret = Lcall(_4)(function (_ret) {
return _12(_cb, 5, true, _ret);
}, 0);
case 5:
_5 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _12;
}), (function (Le) {
var Larguments = arguments;
var _ret, _6;
function _14(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lprint(Le)(function (_ret) {
return _14(_cb, 1, true, _ret);
}, 0);
case 1:
_6 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _14;
}))(function (_ret) {
return _10(_cb, 7, true, _ret);
}, 0);
case 7:
_7 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _10;
})
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
module.exports = _8
