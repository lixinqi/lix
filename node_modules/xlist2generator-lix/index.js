
require('/lib/lix/s_builtin_.js');
require.lixCache = {};
require.lixLoadingCache = {};
var Lrequire = _require(require);
var L__dirname = __dirname;
var L__filename = __filename;
;
function _8(s) {
	var Lraise = raise(s);
	switch (s[2]) {
		case 0:
			s[3] = (function (Lxl, Lend) {
				var Larguments = arguments
				var Lcont;
			function _10(s) {
				var Lraise = raise(s);
				switch (s[2]) {
					case 0:
						s[3] = Lcont = null;
					case 1:
						s[3] = (function () {
							var Larguments = arguments
							var _7;
						function _12(s) {
							var Lraise = raise(s);
							switch (s[2]) {
								case 0:
									s[2] = 1;
									lix(s, Lcall(Lcc, (function (Lbrk) {
										var Larguments = arguments
										var _0, _1, L_brk, _4, _5, _6;
									function _15(s) {
										var Lraise = raise(s);
										switch (s[2]) {
											case 0:
												_0 = false;
											case 1:
												s[2] = 2;
												lix(s, Lcont(Lbrk));
											case 2:
												_1 = s[3]
											default:
										}
										return s[3]
									}
									;
									function _16(s) {
										var Lraise = raise(s);
										switch (s[2]) {
											case 0:
												s[3] = L_brk = Lbrk;
											case 1:
												s[2] = 2;
												lix(s, Lmap(Lxl, (function (Li) {
													var Larguments = arguments
													var _3;
												function _18(s) {
													var Lraise = raise(s);
													switch (s[2]) {
														case 0:
															s[2] = 1;
															lix(s, Lcall(Lcc, (function (Lnext) {
																var Larguments = arguments
																var _2;
															function _20(s) {
																var Lraise = raise(s);
																switch (s[2]) {
																	case 0:
																		s[3] = Lcont = Lnext;
																	case 1:
																		s[2] = 2;
																		lix(s, L_brk(Li));
																	case 2:
																		_2 = s[3]
																	default:
																}
																return s[3]
															}
															;
															return _20;
															})));
														case 1:
															_3 = s[3];
														case 2:
															s[3] = L_brk = _3
														default:
													}
													return s[3]
												}
												;
												return _18;
												})));
											case 2:
												_4 = s[3];
											case 3:
												s[2] = 4;
												lix(s, Lexec(_4));
											case 4:
												_5 = s[3];
											case 5:
												s[2] = 6;
												lix(s, Lbrk(Lend));
											case 6:
												_6 = s[3]
											default:
										}
										return s[3]
									}
									;
									function _14(s) {
										var Lraise = raise(s);
										switch (s[2]) {
											case 0:
												_0 = true;
											case 1:
												if ((_0 && Lcont)) {
													s[2] = 2;
													lix(s, _15)
												};
											case 2:
												if (_0) {
													s[2] = 3;
													lix(s, _16)
												}
											default:
										}
										return s[3]
									}
									;
									return _14;
									})));
								case 1:
									_7 = s[3]
								default:
							}
							return s[3]
						}
						;
						return _12;
						})
					default:
				}
				return s[3]
			}
			;
			return _10;
			})
		default:
	}
	return s[3]
}
;
module.exports = _8
