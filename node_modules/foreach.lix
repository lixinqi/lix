#!/usr/bin/env node
# 
### while pattern match is OK
# (arr :Array | foreach cb)->{
#
# 	i := 0
# 	while (i < arr.length) {
# 		arr.(i) cb i
# 		i = i + 1
# 	}
# }
#
#	(obj :Object	| foreach cb)->{
#
#		keys := obj .Keys
#		i := 0
#		while (i < keys.length) {
#			obj.(keys.(i)) cb keys.(i)
#			i = i + 1
#		}
#	}
#
#	(x :Array	| isCollective)->{ true }
#
#	(x :Object | isCollective)->{ true }
#
#	(x isCollective)->{ false }
#
#	isNotCollective := isCollective $compose not
#	
#	(x :(x isNotCollective) | foreach cb)->{
#	}
#
#	foreach

[arr cb]->{
	i := 0
	if (arr $instanceof Array) {
		while (i < arr.length) {
			cb call arr.(i) i
			i = i + 1
		}
	} (arr $instanceof Object) {
		keys := arr Object.Keys
		while (i < keys.length) {
			cb call arr.(keys.(i)) keys.(i)
			i = i + 1
		}
	}
}
