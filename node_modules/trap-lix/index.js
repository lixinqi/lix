
require('/lib/lix/__builtin__.js');
var LtrapList, _ret, _0, _1, Lglobal, _2, _3, _4, Ltry, Lraise;
function _15(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_2 = false;
case 1:
_ret = _3 = Lglobal.__trapList__ = []
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
function _16(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = _3 = LtrapList = Lglobal.__trapList__
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
function _14(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = LtrapList = [];
case 1:
_ret = L__add__("global", "-lix")(function (_ret) {
return _14(_cb, 2, true, _ret);
}, 0);
case 2:
_0 = _ret;
case 3:
_ret = require(_0)(function (_ret) {
return _14(_cb, 4, true, _ret);
}, 0);
case 4:
_1 = _ret;
case 5:
_ret = Lglobal = _1;
case 6:
_ret = true;
case 7:
_2 = _ret;
case 8:
_ret = null;
case 9:
_3 = _ret;
case 10:
_ret = L__eq__(Lglobal.__trapList__, undefined)(function (_ret) {
return _14(_cb, 11, true, _ret);
}, 0);
case 11:
_4 = _ret;
case 12:
if ((_2 && _4)) {
_15(function (_ret) {
return _14(_cb, 13, true, _ret);
}, 0)
};
case 13:
if (_2) {
_16(function (_ret) {
return _14(_cb, 14, true, _ret);
}, 0)
};
case 14:
_ret = Ltry = (function (LtryBlock, LcatchBlock) {
var Larguments = arguments;
var _ret, _11;
function _18(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lcall(Lcc, (function (Lbrk) {
var Larguments = arguments;
var _ret, _7, _8, _9, _10;
function _20(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = (function (_21, _22) {
if (typeof _21.Push === 'function') {
arguments = Array.prototype.slice.call(arguments, 0, arguments.length);
return _21.Push.apply(_21, arguments);
} else if (_21.Push !== undefined) {
if (_22 === undefined) {
return function (_ret) {
return _21.Push;
}
}
return function (_ret) {
_21.Push = _22;
}
}})(LtrapList, (function (Le) {
var Larguments = arguments;
var _ret, _5, _6;
function _25(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = Lcall(LcatchBlock, Le)(function (_ret) {
return _25(_cb, 1, true, _ret);
}, 0);
case 1:
_5 = _ret;
case 2:
_ret = Lcall(Lbrk)(function (_ret) {
return _25(_cb, 3, true, _ret);
}, 0);
case 3:
_6 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _25;
}))(function (_ret) {
return _20(_cb, 1, true, _ret);
}, 0);
case 1:
_7 = _ret;
case 2:
_ret = Lcall(LtryBlock)(function (_ret) {
return _20(_cb, 3, true, _ret);
}, 0);
case 3:
_8 = _ret;
case 4:
_ret = (function (_26, _27) {
if (typeof _26.Pop === 'function') {
arguments = Array.prototype.slice.call(arguments, 0, arguments.length);
return _26.Pop.apply(_26, arguments);
} else if (_26.Pop !== undefined) {
if (_27 === undefined) {
return function (_ret) {
return _26.Pop;
}
}
return function (_ret) {
_26.Pop = _27;
}
}})(LtrapList)(function (_ret) {
return _20(_cb, 5, true, _ret);
}, 0);
case 5:
_9 = _ret;
case 6:
_ret = Lcall(Lbrk)(function (_ret) {
return _20(_cb, 7, true, _ret);
}, 0);
case 7:
_10 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _20;
}))(function (_ret) {
return _18(_cb, 1, true, _ret);
}, 0);
case 1:
_11 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _18;
});
case 15:
_ret = Lraise = (function (Le) {
var Larguments = arguments;
var _ret, _12, _13;
function _30(_cb, _step, _cont, _ret) {
switch (_step) {
case 0:
_ret = (function (_31, _32) {
if (typeof _31.Pop === 'function') {
arguments = Array.prototype.slice.call(arguments, 0, arguments.length);
return _31.Pop.apply(_31, arguments);
} else if (_31.Pop !== undefined) {
if (_32 === undefined) {
return function (_ret) {
return _31.Pop;
}
}
return function (_ret) {
_31.Pop = _32;
}
}})(LtrapList)(function (_ret) {
return _30(_cb, 1, true, _ret);
}, 0);
case 1:
_12 = _ret;
case 2:
_ret = Lcall(_12, Le)(function (_ret) {
return _30(_cb, 3, true, _ret);
}, 0);
case 3:
_13 = _ret
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
return _30;
});
case 16:
_ret = {
try: Ltry,
raise: Lraise
}
default:
}
if (_cont) {
_cb(_ret)
} else {
return _ret
}
};
module.exports = _14
