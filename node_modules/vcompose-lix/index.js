
require('/lib/lix/__builtin__.js');
var defer_stack = [];
function chain_defer() {
	thisDefer(defer_stack)(function(){return;}, 0);
}
;
function _5(_cb, _step, _cont, _ret, cb_defer) {
	try {
		switch (_step) {
			case 0:
				_ret = (function (Ldf0, Ldf1) {
					var Larguments = arguments, defer_stack = [];
					;
					function _7(_cb, _step, _cont, _ret, cb_defer) {
						try {
							switch (_step) {
								case 0:
									_ret = (function (Lx) {
										var Larguments = arguments, defer_stack = [];
										;
										function _9(_cb, _step, _cont, _ret, cb_defer) {
											try {
												switch (_step) {
													case 0:
														_ret = (function (Lappend) {
															var Larguments = arguments, defer_stack = [];
															var _ret, _0, _4;
															function _11(_cb, _step, _cont, _ret, cb_defer) {
																try {
																	switch (_step) {
																		case 0:
																			_ret = Ldf0(Lx)(function (_ret) {
																				return _11(_cb, 1, true, _ret, function () {
																					thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																					cb_defer && cb_defer();
																				}
																				);
																			}, 0, false, undefined, function () {
																				thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																				cb_defer && cb_defer();
																			}
																			);
																		case 1:
																			_0 = _ret;
																		case 2:
																			_ret = Lcall(_0, (function (Li) {
																				var Larguments = arguments, defer_stack = [];
																				var _ret, _1, _3;
																				function _13(_cb, _step, _cont, _ret, cb_defer) {
																					try {
																						switch (_step) {
																							case 0:
																								_ret = Ldf1(Li)(function (_ret) {
																									return _13(_cb, 1, true, _ret, function () {
																										thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																										cb_defer && cb_defer();
																									}
																									);
																								}, 0, false, undefined, function () {
																									thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																									cb_defer && cb_defer();
																								}
																								);
																							case 1:
																								_1 = _ret;
																							case 2:
																								_ret = Lcall(_1, (function (Lj) {
																									var Larguments = arguments, defer_stack = [];
																									var _ret, _2;
																									function _15(_cb, _step, _cont, _ret, cb_defer) {
																										try {
																											switch (_step) {
																												case 0:
																													_ret = Lappend(Lj)(function (_ret) {
																														return _15(_cb, 1, true, _ret, function () {
																															thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																															cb_defer && cb_defer();
																														}
																														);
																													}, 0, false, undefined, function () {
																														thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																														cb_defer && cb_defer();
																													}
																													);
																												case 1:
																													_2 = _ret
																												default:
																											}
																											thisDefer(defer_stack, false)(function () {
																												_cb(_ret);
																											}, 0);
																											if (_cont) {
																												_cb(_ret);
																											} else {
																												return _ret;
																											}
																										} catch (e) {
																											if (e == _lixCCException) {
																												throw e;
																											} else {
																												Lraise(e)(function (x) {return x;}, 0);
																											}
																										}
																									}
																									;
																									return _15;
																								}))(function (_ret) {
																									return _13(_cb, 3, true, _ret, function () {
																										thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																										cb_defer && cb_defer();
																									}
																									);
																								}, 0, false, undefined, function () {
																									thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																									cb_defer && cb_defer();
																								}
																								);
																							case 3:
																								_3 = _ret
																							default:
																						}
																						thisDefer(defer_stack, false)(function () {
																							_cb(_ret);
																						}, 0);
																						if (_cont) {
																							_cb(_ret);
																						} else {
																							return _ret;
																						}
																					} catch (e) {
																						if (e == _lixCCException) {
																							throw e;
																						} else {
																							Lraise(e)(function (x) {return x;}, 0);
																						}
																					}
																				}
																				;
																				return _13;
																			}))(function (_ret) {
																				return _11(_cb, 3, true, _ret, function () {
																					thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																					cb_defer && cb_defer();
																				}
																				);
																			}, 0, false, undefined, function () {
																				thisDefer(defer_stack, true)(function () {cb_defer && cb_defer();}, 0);
																				cb_defer && cb_defer();
																			}
																			);
																		case 3:
																			_4 = _ret
																		default:
																	}
																	thisDefer(defer_stack, false)(function () {
																		_cb(_ret);
																	}, 0);
																	if (_cont) {
																		_cb(_ret);
																	} else {
																		return _ret;
																	}
																} catch (e) {
																	if (e == _lixCCException) {
																		throw e;
																	} else {
																		Lraise(e)(function (x) {return x;}, 0);
																	}
																}
															}
															;
															return _11;
														})
													default:
												}
												thisDefer(defer_stack, false)(function () {
													_cb(_ret);
												}, 0);
												if (_cont) {
													_cb(_ret);
												} else {
													return _ret;
												}
											} catch (e) {
												if (e == _lixCCException) {
													throw e;
												} else {
													Lraise(e)(function (x) {return x;}, 0);
												}
											}
										}
										;
										return _9;
									})
								default:
							}
							thisDefer(defer_stack, false)(function () {
								_cb(_ret);
							}, 0);
							if (_cont) {
								_cb(_ret);
							} else {
								return _ret;
							}
						} catch (e) {
							if (e == _lixCCException) {
								throw e;
							} else {
								Lraise(e)(function (x) {return x;}, 0);
							}
						}
					}
					;
					return _7;
				})
			default:
		}
		thisDefer(defer_stack, false)(function () {
			_cb(_ret);
		}, 0);
		if (_cont) {
			_cb(_ret);
		} else {
			return _ret;
		}
	} catch (e) {
		if (e == _lixCCException) {
			throw e;
		} else {
			Lraise(e)(function (x) {return x;}, 0);
		}
	}
}
;
module.exports = _5
